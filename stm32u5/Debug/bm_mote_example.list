
bm_mote_example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000904c  08000238  08000238  00001238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000120  08009284  08009284  0000a284  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080093a4  080093a4  0000a3a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080093ac  080093ac  0000a3ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080093b0  080093b0  0000a3b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000009  20000000  080093b4  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000988  2000000c  080093bd  0000b00c  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  20000994  080093bd  0000b994  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  0000b009  2**0
                  CONTENTS, READONLY
 10 .debug_info   00029fe6  00000000  00000000  0000b03f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000057e5  00000000  00000000  00035025  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002488  00000000  00000000  0003a810  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00001beb  00000000  00000000  0003cc98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003ef7b  00000000  00000000  0003e883  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002fdb9  00000000  00000000  0007d7fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001779d9  00000000  00000000  000ad5b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  00224f90  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00009c58  00000000  00000000  00224fd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 0000005d  00000000  00000000  0022ec2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	@ (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	@ (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	@ (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	f3af 8000 	nop.w
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	2000000c 	.word	0x2000000c
 8000254:	00000000 	.word	0x00000000
 8000258:	0800926c 	.word	0x0800926c

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	@ (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	@ (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	@ (8000274 <frame_dummy+0x18>)
 8000266:	f3af 8000 	nop.w
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	20000010 	.word	0x20000010
 8000274:	0800926c 	.word	0x0800926c

08000278 <__aeabi_uldivmod>:
 8000278:	b953      	cbnz	r3, 8000290 <__aeabi_uldivmod+0x18>
 800027a:	b94a      	cbnz	r2, 8000290 <__aeabi_uldivmod+0x18>
 800027c:	2900      	cmp	r1, #0
 800027e:	bf08      	it	eq
 8000280:	2800      	cmpeq	r0, #0
 8000282:	bf1c      	itt	ne
 8000284:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000288:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 800028c:	f000 b97e 	b.w	800058c <__aeabi_idiv0>
 8000290:	f1ad 0c08 	sub.w	ip, sp, #8
 8000294:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000298:	f000 f806 	bl	80002a8 <__udivmoddi4>
 800029c:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002a4:	b004      	add	sp, #16
 80002a6:	4770      	bx	lr

080002a8 <__udivmoddi4>:
 80002a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002ac:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80002ae:	460c      	mov	r4, r1
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d14d      	bne.n	8000350 <__udivmoddi4+0xa8>
 80002b4:	428a      	cmp	r2, r1
 80002b6:	460f      	mov	r7, r1
 80002b8:	4684      	mov	ip, r0
 80002ba:	4696      	mov	lr, r2
 80002bc:	fab2 f382 	clz	r3, r2
 80002c0:	d960      	bls.n	8000384 <__udivmoddi4+0xdc>
 80002c2:	b14b      	cbz	r3, 80002d8 <__udivmoddi4+0x30>
 80002c4:	fa02 fe03 	lsl.w	lr, r2, r3
 80002c8:	f1c3 0220 	rsb	r2, r3, #32
 80002cc:	409f      	lsls	r7, r3
 80002ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80002d2:	fa20 f202 	lsr.w	r2, r0, r2
 80002d6:	4317      	orrs	r7, r2
 80002d8:	ea4f 461e 	mov.w	r6, lr, lsr #16
 80002dc:	fa1f f48e 	uxth.w	r4, lr
 80002e0:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80002e4:	fbb7 f1f6 	udiv	r1, r7, r6
 80002e8:	fb06 7711 	mls	r7, r6, r1, r7
 80002ec:	fb01 f004 	mul.w	r0, r1, r4
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	4290      	cmp	r0, r2
 80002f6:	d908      	bls.n	800030a <__udivmoddi4+0x62>
 80002f8:	eb1e 0202 	adds.w	r2, lr, r2
 80002fc:	f101 37ff 	add.w	r7, r1, #4294967295	@ 0xffffffff
 8000300:	d202      	bcs.n	8000308 <__udivmoddi4+0x60>
 8000302:	4290      	cmp	r0, r2
 8000304:	f200 812d 	bhi.w	8000562 <__udivmoddi4+0x2ba>
 8000308:	4639      	mov	r1, r7
 800030a:	1a12      	subs	r2, r2, r0
 800030c:	fa1f fc8c 	uxth.w	ip, ip
 8000310:	fbb2 f0f6 	udiv	r0, r2, r6
 8000314:	fb06 2210 	mls	r2, r6, r0, r2
 8000318:	fb00 f404 	mul.w	r4, r0, r4
 800031c:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 8000320:	4564      	cmp	r4, ip
 8000322:	d908      	bls.n	8000336 <__udivmoddi4+0x8e>
 8000324:	eb1e 0c0c 	adds.w	ip, lr, ip
 8000328:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 800032c:	d202      	bcs.n	8000334 <__udivmoddi4+0x8c>
 800032e:	4564      	cmp	r4, ip
 8000330:	f200 811a 	bhi.w	8000568 <__udivmoddi4+0x2c0>
 8000334:	4610      	mov	r0, r2
 8000336:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800033a:	ebac 0c04 	sub.w	ip, ip, r4
 800033e:	2100      	movs	r1, #0
 8000340:	b125      	cbz	r5, 800034c <__udivmoddi4+0xa4>
 8000342:	fa2c f303 	lsr.w	r3, ip, r3
 8000346:	2200      	movs	r2, #0
 8000348:	e9c5 3200 	strd	r3, r2, [r5]
 800034c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000350:	428b      	cmp	r3, r1
 8000352:	d905      	bls.n	8000360 <__udivmoddi4+0xb8>
 8000354:	b10d      	cbz	r5, 800035a <__udivmoddi4+0xb2>
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	2100      	movs	r1, #0
 800035c:	4608      	mov	r0, r1
 800035e:	e7f5      	b.n	800034c <__udivmoddi4+0xa4>
 8000360:	fab3 f183 	clz	r1, r3
 8000364:	2900      	cmp	r1, #0
 8000366:	d14d      	bne.n	8000404 <__udivmoddi4+0x15c>
 8000368:	42a3      	cmp	r3, r4
 800036a:	f0c0 80f2 	bcc.w	8000552 <__udivmoddi4+0x2aa>
 800036e:	4290      	cmp	r0, r2
 8000370:	f080 80ef 	bcs.w	8000552 <__udivmoddi4+0x2aa>
 8000374:	4606      	mov	r6, r0
 8000376:	4623      	mov	r3, r4
 8000378:	4608      	mov	r0, r1
 800037a:	2d00      	cmp	r5, #0
 800037c:	d0e6      	beq.n	800034c <__udivmoddi4+0xa4>
 800037e:	e9c5 6300 	strd	r6, r3, [r5]
 8000382:	e7e3      	b.n	800034c <__udivmoddi4+0xa4>
 8000384:	2b00      	cmp	r3, #0
 8000386:	f040 80a2 	bne.w	80004ce <__udivmoddi4+0x226>
 800038a:	1a8a      	subs	r2, r1, r2
 800038c:	ea4f 471e 	mov.w	r7, lr, lsr #16
 8000390:	fa1f f68e 	uxth.w	r6, lr
 8000394:	2101      	movs	r1, #1
 8000396:	fbb2 f4f7 	udiv	r4, r2, r7
 800039a:	fb07 2014 	mls	r0, r7, r4, r2
 800039e:	ea4f 421c 	mov.w	r2, ip, lsr #16
 80003a2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003a6:	fb06 f004 	mul.w	r0, r6, r4
 80003aa:	4290      	cmp	r0, r2
 80003ac:	d90f      	bls.n	80003ce <__udivmoddi4+0x126>
 80003ae:	eb1e 0202 	adds.w	r2, lr, r2
 80003b2:	f104 38ff 	add.w	r8, r4, #4294967295	@ 0xffffffff
 80003b6:	bf2c      	ite	cs
 80003b8:	f04f 0901 	movcs.w	r9, #1
 80003bc:	f04f 0900 	movcc.w	r9, #0
 80003c0:	4290      	cmp	r0, r2
 80003c2:	d903      	bls.n	80003cc <__udivmoddi4+0x124>
 80003c4:	f1b9 0f00 	cmp.w	r9, #0
 80003c8:	f000 80c8 	beq.w	800055c <__udivmoddi4+0x2b4>
 80003cc:	4644      	mov	r4, r8
 80003ce:	1a12      	subs	r2, r2, r0
 80003d0:	fa1f fc8c 	uxth.w	ip, ip
 80003d4:	fbb2 f0f7 	udiv	r0, r2, r7
 80003d8:	fb07 2210 	mls	r2, r7, r0, r2
 80003dc:	fb00 f606 	mul.w	r6, r0, r6
 80003e0:	ea4c 4c02 	orr.w	ip, ip, r2, lsl #16
 80003e4:	4566      	cmp	r6, ip
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x152>
 80003e8:	eb1e 0c0c 	adds.w	ip, lr, ip
 80003ec:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 80003f0:	d202      	bcs.n	80003f8 <__udivmoddi4+0x150>
 80003f2:	4566      	cmp	r6, ip
 80003f4:	f200 80bb 	bhi.w	800056e <__udivmoddi4+0x2c6>
 80003f8:	4610      	mov	r0, r2
 80003fa:	ebac 0c06 	sub.w	ip, ip, r6
 80003fe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000402:	e79d      	b.n	8000340 <__udivmoddi4+0x98>
 8000404:	f1c1 0620 	rsb	r6, r1, #32
 8000408:	408b      	lsls	r3, r1
 800040a:	fa04 fe01 	lsl.w	lr, r4, r1
 800040e:	fa22 f706 	lsr.w	r7, r2, r6
 8000412:	fa20 fc06 	lsr.w	ip, r0, r6
 8000416:	40f4      	lsrs	r4, r6
 8000418:	408a      	lsls	r2, r1
 800041a:	431f      	orrs	r7, r3
 800041c:	ea4e 030c 	orr.w	r3, lr, ip
 8000420:	fa00 fe01 	lsl.w	lr, r0, r1
 8000424:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000428:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800042c:	fa1f fc87 	uxth.w	ip, r7
 8000430:	fbb4 f0f8 	udiv	r0, r4, r8
 8000434:	fb08 4410 	mls	r4, r8, r0, r4
 8000438:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800043c:	fb00 f90c 	mul.w	r9, r0, ip
 8000440:	45a1      	cmp	r9, r4
 8000442:	d90e      	bls.n	8000462 <__udivmoddi4+0x1ba>
 8000444:	193c      	adds	r4, r7, r4
 8000446:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 800044a:	bf2c      	ite	cs
 800044c:	f04f 0b01 	movcs.w	fp, #1
 8000450:	f04f 0b00 	movcc.w	fp, #0
 8000454:	45a1      	cmp	r9, r4
 8000456:	d903      	bls.n	8000460 <__udivmoddi4+0x1b8>
 8000458:	f1bb 0f00 	cmp.w	fp, #0
 800045c:	f000 8093 	beq.w	8000586 <__udivmoddi4+0x2de>
 8000460:	4650      	mov	r0, sl
 8000462:	eba4 0409 	sub.w	r4, r4, r9
 8000466:	fa1f f983 	uxth.w	r9, r3
 800046a:	fbb4 f3f8 	udiv	r3, r4, r8
 800046e:	fb08 4413 	mls	r4, r8, r3, r4
 8000472:	fb03 fc0c 	mul.w	ip, r3, ip
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	45a4      	cmp	ip, r4
 800047c:	d906      	bls.n	800048c <__udivmoddi4+0x1e4>
 800047e:	193c      	adds	r4, r7, r4
 8000480:	f103 38ff 	add.w	r8, r3, #4294967295	@ 0xffffffff
 8000484:	d201      	bcs.n	800048a <__udivmoddi4+0x1e2>
 8000486:	45a4      	cmp	ip, r4
 8000488:	d87a      	bhi.n	8000580 <__udivmoddi4+0x2d8>
 800048a:	4643      	mov	r3, r8
 800048c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000490:	eba4 040c 	sub.w	r4, r4, ip
 8000494:	fba0 9802 	umull	r9, r8, r0, r2
 8000498:	4544      	cmp	r4, r8
 800049a:	46cc      	mov	ip, r9
 800049c:	4643      	mov	r3, r8
 800049e:	d302      	bcc.n	80004a6 <__udivmoddi4+0x1fe>
 80004a0:	d106      	bne.n	80004b0 <__udivmoddi4+0x208>
 80004a2:	45ce      	cmp	lr, r9
 80004a4:	d204      	bcs.n	80004b0 <__udivmoddi4+0x208>
 80004a6:	3801      	subs	r0, #1
 80004a8:	ebb9 0c02 	subs.w	ip, r9, r2
 80004ac:	eb68 0307 	sbc.w	r3, r8, r7
 80004b0:	b15d      	cbz	r5, 80004ca <__udivmoddi4+0x222>
 80004b2:	ebbe 020c 	subs.w	r2, lr, ip
 80004b6:	eb64 0403 	sbc.w	r4, r4, r3
 80004ba:	fa04 f606 	lsl.w	r6, r4, r6
 80004be:	fa22 f301 	lsr.w	r3, r2, r1
 80004c2:	40cc      	lsrs	r4, r1
 80004c4:	431e      	orrs	r6, r3
 80004c6:	e9c5 6400 	strd	r6, r4, [r5]
 80004ca:	2100      	movs	r1, #0
 80004cc:	e73e      	b.n	800034c <__udivmoddi4+0xa4>
 80004ce:	fa02 fe03 	lsl.w	lr, r2, r3
 80004d2:	f1c3 0120 	rsb	r1, r3, #32
 80004d6:	fa04 f203 	lsl.w	r2, r4, r3
 80004da:	fa00 fc03 	lsl.w	ip, r0, r3
 80004de:	40cc      	lsrs	r4, r1
 80004e0:	ea4f 471e 	mov.w	r7, lr, lsr #16
 80004e4:	fa20 f101 	lsr.w	r1, r0, r1
 80004e8:	fa1f f68e 	uxth.w	r6, lr
 80004ec:	fbb4 f0f7 	udiv	r0, r4, r7
 80004f0:	430a      	orrs	r2, r1
 80004f2:	fb07 4410 	mls	r4, r7, r0, r4
 80004f6:	0c11      	lsrs	r1, r2, #16
 80004f8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80004fc:	fb00 f406 	mul.w	r4, r0, r6
 8000500:	428c      	cmp	r4, r1
 8000502:	d90e      	bls.n	8000522 <__udivmoddi4+0x27a>
 8000504:	eb1e 0101 	adds.w	r1, lr, r1
 8000508:	f100 38ff 	add.w	r8, r0, #4294967295	@ 0xffffffff
 800050c:	bf2c      	ite	cs
 800050e:	f04f 0901 	movcs.w	r9, #1
 8000512:	f04f 0900 	movcc.w	r9, #0
 8000516:	428c      	cmp	r4, r1
 8000518:	d902      	bls.n	8000520 <__udivmoddi4+0x278>
 800051a:	f1b9 0f00 	cmp.w	r9, #0
 800051e:	d02c      	beq.n	800057a <__udivmoddi4+0x2d2>
 8000520:	4640      	mov	r0, r8
 8000522:	1b09      	subs	r1, r1, r4
 8000524:	b292      	uxth	r2, r2
 8000526:	fbb1 f4f7 	udiv	r4, r1, r7
 800052a:	fb07 1114 	mls	r1, r7, r4, r1
 800052e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000532:	fb04 f106 	mul.w	r1, r4, r6
 8000536:	4291      	cmp	r1, r2
 8000538:	d907      	bls.n	800054a <__udivmoddi4+0x2a2>
 800053a:	eb1e 0202 	adds.w	r2, lr, r2
 800053e:	f104 38ff 	add.w	r8, r4, #4294967295	@ 0xffffffff
 8000542:	d201      	bcs.n	8000548 <__udivmoddi4+0x2a0>
 8000544:	4291      	cmp	r1, r2
 8000546:	d815      	bhi.n	8000574 <__udivmoddi4+0x2cc>
 8000548:	4644      	mov	r4, r8
 800054a:	1a52      	subs	r2, r2, r1
 800054c:	ea44 4100 	orr.w	r1, r4, r0, lsl #16
 8000550:	e721      	b.n	8000396 <__udivmoddi4+0xee>
 8000552:	1a86      	subs	r6, r0, r2
 8000554:	eb64 0303 	sbc.w	r3, r4, r3
 8000558:	2001      	movs	r0, #1
 800055a:	e70e      	b.n	800037a <__udivmoddi4+0xd2>
 800055c:	3c02      	subs	r4, #2
 800055e:	4472      	add	r2, lr
 8000560:	e735      	b.n	80003ce <__udivmoddi4+0x126>
 8000562:	3902      	subs	r1, #2
 8000564:	4472      	add	r2, lr
 8000566:	e6d0      	b.n	800030a <__udivmoddi4+0x62>
 8000568:	44f4      	add	ip, lr
 800056a:	3802      	subs	r0, #2
 800056c:	e6e3      	b.n	8000336 <__udivmoddi4+0x8e>
 800056e:	44f4      	add	ip, lr
 8000570:	3802      	subs	r0, #2
 8000572:	e742      	b.n	80003fa <__udivmoddi4+0x152>
 8000574:	3c02      	subs	r4, #2
 8000576:	4472      	add	r2, lr
 8000578:	e7e7      	b.n	800054a <__udivmoddi4+0x2a2>
 800057a:	3802      	subs	r0, #2
 800057c:	4471      	add	r1, lr
 800057e:	e7d0      	b.n	8000522 <__udivmoddi4+0x27a>
 8000580:	3b02      	subs	r3, #2
 8000582:	443c      	add	r4, r7
 8000584:	e782      	b.n	800048c <__udivmoddi4+0x1e4>
 8000586:	3802      	subs	r0, #2
 8000588:	443c      	add	r4, r7
 800058a:	e76a      	b.n	8000462 <__udivmoddi4+0x1ba>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000594:	4b1e      	ldr	r3, [pc, #120]	@ (8000610 <MX_ADC1_Init+0x80>)
 8000596:	4a1f      	ldr	r2, [pc, #124]	@ (8000614 <MX_ADC1_Init+0x84>)
 8000598:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800059a:	4b1d      	ldr	r3, [pc, #116]	@ (8000610 <MX_ADC1_Init+0x80>)
 800059c:	2200      	movs	r2, #0
 800059e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_14B;
 80005a0:	4b1b      	ldr	r3, [pc, #108]	@ (8000610 <MX_ADC1_Init+0x80>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	609a      	str	r2, [r3, #8]
  hadc1.Init.GainCompensation = 0;
 80005a6:	4b1a      	ldr	r3, [pc, #104]	@ (8000610 <MX_ADC1_Init+0x80>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80005ac:	4b18      	ldr	r3, [pc, #96]	@ (8000610 <MX_ADC1_Init+0x80>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80005b2:	4b17      	ldr	r3, [pc, #92]	@ (8000610 <MX_ADC1_Init+0x80>)
 80005b4:	2204      	movs	r2, #4
 80005b6:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80005b8:	4b15      	ldr	r3, [pc, #84]	@ (8000610 <MX_ADC1_Init+0x80>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80005be:	4b14      	ldr	r3, [pc, #80]	@ (8000610 <MX_ADC1_Init+0x80>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.NbrOfConversion = 1;
 80005c6:	4b12      	ldr	r3, [pc, #72]	@ (8000610 <MX_ADC1_Init+0x80>)
 80005c8:	2201      	movs	r2, #1
 80005ca:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005cc:	4b10      	ldr	r3, [pc, #64]	@ (8000610 <MX_ADC1_Init+0x80>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80005d4:	4b0e      	ldr	r3, [pc, #56]	@ (8000610 <MX_ADC1_Init+0x80>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80005dc:	4b0c      	ldr	r3, [pc, #48]	@ (8000610 <MX_ADC1_Init+0x80>)
 80005de:	2200      	movs	r2, #0
 80005e0:	669a      	str	r2, [r3, #104]	@ 0x68
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80005e2:	4b0b      	ldr	r3, [pc, #44]	@ (8000610 <MX_ADC1_Init+0x80>)
 80005e4:	2200      	movs	r2, #0
 80005e6:	645a      	str	r2, [r3, #68]	@ 0x44
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 80005e8:	4b09      	ldr	r3, [pc, #36]	@ (8000610 <MX_ADC1_Init+0x80>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	651a      	str	r2, [r3, #80]	@ 0x50
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80005ee:	4b08      	ldr	r3, [pc, #32]	@ (8000610 <MX_ADC1_Init+0x80>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 80005f4:	4b06      	ldr	r3, [pc, #24]	@ (8000610 <MX_ADC1_Init+0x80>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80005fc:	4804      	ldr	r0, [pc, #16]	@ (8000610 <MX_ADC1_Init+0x80>)
 80005fe:	f002 f81b 	bl	8002638 <HAL_ADC_Init>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <MX_ADC1_Init+0x7c>
  {
    Error_Handler();
 8000608:	f000 fd8a 	bl	8001120 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800060c:	bf00      	nop
 800060e:	bd80      	pop	{r7, pc}
 8000610:	20000028 	.word	0x20000028
 8000614:	42028000 	.word	0x42028000

08000618 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b0b4      	sub	sp, #208	@ 0xd0
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000620:	f107 0310 	add.w	r3, r7, #16
 8000624:	22c0      	movs	r2, #192	@ 0xc0
 8000626:	2100      	movs	r1, #0
 8000628:	4618      	mov	r0, r3
 800062a:	f008 fdf2 	bl	8009212 <memset>
  if(adcHandle->Instance==ADC1)
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	4a15      	ldr	r2, [pc, #84]	@ (8000688 <HAL_ADC_MspInit+0x70>)
 8000634:	4293      	cmp	r3, r2
 8000636:	d122      	bne.n	800067e <HAL_ADC_MspInit+0x66>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC;
 8000638:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800063c:	f04f 0300 	mov.w	r3, #0
 8000640:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HSI;
 8000644:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000648:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800064c:	f107 0310 	add.w	r3, r7, #16
 8000650:	4618      	mov	r0, r3
 8000652:	f005 f9a3 	bl	800599c <HAL_RCCEx_PeriphCLKConfig>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d001      	beq.n	8000660 <HAL_ADC_MspInit+0x48>
    {
      Error_Handler();
 800065c:	f000 fd60 	bl	8001120 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000660:	4b0a      	ldr	r3, [pc, #40]	@ (800068c <HAL_ADC_MspInit+0x74>)
 8000662:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000666:	4a09      	ldr	r2, [pc, #36]	@ (800068c <HAL_ADC_MspInit+0x74>)
 8000668:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800066c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000670:	4b06      	ldr	r3, [pc, #24]	@ (800068c <HAL_ADC_MspInit+0x74>)
 8000672:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000676:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800067a:	60fb      	str	r3, [r7, #12]
 800067c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800067e:	bf00      	nop
 8000680:	37d0      	adds	r7, #208	@ 0xd0
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	42028000 	.word	0x42028000
 800068c:	46020c00 	.word	0x46020c00

08000690 <MX_GPDMA1_Init>:

/* USER CODE END 0 */

/* GPDMA1 init function */
void MX_GPDMA1_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b082      	sub	sp, #8
 8000694:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Init 0 */

  /* USER CODE END GPDMA1_Init 0 */

  /* Peripheral clock enable */
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 8000696:	4b19      	ldr	r3, [pc, #100]	@ (80006fc <MX_GPDMA1_Init+0x6c>)
 8000698:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800069c:	4a17      	ldr	r2, [pc, #92]	@ (80006fc <MX_GPDMA1_Init+0x6c>)
 800069e:	f043 0301 	orr.w	r3, r3, #1
 80006a2:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 80006a6:	4b15      	ldr	r3, [pc, #84]	@ (80006fc <MX_GPDMA1_Init+0x6c>)
 80006a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80006ac:	f003 0301 	and.w	r3, r3, #1
 80006b0:	607b      	str	r3, [r7, #4]
 80006b2:	687b      	ldr	r3, [r7, #4]

  /* GPDMA1 interrupt Init */
    HAL_NVIC_SetPriority(GPDMA1_Channel12_IRQn, 6, 0);
 80006b4:	2200      	movs	r2, #0
 80006b6:	2106      	movs	r1, #6
 80006b8:	2054      	movs	r0, #84	@ 0x54
 80006ba:	f002 fb3f 	bl	8002d3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel12_IRQn);
 80006be:	2054      	movs	r0, #84	@ 0x54
 80006c0:	f002 fb56 	bl	8002d70 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel13_IRQn, 6, 0);
 80006c4:	2200      	movs	r2, #0
 80006c6:	2106      	movs	r1, #6
 80006c8:	2055      	movs	r0, #85	@ 0x55
 80006ca:	f002 fb37 	bl	8002d3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel13_IRQn);
 80006ce:	2055      	movs	r0, #85	@ 0x55
 80006d0:	f002 fb4e 	bl	8002d70 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel14_IRQn, 6, 0);
 80006d4:	2200      	movs	r2, #0
 80006d6:	2106      	movs	r1, #6
 80006d8:	2056      	movs	r0, #86	@ 0x56
 80006da:	f002 fb2f 	bl	8002d3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel14_IRQn);
 80006de:	2056      	movs	r0, #86	@ 0x56
 80006e0:	f002 fb46 	bl	8002d70 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(GPDMA1_Channel15_IRQn, 6, 0);
 80006e4:	2200      	movs	r2, #0
 80006e6:	2106      	movs	r1, #6
 80006e8:	2057      	movs	r0, #87	@ 0x57
 80006ea:	f002 fb27 	bl	8002d3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel15_IRQn);
 80006ee:	2057      	movs	r0, #87	@ 0x57
 80006f0:	f002 fb3e 	bl	8002d70 <HAL_NVIC_EnableIRQ>
  /* USER CODE END GPDMA1_Init 1 */
  /* USER CODE BEGIN GPDMA1_Init 2 */

  /* USER CODE END GPDMA1_Init 2 */

}
 80006f4:	bf00      	nop
 80006f6:	3708      	adds	r7, #8
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	46020c00 	.word	0x46020c00

08000700 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000700:	b480      	push	{r7}
 8000702:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000704:	4b04      	ldr	r3, [pc, #16]	@ (8000718 <__NVIC_GetPriorityGrouping+0x18>)
 8000706:	68db      	ldr	r3, [r3, #12]
 8000708:	0a1b      	lsrs	r3, r3, #8
 800070a:	f003 0307 	and.w	r3, r3, #7
}
 800070e:	4618      	mov	r0, r3
 8000710:	46bd      	mov	sp, r7
 8000712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000716:	4770      	bx	lr
 8000718:	e000ed00 	.word	0xe000ed00

0800071c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800071c:	b480      	push	{r7}
 800071e:	b083      	sub	sp, #12
 8000720:	af00      	add	r7, sp, #0
 8000722:	4603      	mov	r3, r0
 8000724:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000726:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800072a:	2b00      	cmp	r3, #0
 800072c:	db0b      	blt.n	8000746 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800072e:	79fb      	ldrb	r3, [r7, #7]
 8000730:	f003 021f 	and.w	r2, r3, #31
 8000734:	4907      	ldr	r1, [pc, #28]	@ (8000754 <__NVIC_EnableIRQ+0x38>)
 8000736:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800073a:	095b      	lsrs	r3, r3, #5
 800073c:	2001      	movs	r0, #1
 800073e:	fa00 f202 	lsl.w	r2, r0, r2
 8000742:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000746:	bf00      	nop
 8000748:	370c      	adds	r7, #12
 800074a:	46bd      	mov	sp, r7
 800074c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000750:	4770      	bx	lr
 8000752:	bf00      	nop
 8000754:	e000e100 	.word	0xe000e100

08000758 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000758:	b480      	push	{r7}
 800075a:	b083      	sub	sp, #12
 800075c:	af00      	add	r7, sp, #0
 800075e:	4603      	mov	r3, r0
 8000760:	6039      	str	r1, [r7, #0]
 8000762:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000764:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000768:	2b00      	cmp	r3, #0
 800076a:	db0a      	blt.n	8000782 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800076c:	683b      	ldr	r3, [r7, #0]
 800076e:	b2da      	uxtb	r2, r3
 8000770:	490c      	ldr	r1, [pc, #48]	@ (80007a4 <__NVIC_SetPriority+0x4c>)
 8000772:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000776:	0112      	lsls	r2, r2, #4
 8000778:	b2d2      	uxtb	r2, r2
 800077a:	440b      	add	r3, r1
 800077c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000780:	e00a      	b.n	8000798 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000782:	683b      	ldr	r3, [r7, #0]
 8000784:	b2da      	uxtb	r2, r3
 8000786:	4908      	ldr	r1, [pc, #32]	@ (80007a8 <__NVIC_SetPriority+0x50>)
 8000788:	79fb      	ldrb	r3, [r7, #7]
 800078a:	f003 030f 	and.w	r3, r3, #15
 800078e:	3b04      	subs	r3, #4
 8000790:	0112      	lsls	r2, r2, #4
 8000792:	b2d2      	uxtb	r2, r2
 8000794:	440b      	add	r3, r1
 8000796:	761a      	strb	r2, [r3, #24]
}
 8000798:	bf00      	nop
 800079a:	370c      	adds	r7, #12
 800079c:	46bd      	mov	sp, r7
 800079e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a2:	4770      	bx	lr
 80007a4:	e000e100 	.word	0xe000e100
 80007a8:	e000ed00 	.word	0xe000ed00

080007ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007ac:	b480      	push	{r7}
 80007ae:	b089      	sub	sp, #36	@ 0x24
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	60f8      	str	r0, [r7, #12]
 80007b4:	60b9      	str	r1, [r7, #8]
 80007b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007b8:	68fb      	ldr	r3, [r7, #12]
 80007ba:	f003 0307 	and.w	r3, r3, #7
 80007be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007c0:	69fb      	ldr	r3, [r7, #28]
 80007c2:	f1c3 0307 	rsb	r3, r3, #7
 80007c6:	2b04      	cmp	r3, #4
 80007c8:	bf28      	it	cs
 80007ca:	2304      	movcs	r3, #4
 80007cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007ce:	69fb      	ldr	r3, [r7, #28]
 80007d0:	3304      	adds	r3, #4
 80007d2:	2b06      	cmp	r3, #6
 80007d4:	d902      	bls.n	80007dc <NVIC_EncodePriority+0x30>
 80007d6:	69fb      	ldr	r3, [r7, #28]
 80007d8:	3b03      	subs	r3, #3
 80007da:	e000      	b.n	80007de <NVIC_EncodePriority+0x32>
 80007dc:	2300      	movs	r3, #0
 80007de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007e0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80007e4:	69bb      	ldr	r3, [r7, #24]
 80007e6:	fa02 f303 	lsl.w	r3, r2, r3
 80007ea:	43da      	mvns	r2, r3
 80007ec:	68bb      	ldr	r3, [r7, #8]
 80007ee:	401a      	ands	r2, r3
 80007f0:	697b      	ldr	r3, [r7, #20]
 80007f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007f4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80007f8:	697b      	ldr	r3, [r7, #20]
 80007fa:	fa01 f303 	lsl.w	r3, r1, r3
 80007fe:	43d9      	mvns	r1, r3
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000804:	4313      	orrs	r3, r2
         );
}
 8000806:	4618      	mov	r0, r3
 8000808:	3724      	adds	r7, #36	@ 0x24
 800080a:	46bd      	mov	sp, r7
 800080c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000810:	4770      	bx	lr

08000812 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8000812:	b480      	push	{r7}
 8000814:	b08b      	sub	sp, #44	@ 0x2c
 8000816:	af00      	add	r7, sp, #0
 8000818:	60f8      	str	r0, [r7, #12]
 800081a:	60b9      	str	r1, [r7, #8]
 800081c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * GPIO_MODER_MODE1_Pos)),
 800081e:	68fb      	ldr	r3, [r7, #12]
 8000820:	681a      	ldr	r2, [r3, #0]
 8000822:	68bb      	ldr	r3, [r7, #8]
 8000824:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000826:	697b      	ldr	r3, [r7, #20]
 8000828:	fa93 f3a3 	rbit	r3, r3
 800082c:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800082e:	693b      	ldr	r3, [r7, #16]
 8000830:	61bb      	str	r3, [r7, #24]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8000832:	69bb      	ldr	r3, [r7, #24]
 8000834:	2b00      	cmp	r3, #0
 8000836:	d101      	bne.n	800083c <LL_GPIO_SetPinMode+0x2a>
  {
    return 32U;
 8000838:	2320      	movs	r3, #32
 800083a:	e003      	b.n	8000844 <LL_GPIO_SetPinMode+0x32>
  }
  return __builtin_clz(value);
 800083c:	69bb      	ldr	r3, [r7, #24]
 800083e:	fab3 f383 	clz	r3, r3
 8000842:	b2db      	uxtb	r3, r3
 8000844:	005b      	lsls	r3, r3, #1
 8000846:	2103      	movs	r1, #3
 8000848:	fa01 f303 	lsl.w	r3, r1, r3
 800084c:	43db      	mvns	r3, r3
 800084e:	401a      	ands	r2, r3
 8000850:	68bb      	ldr	r3, [r7, #8]
 8000852:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000854:	6a3b      	ldr	r3, [r7, #32]
 8000856:	fa93 f3a3 	rbit	r3, r3
 800085a:	61fb      	str	r3, [r7, #28]
  return result;
 800085c:	69fb      	ldr	r3, [r7, #28]
 800085e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8000860:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000862:	2b00      	cmp	r3, #0
 8000864:	d101      	bne.n	800086a <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8000866:	2320      	movs	r3, #32
 8000868:	e003      	b.n	8000872 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 800086a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800086c:	fab3 f383 	clz	r3, r3
 8000870:	b2db      	uxtb	r3, r3
 8000872:	005b      	lsls	r3, r3, #1
 8000874:	6879      	ldr	r1, [r7, #4]
 8000876:	fa01 f303 	lsl.w	r3, r1, r3
 800087a:	431a      	orrs	r2, r3
 800087c:	68fb      	ldr	r3, [r7, #12]
 800087e:	601a      	str	r2, [r3, #0]
             (Mode << (POSITION_VAL(Pin) * GPIO_MODER_MODE1_Pos)));
}
 8000880:	bf00      	nop
 8000882:	372c      	adds	r7, #44	@ 0x2c
 8000884:	46bd      	mov	sp, r7
 8000886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088a:	4770      	bx	lr

0800088c <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 800088c:	b480      	push	{r7}
 800088e:	b08b      	sub	sp, #44	@ 0x2c
 8000890:	af00      	add	r7, sp, #0
 8000892:	60f8      	str	r0, [r7, #12]
 8000894:	60b9      	str	r1, [r7, #8]
 8000896:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * GPIO_PUPDR_PUPD1_Pos)),
 8000898:	68fb      	ldr	r3, [r7, #12]
 800089a:	68da      	ldr	r2, [r3, #12]
 800089c:	68bb      	ldr	r3, [r7, #8]
 800089e:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80008a0:	697b      	ldr	r3, [r7, #20]
 80008a2:	fa93 f3a3 	rbit	r3, r3
 80008a6:	613b      	str	r3, [r7, #16]
  return result;
 80008a8:	693b      	ldr	r3, [r7, #16]
 80008aa:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80008ac:	69bb      	ldr	r3, [r7, #24]
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d101      	bne.n	80008b6 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 80008b2:	2320      	movs	r3, #32
 80008b4:	e003      	b.n	80008be <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 80008b6:	69bb      	ldr	r3, [r7, #24]
 80008b8:	fab3 f383 	clz	r3, r3
 80008bc:	b2db      	uxtb	r3, r3
 80008be:	005b      	lsls	r3, r3, #1
 80008c0:	2103      	movs	r1, #3
 80008c2:	fa01 f303 	lsl.w	r3, r1, r3
 80008c6:	43db      	mvns	r3, r3
 80008c8:	401a      	ands	r2, r3
 80008ca:	68bb      	ldr	r3, [r7, #8]
 80008cc:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80008ce:	6a3b      	ldr	r3, [r7, #32]
 80008d0:	fa93 f3a3 	rbit	r3, r3
 80008d4:	61fb      	str	r3, [r7, #28]
  return result;
 80008d6:	69fb      	ldr	r3, [r7, #28]
 80008d8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80008da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d101      	bne.n	80008e4 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 80008e0:	2320      	movs	r3, #32
 80008e2:	e003      	b.n	80008ec <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 80008e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80008e6:	fab3 f383 	clz	r3, r3
 80008ea:	b2db      	uxtb	r3, r3
 80008ec:	005b      	lsls	r3, r3, #1
 80008ee:	6879      	ldr	r1, [r7, #4]
 80008f0:	fa01 f303 	lsl.w	r3, r1, r3
 80008f4:	431a      	orrs	r2, r3
 80008f6:	68fb      	ldr	r3, [r7, #12]
 80008f8:	60da      	str	r2, [r3, #12]
             (Pull << (POSITION_VAL(Pin) * GPIO_PUPDR_PUPD1_Pos)));
}
 80008fa:	bf00      	nop
 80008fc:	372c      	adds	r7, #44	@ 0x2c
 80008fe:	46bd      	mov	sp, r7
 8000900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000904:	4770      	bx	lr

08000906 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000906:	b480      	push	{r7}
 8000908:	b083      	sub	sp, #12
 800090a:	af00      	add	r7, sp, #0
 800090c:	6078      	str	r0, [r7, #4]
 800090e:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	683a      	ldr	r2, [r7, #0]
 8000914:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000916:	bf00      	nop
 8000918:	370c      	adds	r7, #12
 800091a:	46bd      	mov	sp, r7
 800091c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000920:	4770      	bx	lr
	...

08000924 <LL_EXTI_SetEXTISource>:
  *         @arg @ref LL_EXTI_EXTI_LINE14
  *         @arg @ref LL_EXTI_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8000924:	b480      	push	{r7}
 8000926:	b083      	sub	sp, #12
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
 800092c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(EXTI->EXTICR[Line & 0x03U], EXTI_EXTICR1_EXTI0 << (Line >> LL_EXTI_REGISTER_PINPOS_SHFT), \
 800092e:	4a10      	ldr	r2, [pc, #64]	@ (8000970 <LL_EXTI_SetEXTISource+0x4c>)
 8000930:	683b      	ldr	r3, [r7, #0]
 8000932:	f003 0303 	and.w	r3, r3, #3
 8000936:	3318      	adds	r3, #24
 8000938:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800093c:	683b      	ldr	r3, [r7, #0]
 800093e:	0c1b      	lsrs	r3, r3, #16
 8000940:	210f      	movs	r1, #15
 8000942:	fa01 f303 	lsl.w	r3, r1, r3
 8000946:	43db      	mvns	r3, r3
 8000948:	ea02 0103 	and.w	r1, r2, r3
 800094c:	683b      	ldr	r3, [r7, #0]
 800094e:	0c1b      	lsrs	r3, r3, #16
 8000950:	687a      	ldr	r2, [r7, #4]
 8000952:	409a      	lsls	r2, r3
 8000954:	4806      	ldr	r0, [pc, #24]	@ (8000970 <LL_EXTI_SetEXTISource+0x4c>)
 8000956:	683b      	ldr	r3, [r7, #0]
 8000958:	f003 0303 	and.w	r3, r3, #3
 800095c:	430a      	orrs	r2, r1
 800095e:	3318      	adds	r3, #24
 8000960:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
             Port << (Line >> LL_EXTI_REGISTER_PINPOS_SHFT));
}
 8000964:	bf00      	nop
 8000966:	370c      	adds	r7, #12
 8000968:	46bd      	mov	sp, r7
 800096a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096e:	4770      	bx	lr
 8000970:	46022000 	.word	0x46022000

08000974 <LL_AHB2_GRP1_EnableClock>:
  *
  *        (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000974:	b480      	push	{r7}
 8000976:	b085      	sub	sp, #20
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR1, Periphs);
 800097c:	4b0a      	ldr	r3, [pc, #40]	@ (80009a8 <LL_AHB2_GRP1_EnableClock+0x34>)
 800097e:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8000982:	4909      	ldr	r1, [pc, #36]	@ (80009a8 <LL_AHB2_GRP1_EnableClock+0x34>)
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	4313      	orrs	r3, r2
 8000988:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR1, Periphs);
 800098c:	4b06      	ldr	r3, [pc, #24]	@ (80009a8 <LL_AHB2_GRP1_EnableClock+0x34>)
 800098e:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	4013      	ands	r3, r2
 8000996:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000998:	68fb      	ldr	r3, [r7, #12]
}
 800099a:	bf00      	nop
 800099c:	3714      	adds	r7, #20
 800099e:	46bd      	mov	sp, r7
 80009a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a4:	4770      	bx	lr
 80009a6:	bf00      	nop
 80009a8:	46020c00 	.word	0x46020c00

080009ac <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PA6   ------> SPI1_MISO
*/
void MX_GPIO_Init(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b088      	sub	sp, #32
 80009b0:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 80009b2:	f107 0318 	add.w	r3, r7, #24
 80009b6:	2200      	movs	r2, #0
 80009b8:	601a      	str	r2, [r3, #0]
 80009ba:	605a      	str	r2, [r3, #4]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009bc:	463b      	mov	r3, r7
 80009be:	2200      	movs	r2, #0
 80009c0:	601a      	str	r2, [r3, #0]
 80009c2:	605a      	str	r2, [r3, #4]
 80009c4:	609a      	str	r2, [r3, #8]
 80009c6:	60da      	str	r2, [r3, #12]
 80009c8:	611a      	str	r2, [r3, #16]
 80009ca:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 80009cc:	2004      	movs	r0, #4
 80009ce:	f7ff ffd1 	bl	8000974 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOH);
 80009d2:	2080      	movs	r0, #128	@ 0x80
 80009d4:	f7ff ffce 	bl	8000974 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 80009d8:	2001      	movs	r0, #1
 80009da:	f7ff ffcb 	bl	8000974 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 80009de:	2002      	movs	r0, #2
 80009e0:	f7ff ffc8 	bl	8000974 <LL_AHB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIO2_GPIO_Port, GPIO2_Pin);
 80009e4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80009e8:	4881      	ldr	r0, [pc, #516]	@ (8000bf0 <MX_GPIO_Init+0x244>)
 80009ea:	f7ff ff8c 	bl	8000906 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOH, GPIO1_Pin|ADIN_PWR_Pin);
 80009ee:	2103      	movs	r1, #3
 80009f0:	4880      	ldr	r0, [pc, #512]	@ (8000bf4 <MX_GPIO_Init+0x248>)
 80009f2:	f7ff ff88 	bl	8000906 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOA, ADIN_RST_Pin|I2C_MUX_RESET_Pin|BM_CS_Pin|FLASH_CS_Pin
 80009f6:	f248 1113 	movw	r1, #33043	@ 0x8113
 80009fa:	487f      	ldr	r0, [pc, #508]	@ (8000bf8 <MX_GPIO_Init+0x24c>)
 80009fc:	f7ff ff83 	bl	8000906 <LL_GPIO_ResetOutputPin>
                          |ADIN_CS_Pin);

  /**/
  LL_GPIO_ResetOutputPin(VBUS_BF_EN_GPIO_Port, VBUS_BF_EN_Pin);
 8000a00:	2102      	movs	r1, #2
 8000a02:	487e      	ldr	r0, [pc, #504]	@ (8000bfc <MX_GPIO_Init+0x250>)
 8000a04:	f7ff ff7f 	bl	8000906 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = GPIO2_Pin;
 8000a08:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a0c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000a0e:	2301      	movs	r3, #1
 8000a10:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000a12:	2300      	movs	r3, #0
 8000a14:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000a16:	2300      	movs	r3, #0
 8000a18:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIO2_GPIO_Port, &GPIO_InitStruct);
 8000a1e:	463b      	mov	r3, r7
 8000a20:	4619      	mov	r1, r3
 8000a22:	4873      	ldr	r0, [pc, #460]	@ (8000bf0 <MX_GPIO_Init+0x244>)
 8000a24:	f007 f968 	bl	8007cf8 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = GPIO1_Pin|ADIN_PWR_Pin;
 8000a28:	2303      	movs	r3, #3
 8000a2a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000a2c:	2301      	movs	r3, #1
 8000a2e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000a30:	2300      	movs	r3, #0
 8000a32:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000a34:	2300      	movs	r3, #0
 8000a36:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000a3c:	463b      	mov	r3, r7
 8000a3e:	4619      	mov	r1, r3
 8000a40:	486c      	ldr	r0, [pc, #432]	@ (8000bf4 <MX_GPIO_Init+0x248>)
 8000a42:	f007 f959 	bl	8007cf8 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = ADIN_RST_Pin|I2C_MUX_RESET_Pin|BM_CS_Pin|FLASH_CS_Pin
 8000a46:	f248 1313 	movw	r3, #33043	@ 0x8113
 8000a4a:	603b      	str	r3, [r7, #0]
                          |ADIN_CS_Pin;
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000a4c:	2301      	movs	r3, #1
 8000a4e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000a50:	2300      	movs	r3, #0
 8000a52:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000a54:	2300      	movs	r3, #0
 8000a56:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a5c:	463b      	mov	r3, r7
 8000a5e:	4619      	mov	r1, r3
 8000a60:	4865      	ldr	r0, [pc, #404]	@ (8000bf8 <MX_GPIO_Init+0x24c>)
 8000a62:	f007 f949 	bl	8007cf8 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = BM_MISO_Pin;
 8000a66:	2340      	movs	r3, #64	@ 0x40
 8000a68:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000a6a:	2302      	movs	r3, #2
 8000a6c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000a72:	2300      	movs	r3, #0
 8000a74:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000a76:	2300      	movs	r3, #0
 8000a78:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8000a7a:	2305      	movs	r3, #5
 8000a7c:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(BM_MISO_GPIO_Port, &GPIO_InitStruct);
 8000a7e:	463b      	mov	r3, r7
 8000a80:	4619      	mov	r1, r3
 8000a82:	485d      	ldr	r0, [pc, #372]	@ (8000bf8 <MX_GPIO_Init+0x24c>)
 8000a84:	f007 f938 	bl	8007cf8 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = BM_INT_Pin;
 8000a88:	2301      	movs	r3, #1
 8000a8a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000a90:	2300      	movs	r3, #0
 8000a92:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(BM_INT_GPIO_Port, &GPIO_InitStruct);
 8000a94:	463b      	mov	r3, r7
 8000a96:	4619      	mov	r1, r3
 8000a98:	4858      	ldr	r0, [pc, #352]	@ (8000bfc <MX_GPIO_Init+0x250>)
 8000a9a:	f007 f92d 	bl	8007cf8 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = VBUS_BF_EN_Pin;
 8000a9e:	2302      	movs	r3, #2
 8000aa0:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(VBUS_BF_EN_GPIO_Port, &GPIO_InitStruct);
 8000ab2:	463b      	mov	r3, r7
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	4851      	ldr	r0, [pc, #324]	@ (8000bfc <MX_GPIO_Init+0x250>)
 8000ab8:	f007 f91e 	bl	8007cf8 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = BOOT_LED_Pin;
 8000abc:	2308      	movs	r3, #8
 8000abe:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(BOOT_LED_GPIO_Port, &GPIO_InitStruct);
 8000ac8:	463b      	mov	r3, r7
 8000aca:	4619      	mov	r1, r3
 8000acc:	4849      	ldr	r0, [pc, #292]	@ (8000bf4 <MX_GPIO_Init+0x248>)
 8000ace:	f007 f913 	bl	8007cf8 <LL_GPIO_Init>

  /**/
  LL_EXTI_SetEXTISource(LL_EXTI_EXTI_PORTA, LL_EXTI_EXTI_LINE9);
 8000ad2:	494b      	ldr	r1, [pc, #300]	@ (8000c00 <MX_GPIO_Init+0x254>)
 8000ad4:	2000      	movs	r0, #0
 8000ad6:	f7ff ff25 	bl	8000924 <LL_EXTI_SetEXTISource>

  /**/
  LL_EXTI_SetEXTISource(LL_EXTI_EXTI_PORTA, LL_EXTI_EXTI_LINE10);
 8000ada:	494a      	ldr	r1, [pc, #296]	@ (8000c04 <MX_GPIO_Init+0x258>)
 8000adc:	2000      	movs	r0, #0
 8000ade:	f7ff ff21 	bl	8000924 <LL_EXTI_SetEXTISource>

  /**/
  LL_EXTI_SetEXTISource(LL_EXTI_EXTI_PORTB, LL_EXTI_EXTI_LINE8);
 8000ae2:	2102      	movs	r1, #2
 8000ae4:	2001      	movs	r0, #1
 8000ae6:	f7ff ff1d 	bl	8000924 <LL_EXTI_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_9;
 8000aea:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000aee:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 8000af0:	2301      	movs	r3, #1
 8000af2:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000af4:	2300      	movs	r3, #0
 8000af6:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING_FALLING;
 8000af8:	2303      	movs	r3, #3
 8000afa:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 8000afc:	f107 0318 	add.w	r3, r7, #24
 8000b00:	4618      	mov	r0, r3
 8000b02:	f006 ff2f 	bl	8007964 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_10;
 8000b06:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b0a:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 8000b0c:	2301      	movs	r3, #1
 8000b0e:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000b10:	2300      	movs	r3, #0
 8000b12:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8000b14:	2301      	movs	r3, #1
 8000b16:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 8000b18:	f107 0318 	add.w	r3, r7, #24
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f006 ff21 	bl	8007964 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_8;
 8000b22:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b26:	61bb      	str	r3, [r7, #24]
  EXTI_InitStruct.LineCommand = ENABLE;
 8000b28:	2301      	movs	r3, #1
 8000b2a:	773b      	strb	r3, [r7, #28]
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	777b      	strb	r3, [r7, #29]
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8000b30:	2302      	movs	r3, #2
 8000b32:	77bb      	strb	r3, [r7, #30]
  LL_EXTI_Init(&EXTI_InitStruct);
 8000b34:	f107 0318 	add.w	r3, r7, #24
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f006 ff13 	bl	8007964 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(VUSB_DETECT_GPIO_Port, VUSB_DETECT_Pin, LL_GPIO_PULL_NO);
 8000b3e:	2200      	movs	r2, #0
 8000b40:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b44:	482c      	ldr	r0, [pc, #176]	@ (8000bf8 <MX_GPIO_Init+0x24c>)
 8000b46:	f7ff fea1 	bl	800088c <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(IOEXP_INT_GPIO_Port, IOEXP_INT_Pin, LL_GPIO_PULL_NO);
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000b50:	4829      	ldr	r0, [pc, #164]	@ (8000bf8 <MX_GPIO_Init+0x24c>)
 8000b52:	f7ff fe9b 	bl	800088c <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(ADIN_INT_GPIO_Port, ADIN_INT_Pin, LL_GPIO_PULL_NO);
 8000b56:	2200      	movs	r2, #0
 8000b58:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000b5c:	4827      	ldr	r0, [pc, #156]	@ (8000bfc <MX_GPIO_Init+0x250>)
 8000b5e:	f7ff fe95 	bl	800088c <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(VUSB_DETECT_GPIO_Port, VUSB_DETECT_Pin, LL_GPIO_MODE_INPUT);
 8000b62:	2200      	movs	r2, #0
 8000b64:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b68:	4823      	ldr	r0, [pc, #140]	@ (8000bf8 <MX_GPIO_Init+0x24c>)
 8000b6a:	f7ff fe52 	bl	8000812 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(IOEXP_INT_GPIO_Port, IOEXP_INT_Pin, LL_GPIO_MODE_INPUT);
 8000b6e:	2200      	movs	r2, #0
 8000b70:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000b74:	4820      	ldr	r0, [pc, #128]	@ (8000bf8 <MX_GPIO_Init+0x24c>)
 8000b76:	f7ff fe4c 	bl	8000812 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(ADIN_INT_GPIO_Port, ADIN_INT_Pin, LL_GPIO_MODE_INPUT);
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000b80:	481e      	ldr	r0, [pc, #120]	@ (8000bfc <MX_GPIO_Init+0x250>)
 8000b82:	f7ff fe46 	bl	8000812 <LL_GPIO_SetPinMode>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI8_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),6, 0));
 8000b86:	f7ff fdbb 	bl	8000700 <__NVIC_GetPriorityGrouping>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	2106      	movs	r1, #6
 8000b90:	4618      	mov	r0, r3
 8000b92:	f7ff fe0b 	bl	80007ac <NVIC_EncodePriority>
 8000b96:	4603      	mov	r3, r0
 8000b98:	4619      	mov	r1, r3
 8000b9a:	2013      	movs	r0, #19
 8000b9c:	f7ff fddc 	bl	8000758 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI8_IRQn);
 8000ba0:	2013      	movs	r0, #19
 8000ba2:	f7ff fdbb 	bl	800071c <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI9_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),6, 0));
 8000ba6:	f7ff fdab 	bl	8000700 <__NVIC_GetPriorityGrouping>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2200      	movs	r2, #0
 8000bae:	2106      	movs	r1, #6
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f7ff fdfb 	bl	80007ac <NVIC_EncodePriority>
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	4619      	mov	r1, r3
 8000bba:	2014      	movs	r0, #20
 8000bbc:	f7ff fdcc 	bl	8000758 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI9_IRQn);
 8000bc0:	2014      	movs	r0, #20
 8000bc2:	f7ff fdab 	bl	800071c <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI10_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),6, 0));
 8000bc6:	f7ff fd9b 	bl	8000700 <__NVIC_GetPriorityGrouping>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2200      	movs	r2, #0
 8000bce:	2106      	movs	r1, #6
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f7ff fdeb 	bl	80007ac <NVIC_EncodePriority>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	4619      	mov	r1, r3
 8000bda:	2015      	movs	r0, #21
 8000bdc:	f7ff fdbc 	bl	8000758 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI10_IRQn);
 8000be0:	2015      	movs	r0, #21
 8000be2:	f7ff fd9b 	bl	800071c <__NVIC_EnableIRQ>

}
 8000be6:	bf00      	nop
 8000be8:	3720      	adds	r7, #32
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	42020800 	.word	0x42020800
 8000bf4:	42021c00 	.word	0x42021c00
 8000bf8:	42020000 	.word	0x42020000
 8000bfc:	42020400 	.word	0x42020400
 8000c00:	00080002 	.word	0x00080002
 8000c04:	00100002 	.word	0x00100002

08000c08 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c0c:	4b1b      	ldr	r3, [pc, #108]	@ (8000c7c <MX_I2C1_Init+0x74>)
 8000c0e:	4a1c      	ldr	r2, [pc, #112]	@ (8000c80 <MX_I2C1_Init+0x78>)
 8000c10:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x30909DEC;
 8000c12:	4b1a      	ldr	r3, [pc, #104]	@ (8000c7c <MX_I2C1_Init+0x74>)
 8000c14:	4a1b      	ldr	r2, [pc, #108]	@ (8000c84 <MX_I2C1_Init+0x7c>)
 8000c16:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000c18:	4b18      	ldr	r3, [pc, #96]	@ (8000c7c <MX_I2C1_Init+0x74>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c1e:	4b17      	ldr	r3, [pc, #92]	@ (8000c7c <MX_I2C1_Init+0x74>)
 8000c20:	2201      	movs	r2, #1
 8000c22:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c24:	4b15      	ldr	r3, [pc, #84]	@ (8000c7c <MX_I2C1_Init+0x74>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000c2a:	4b14      	ldr	r3, [pc, #80]	@ (8000c7c <MX_I2C1_Init+0x74>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c30:	4b12      	ldr	r3, [pc, #72]	@ (8000c7c <MX_I2C1_Init+0x74>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c36:	4b11      	ldr	r3, [pc, #68]	@ (8000c7c <MX_I2C1_Init+0x74>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c3c:	4b0f      	ldr	r3, [pc, #60]	@ (8000c7c <MX_I2C1_Init+0x74>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c42:	480e      	ldr	r0, [pc, #56]	@ (8000c7c <MX_I2C1_Init+0x74>)
 8000c44:	f003 f844 	bl	8003cd0 <HAL_I2C_Init>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d001      	beq.n	8000c52 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000c4e:	f000 fa67 	bl	8001120 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c52:	2100      	movs	r1, #0
 8000c54:	4809      	ldr	r0, [pc, #36]	@ (8000c7c <MX_I2C1_Init+0x74>)
 8000c56:	f003 f8d6 	bl	8003e06 <HAL_I2CEx_ConfigAnalogFilter>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d001      	beq.n	8000c64 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000c60:	f000 fa5e 	bl	8001120 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000c64:	2100      	movs	r1, #0
 8000c66:	4805      	ldr	r0, [pc, #20]	@ (8000c7c <MX_I2C1_Init+0x74>)
 8000c68:	f003 f918 	bl	8003e9c <HAL_I2CEx_ConfigDigitalFilter>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d001      	beq.n	8000c76 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000c72:	f000 fa55 	bl	8001120 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c76:	bf00      	nop
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	200000b4 	.word	0x200000b4
 8000c80:	40005400 	.word	0x40005400
 8000c84:	30909dec 	.word	0x30909dec

08000c88 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b0ba      	sub	sp, #232	@ 0xe8
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c90:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000c94:	2200      	movs	r2, #0
 8000c96:	601a      	str	r2, [r3, #0]
 8000c98:	605a      	str	r2, [r3, #4]
 8000c9a:	609a      	str	r2, [r3, #8]
 8000c9c:	60da      	str	r2, [r3, #12]
 8000c9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ca0:	f107 0310 	add.w	r3, r7, #16
 8000ca4:	22c0      	movs	r2, #192	@ 0xc0
 8000ca6:	2100      	movs	r1, #0
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f008 fab2 	bl	8009212 <memset>
  if(i2cHandle->Instance==I2C1)
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	4a26      	ldr	r2, [pc, #152]	@ (8000d4c <HAL_I2C_MspInit+0xc4>)
 8000cb4:	4293      	cmp	r3, r2
 8000cb6:	d144      	bne.n	8000d42 <HAL_I2C_MspInit+0xba>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000cb8:	f04f 0240 	mov.w	r2, #64	@ 0x40
 8000cbc:	f04f 0300 	mov.w	r3, #0
 8000cc0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cc8:	f107 0310 	add.w	r3, r7, #16
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f004 fe65 	bl	800599c <HAL_RCCEx_PeriphCLKConfig>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d001      	beq.n	8000cdc <HAL_I2C_MspInit+0x54>
    {
      Error_Handler();
 8000cd8:	f000 fa22 	bl	8001120 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cdc:	4b1c      	ldr	r3, [pc, #112]	@ (8000d50 <HAL_I2C_MspInit+0xc8>)
 8000cde:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000ce2:	4a1b      	ldr	r2, [pc, #108]	@ (8000d50 <HAL_I2C_MspInit+0xc8>)
 8000ce4:	f043 0302 	orr.w	r3, r3, #2
 8000ce8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8000cec:	4b18      	ldr	r3, [pc, #96]	@ (8000d50 <HAL_I2C_MspInit+0xc8>)
 8000cee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8000cf2:	f003 0302 	and.w	r3, r3, #2
 8000cf6:	60fb      	str	r3, [r7, #12]
 8000cf8:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000cfa:	23c0      	movs	r3, #192	@ 0xc0
 8000cfc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d00:	2312      	movs	r3, #18
 8000d02:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d06:	2300      	movs	r3, #0
 8000d08:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d12:	2304      	movs	r3, #4
 8000d14:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d18:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	480d      	ldr	r0, [pc, #52]	@ (8000d54 <HAL_I2C_MspInit+0xcc>)
 8000d20:	f002 fdfe 	bl	8003920 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d24:	4b0a      	ldr	r3, [pc, #40]	@ (8000d50 <HAL_I2C_MspInit+0xc8>)
 8000d26:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000d2a:	4a09      	ldr	r2, [pc, #36]	@ (8000d50 <HAL_I2C_MspInit+0xc8>)
 8000d2c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000d30:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8000d34:	4b06      	ldr	r3, [pc, #24]	@ (8000d50 <HAL_I2C_MspInit+0xc8>)
 8000d36:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000d3a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000d3e:	60bb      	str	r3, [r7, #8]
 8000d40:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000d42:	bf00      	nop
 8000d44:	37e8      	adds	r7, #232	@ 0xe8
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	40005400 	.word	0x40005400
 8000d50:	46020c00 	.word	0x46020c00
 8000d54:	42020400 	.word	0x42020400

08000d58 <MX_ICACHE_Init>:

/* USER CODE END 0 */

/* ICACHE init function */
void MX_ICACHE_Init(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8000d5c:	2000      	movs	r0, #0
 8000d5e:	f003 f8e9 	bl	8003f34 <HAL_ICACHE_ConfigAssociativityMode>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d001      	beq.n	8000d6c <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8000d68:	f000 f9da 	bl	8001120 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8000d6c:	f003 f902 	bl	8003f74 <HAL_ICACHE_Enable>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d001      	beq.n	8000d7a <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 8000d76:	f000 f9d3 	bl	8001120 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 8000d7a:	bf00      	nop
 8000d7c:	bd80      	pop	{r7, pc}
	...

08000d80 <__NVIC_GetPriorityGrouping>:
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d84:	4b04      	ldr	r3, [pc, #16]	@ (8000d98 <__NVIC_GetPriorityGrouping+0x18>)
 8000d86:	68db      	ldr	r3, [r3, #12]
 8000d88:	0a1b      	lsrs	r3, r3, #8
 8000d8a:	f003 0307 	and.w	r3, r3, #7
}
 8000d8e:	4618      	mov	r0, r3
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr
 8000d98:	e000ed00 	.word	0xe000ed00

08000d9c <__NVIC_EnableIRQ>:
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b083      	sub	sp, #12
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	4603      	mov	r3, r0
 8000da4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000da6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	db0b      	blt.n	8000dc6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dae:	79fb      	ldrb	r3, [r7, #7]
 8000db0:	f003 021f 	and.w	r2, r3, #31
 8000db4:	4907      	ldr	r1, [pc, #28]	@ (8000dd4 <__NVIC_EnableIRQ+0x38>)
 8000db6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dba:	095b      	lsrs	r3, r3, #5
 8000dbc:	2001      	movs	r0, #1
 8000dbe:	fa00 f202 	lsl.w	r2, r0, r2
 8000dc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000dc6:	bf00      	nop
 8000dc8:	370c      	adds	r7, #12
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop
 8000dd4:	e000e100 	.word	0xe000e100

08000dd8 <__NVIC_SetPriority>:
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b083      	sub	sp, #12
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	4603      	mov	r3, r0
 8000de0:	6039      	str	r1, [r7, #0]
 8000de2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000de4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	db0a      	blt.n	8000e02 <__NVIC_SetPriority+0x2a>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	b2da      	uxtb	r2, r3
 8000df0:	490c      	ldr	r1, [pc, #48]	@ (8000e24 <__NVIC_SetPriority+0x4c>)
 8000df2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df6:	0112      	lsls	r2, r2, #4
 8000df8:	b2d2      	uxtb	r2, r2
 8000dfa:	440b      	add	r3, r1
 8000dfc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8000e00:	e00a      	b.n	8000e18 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	b2da      	uxtb	r2, r3
 8000e06:	4908      	ldr	r1, [pc, #32]	@ (8000e28 <__NVIC_SetPriority+0x50>)
 8000e08:	79fb      	ldrb	r3, [r7, #7]
 8000e0a:	f003 030f 	and.w	r3, r3, #15
 8000e0e:	3b04      	subs	r3, #4
 8000e10:	0112      	lsls	r2, r2, #4
 8000e12:	b2d2      	uxtb	r2, r2
 8000e14:	440b      	add	r3, r1
 8000e16:	761a      	strb	r2, [r3, #24]
}
 8000e18:	bf00      	nop
 8000e1a:	370c      	adds	r7, #12
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e22:	4770      	bx	lr
 8000e24:	e000e100 	.word	0xe000e100
 8000e28:	e000ed00 	.word	0xe000ed00

08000e2c <NVIC_EncodePriority>:
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b089      	sub	sp, #36	@ 0x24
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	60f8      	str	r0, [r7, #12]
 8000e34:	60b9      	str	r1, [r7, #8]
 8000e36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	f003 0307 	and.w	r3, r3, #7
 8000e3e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e40:	69fb      	ldr	r3, [r7, #28]
 8000e42:	f1c3 0307 	rsb	r3, r3, #7
 8000e46:	2b04      	cmp	r3, #4
 8000e48:	bf28      	it	cs
 8000e4a:	2304      	movcs	r3, #4
 8000e4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e4e:	69fb      	ldr	r3, [r7, #28]
 8000e50:	3304      	adds	r3, #4
 8000e52:	2b06      	cmp	r3, #6
 8000e54:	d902      	bls.n	8000e5c <NVIC_EncodePriority+0x30>
 8000e56:	69fb      	ldr	r3, [r7, #28]
 8000e58:	3b03      	subs	r3, #3
 8000e5a:	e000      	b.n	8000e5e <NVIC_EncodePriority+0x32>
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e60:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000e64:	69bb      	ldr	r3, [r7, #24]
 8000e66:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6a:	43da      	mvns	r2, r3
 8000e6c:	68bb      	ldr	r3, [r7, #8]
 8000e6e:	401a      	ands	r2, r3
 8000e70:	697b      	ldr	r3, [r7, #20]
 8000e72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e74:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000e78:	697b      	ldr	r3, [r7, #20]
 8000e7a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e7e:	43d9      	mvns	r1, r3
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e84:	4313      	orrs	r3, r2
}
 8000e86:	4618      	mov	r0, r3
 8000e88:	3724      	adds	r7, #36	@ 0x24
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr

08000e92 <LL_IWDG_Enable>:
  * @rmtoll KR           KEY           LL_IWDG_Enable
  * @param  IWDGx IWDG Instance
  * @retval None
  */
__STATIC_INLINE void LL_IWDG_Enable(IWDG_TypeDef *IWDGx)
{
 8000e92:	b480      	push	{r7}
 8000e94:	b083      	sub	sp, #12
 8000e96:	af00      	add	r7, sp, #0
 8000e98:	6078      	str	r0, [r7, #4]
  WRITE_REG(IWDGx->KR, LL_IWDG_KEY_ENABLE);
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	f64c 42cc 	movw	r2, #52428	@ 0xcccc
 8000ea0:	601a      	str	r2, [r3, #0]
}
 8000ea2:	bf00      	nop
 8000ea4:	370c      	adds	r7, #12
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr

08000eae <LL_IWDG_ReloadCounter>:
  * @rmtoll KR           KEY           LL_IWDG_ReloadCounter
  * @param  IWDGx IWDG Instance
  * @retval None
  */
__STATIC_INLINE void LL_IWDG_ReloadCounter(IWDG_TypeDef *IWDGx)
{
 8000eae:	b480      	push	{r7}
 8000eb0:	b083      	sub	sp, #12
 8000eb2:	af00      	add	r7, sp, #0
 8000eb4:	6078      	str	r0, [r7, #4]
  WRITE_REG(IWDGx->KR, LL_IWDG_KEY_RELOAD);
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8000ebc:	601a      	str	r2, [r3, #0]
}
 8000ebe:	bf00      	nop
 8000ec0:	370c      	adds	r7, #12
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr

08000eca <LL_IWDG_EnableWriteAccess>:
  * @rmtoll KR           KEY           LL_IWDG_EnableWriteAccess
  * @param  IWDGx IWDG Instance
  * @retval None
  */
__STATIC_INLINE void LL_IWDG_EnableWriteAccess(IWDG_TypeDef *IWDGx)
{
 8000eca:	b480      	push	{r7}
 8000ecc:	b083      	sub	sp, #12
 8000ece:	af00      	add	r7, sp, #0
 8000ed0:	6078      	str	r0, [r7, #4]
  WRITE_REG(IWDGx->KR, LL_IWDG_KEY_WR_ACCESS_ENABLE);
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	f245 5255 	movw	r2, #21845	@ 0x5555
 8000ed8:	601a      	str	r2, [r3, #0]
}
 8000eda:	bf00      	nop
 8000edc:	370c      	adds	r7, #12
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr

08000ee6 <LL_IWDG_SetPrescaler>:
  *         @arg @ref LL_IWDG_PRESCALER_512
  *         @arg @ref LL_IWDG_PRESCALER_1024
  * @retval None
  */
__STATIC_INLINE void LL_IWDG_SetPrescaler(IWDG_TypeDef *IWDGx, uint32_t Prescaler)
{
 8000ee6:	b480      	push	{r7}
 8000ee8:	b083      	sub	sp, #12
 8000eea:	af00      	add	r7, sp, #0
 8000eec:	6078      	str	r0, [r7, #4]
 8000eee:	6039      	str	r1, [r7, #0]
  WRITE_REG(IWDGx->PR, IWDG_PR_PR & Prescaler);
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	f003 020f 	and.w	r2, r3, #15
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	605a      	str	r2, [r3, #4]
}
 8000efa:	bf00      	nop
 8000efc:	370c      	adds	r7, #12
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr

08000f06 <LL_IWDG_SetReloadCounter>:
  * @param  IWDGx IWDG Instance
  * @param  Counter Value between Min_Data=0 and Max_Data=0x0FFF
  * @retval None
  */
__STATIC_INLINE void LL_IWDG_SetReloadCounter(IWDG_TypeDef *IWDGx, uint32_t Counter)
{
 8000f06:	b480      	push	{r7}
 8000f08:	b083      	sub	sp, #12
 8000f0a:	af00      	add	r7, sp, #0
 8000f0c:	6078      	str	r0, [r7, #4]
 8000f0e:	6039      	str	r1, [r7, #0]
  WRITE_REG(IWDGx->RLR, IWDG_RLR_RL & Counter);
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	f3c3 020b 	ubfx	r2, r3, #0, #12
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	609a      	str	r2, [r3, #8]
}
 8000f1a:	bf00      	nop
 8000f1c:	370c      	adds	r7, #12
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr

08000f26 <LL_IWDG_IsReady>:
  *         SR           EWU           LL_IWDG_IsReady
  * @param  IWDGx IWDG Instance
  * @retval State of bits (1 or 0).
  */
__STATIC_INLINE uint32_t LL_IWDG_IsReady(const IWDG_TypeDef *IWDGx)
{
 8000f26:	b480      	push	{r7}
 8000f28:	b083      	sub	sp, #12
 8000f2a:	af00      	add	r7, sp, #0
 8000f2c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(IWDGx->SR, IWDG_SR_PVU | IWDG_SR_RVU | IWDG_SR_WVU | IWDG_SR_EWU) == 0U) ? 1UL : 0UL);
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	68db      	ldr	r3, [r3, #12]
 8000f32:	f003 030f 	and.w	r3, r3, #15
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d101      	bne.n	8000f3e <LL_IWDG_IsReady+0x18>
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	e000      	b.n	8000f40 <LL_IWDG_IsReady+0x1a>
 8000f3e:	2300      	movs	r3, #0
}
 8000f40:	4618      	mov	r0, r3
 8000f42:	370c      	adds	r7, #12
 8000f44:	46bd      	mov	sp, r7
 8000f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4a:	4770      	bx	lr

08000f4c <MX_IWDG_Init>:

/* USER CODE END 0 */

/* IWDG init function */
void MX_IWDG_Init(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN IWDG_Init 0 */

  /* USER CODE END IWDG_Init 0 */

  /* IWDG interrupt Init */
  NVIC_SetPriority(IWDG_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000f50:	f7ff ff16 	bl	8000d80 <__NVIC_GetPriorityGrouping>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2200      	movs	r2, #0
 8000f58:	2100      	movs	r1, #0
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f7ff ff66 	bl	8000e2c <NVIC_EncodePriority>
 8000f60:	4603      	mov	r3, r0
 8000f62:	4619      	mov	r1, r3
 8000f64:	201b      	movs	r0, #27
 8000f66:	f7ff ff37 	bl	8000dd8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(IWDG_IRQn);
 8000f6a:	201b      	movs	r0, #27
 8000f6c:	f7ff ff16 	bl	8000d9c <__NVIC_EnableIRQ>

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  LL_IWDG_Enable(IWDG);
 8000f70:	480d      	ldr	r0, [pc, #52]	@ (8000fa8 <MX_IWDG_Init+0x5c>)
 8000f72:	f7ff ff8e 	bl	8000e92 <LL_IWDG_Enable>
  LL_IWDG_EnableWriteAccess(IWDG);
 8000f76:	480c      	ldr	r0, [pc, #48]	@ (8000fa8 <MX_IWDG_Init+0x5c>)
 8000f78:	f7ff ffa7 	bl	8000eca <LL_IWDG_EnableWriteAccess>
  LL_IWDG_SetPrescaler(IWDG, LL_IWDG_PRESCALER_32);
 8000f7c:	2103      	movs	r1, #3
 8000f7e:	480a      	ldr	r0, [pc, #40]	@ (8000fa8 <MX_IWDG_Init+0x5c>)
 8000f80:	f7ff ffb1 	bl	8000ee6 <LL_IWDG_SetPrescaler>
  LL_IWDG_SetReloadCounter(IWDG, 4095);
 8000f84:	f640 71ff 	movw	r1, #4095	@ 0xfff
 8000f88:	4807      	ldr	r0, [pc, #28]	@ (8000fa8 <MX_IWDG_Init+0x5c>)
 8000f8a:	f7ff ffbc 	bl	8000f06 <LL_IWDG_SetReloadCounter>
  while (LL_IWDG_IsReady(IWDG) != 1)
 8000f8e:	bf00      	nop
 8000f90:	4805      	ldr	r0, [pc, #20]	@ (8000fa8 <MX_IWDG_Init+0x5c>)
 8000f92:	f7ff ffc8 	bl	8000f26 <LL_IWDG_IsReady>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b01      	cmp	r3, #1
 8000f9a:	d1f9      	bne.n	8000f90 <MX_IWDG_Init+0x44>
  {
  }

  LL_IWDG_ReloadCounter(IWDG);
 8000f9c:	4802      	ldr	r0, [pc, #8]	@ (8000fa8 <MX_IWDG_Init+0x5c>)
 8000f9e:	f7ff ff86 	bl	8000eae <LL_IWDG_ReloadCounter>
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8000fa2:	bf00      	nop
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	40003000 	.word	0x40003000

08000fac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fb0:	f001 f9d0 	bl	8002354 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fb4:	f000 f81c 	bl	8000ff0 <SystemClock_Config>

  /* Configure the System Power */
  SystemPower_Config();
 8000fb8:	f000 f892 	bl	80010e0 <SystemPower_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fbc:	f7ff fcf6 	bl	80009ac <MX_GPIO_Init>
  MX_GPDMA1_Init();
 8000fc0:	f7ff fb66 	bl	8000690 <MX_GPDMA1_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000fc4:	f001 f8de 	bl	8002184 <MX_USB_OTG_FS_PCD_Init>
  MX_LPUART1_UART_Init();
 8000fc8:	f000 ffbc 	bl	8001f44 <MX_LPUART1_UART_Init>
  MX_I2C1_Init();
 8000fcc:	f7ff fe1c 	bl	8000c08 <MX_I2C1_Init>
  MX_SPI2_Init();
 8000fd0:	f000 f98a 	bl	80012e8 <MX_SPI2_Init>
  MX_SPI3_Init();
 8000fd4:	f000 f9f8 	bl	80013c8 <MX_SPI3_Init>
  MX_ICACHE_Init();
 8000fd8:	f7ff febe 	bl	8000d58 <MX_ICACHE_Init>
  MX_IWDG_Init();
 8000fdc:	f7ff ffb6 	bl	8000f4c <MX_IWDG_Init>
  MX_RTC_Init();
 8000fe0:	f000 f934 	bl	800124c <MX_RTC_Init>
  MX_USART3_UART_Init();
 8000fe4:	f001 f83c 	bl	8002060 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 8000fe8:	f7ff fad2 	bl	8000590 <MX_ADC1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000fec:	bf00      	nop
 8000fee:	e7fd      	b.n	8000fec <main+0x40>

08000ff0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b09e      	sub	sp, #120	@ 0x78
 8000ff4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ff6:	f107 0318 	add.w	r3, r7, #24
 8000ffa:	2260      	movs	r2, #96	@ 0x60
 8000ffc:	2100      	movs	r1, #0
 8000ffe:	4618      	mov	r0, r3
 8001000:	f008 f907 	bl	8009212 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001004:	463b      	mov	r3, r7
 8001006:	2200      	movs	r2, #0
 8001008:	601a      	str	r2, [r3, #0]
 800100a:	605a      	str	r2, [r3, #4]
 800100c:	609a      	str	r2, [r3, #8]
 800100e:	60da      	str	r2, [r3, #12]
 8001010:	611a      	str	r2, [r3, #16]
 8001012:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001014:	f44f 3040 	mov.w	r0, #196608	@ 0x30000
 8001018:	f003 f908 	bl	800422c <HAL_PWREx_ControlVoltageScaling>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d001      	beq.n	8001026 <SystemClock_Config+0x36>
  {
    Error_Handler();
 8001022:	f000 f87d 	bl	8001120 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001026:	f003 f8f1 	bl	800420c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_HIGH);
 800102a:	4b2c      	ldr	r3, [pc, #176]	@ (80010dc <SystemClock_Config+0xec>)
 800102c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001030:	4a2a      	ldr	r2, [pc, #168]	@ (80010dc <SystemClock_Config+0xec>)
 8001032:	f043 0318 	orr.w	r3, r3, #24
 8001036:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 800103a:	233e      	movs	r3, #62	@ 0x3e
 800103c:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_LSE
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800103e:	2381      	movs	r3, #129	@ 0x81
 8001040:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001042:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001046:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001048:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800104c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800104e:	2310      	movs	r3, #16
 8001050:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001052:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8001056:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001058:	2301      	movs	r3, #1
 800105a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800105c:	2310      	movs	r3, #16
 800105e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_0;
 8001060:	2300      	movs	r3, #0
 8001062:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.LSIDiv = RCC_LSI_DIV1;
 8001064:	2300      	movs	r3, #0
 8001066:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001068:	2302      	movs	r3, #2
 800106a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800106c:	2301      	movs	r3, #1
 800106e:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV4;
 8001070:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001074:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLM = 3;
 8001076:	2303      	movs	r3, #3
 8001078:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 10;
 800107a:	230a      	movs	r3, #10
 800107c:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 800107e:	2302      	movs	r3, #2
 8001080:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001082:	2302      	movs	r3, #2
 8001084:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLR = 1;
 8001086:	2301      	movs	r3, #1
 8001088:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 800108a:	230c      	movs	r3, #12
 800108c:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800108e:	2300      	movs	r3, #0
 8001090:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001092:	f107 0318 	add.w	r3, r7, #24
 8001096:	4618      	mov	r0, r3
 8001098:	f003 f9c4 	bl	8004424 <HAL_RCC_OscConfig>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80010a2:	f000 f83d 	bl	8001120 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010a6:	231f      	movs	r3, #31
 80010a8:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010aa:	2303      	movs	r3, #3
 80010ac:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010ae:	2300      	movs	r3, #0
 80010b0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010b2:	2300      	movs	r3, #0
 80010b4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010b6:	2300      	movs	r3, #0
 80010b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 80010ba:	2300      	movs	r3, #0
 80010bc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80010be:	463b      	mov	r3, r7
 80010c0:	2104      	movs	r1, #4
 80010c2:	4618      	mov	r0, r3
 80010c4:	f004 f88a 	bl	80051dc <HAL_RCC_ClockConfig>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <SystemClock_Config+0xe2>
  {
    Error_Handler();
 80010ce:	f000 f827 	bl	8001120 <Error_Handler>
  }
}
 80010d2:	bf00      	nop
 80010d4:	3778      	adds	r7, #120	@ 0x78
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	46020c00 	.word	0x46020c00

080010e0 <SystemPower_Config>:
/**
  * @brief Power Configuration
  * @retval None
  */
static void SystemPower_Config(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0

  /*
   * Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
   */
  HAL_PWREx_DisableUCPDDeadBattery();
 80010e4:	f003 f98e 	bl	8004404 <HAL_PWREx_DisableUCPDDeadBattery>

  /*
   * Switch to SMPS regulator instead of LDO
   */
  if (HAL_PWREx_ConfigSupply(PWR_SMPS_SUPPLY) != HAL_OK)
 80010e8:	2002      	movs	r0, #2
 80010ea:	f003 f92b 	bl	8004344 <HAL_PWREx_ConfigSupply>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <SystemPower_Config+0x18>
  {
    Error_Handler();
 80010f4:	f000 f814 	bl	8001120 <Error_Handler>
  }
/* USER CODE BEGIN PWR */
/* USER CODE END PWR */
}
 80010f8:	bf00      	nop
 80010fa:	bd80      	pop	{r7, pc}

080010fc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b082      	sub	sp, #8
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM8) {
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4a04      	ldr	r2, [pc, #16]	@ (800111c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800110a:	4293      	cmp	r3, r2
 800110c:	d101      	bne.n	8001112 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800110e:	f001 f951 	bl	80023b4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001112:	bf00      	nop
 8001114:	3708      	adds	r7, #8
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	40013400 	.word	0x40013400

08001120 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001124:	b672      	cpsid	i
}
 8001126:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001128:	bf00      	nop
 800112a:	e7fd      	b.n	8001128 <Error_Handler+0x8>

0800112c <LL_RCC_EnableRTC>:
  * @brief  Enable RTC
  * @rmtoll BDCR         RTCEN         LL_RCC_EnableRTC
  * @retval None
  */
__STATIC_INLINE void LL_RCC_EnableRTC(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8001130:	4b06      	ldr	r3, [pc, #24]	@ (800114c <LL_RCC_EnableRTC+0x20>)
 8001132:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001136:	4a05      	ldr	r2, [pc, #20]	@ (800114c <LL_RCC_EnableRTC+0x20>)
 8001138:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800113c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
}
 8001140:	bf00      	nop
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop
 800114c:	46020c00 	.word	0x46020c00

08001150 <LL_RTC_SetRtcPrivilege>:
  *         @arg @ref LL_RTC_PRIVILEGE_FEATURE_ALRA
  *         @arg @ref LL_RTC_PRIVILEGE_FEATURE_ALRB
  * @retval None
  */
__STATIC_INLINE void LL_RTC_SetRtcPrivilege(RTC_TypeDef *RTCx, uint32_t rtcPrivilege)
{
 8001150:	b480      	push	{r7}
 8001152:	b083      	sub	sp, #12
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
 8001158:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->PRIVCFGR, RTC_PRIVCFGR_PRIV | RTC_PRIVCFGR_INITPRIV | RTC_PRIVCFGR_CALPRIV | RTC_PRIVCFGR_TSPRIV | \
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	69db      	ldr	r3, [r3, #28]
 800115e:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8001162:	f023 030f 	bic.w	r3, r3, #15
 8001166:	683a      	ldr	r2, [r7, #0]
 8001168:	431a      	orrs	r2, r3
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	61da      	str	r2, [r3, #28]
             RTC_PRIVCFGR_WUTPRIV | RTC_PRIVCFGR_ALRAPRIV | RTC_PRIVCFGR_ALRBPRIV, rtcPrivilege);
}
 800116e:	bf00      	nop
 8001170:	370c      	adds	r7, #12
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr
	...

0800117c <LL_RTC_SetBackupRegisterPrivilege>:
  *         @arg @ref LL_RTC_PRIVILEGE_BKUP_ZONE_2
  *         @arg @ref LL_RTC_PRIVILEGE_BKUP_ZONE_ALL
  * @retval None
  */
__STATIC_INLINE void LL_RTC_SetBackupRegisterPrivilege(const RTC_TypeDef *RTCx, uint32_t bckupRegisterPrivilege)
{
 800117c:	b480      	push	{r7}
 800117e:	b083      	sub	sp, #12
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
 8001184:	6039      	str	r1, [r7, #0]
  UNUSED(RTCx);
  MODIFY_REG(TAMP->PRIVCFGR, (TAMP_PRIVCFGR_BKPWPRIV | TAMP_PRIVCFGR_BKPRWPRIV), bckupRegisterPrivilege);
 8001186:	4b07      	ldr	r3, [pc, #28]	@ (80011a4 <LL_RTC_SetBackupRegisterPrivilege+0x28>)
 8001188:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800118a:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800118e:	4905      	ldr	r1, [pc, #20]	@ (80011a4 <LL_RTC_SetBackupRegisterPrivilege+0x28>)
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	4313      	orrs	r3, r2
 8001194:	624b      	str	r3, [r1, #36]	@ 0x24
}
 8001196:	bf00      	nop
 8001198:	370c      	adds	r7, #12
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr
 80011a2:	bf00      	nop
 80011a4:	46007c00 	.word	0x46007c00

080011a8 <LL_RTC_SetBackupRegProtection>:
  *         @arg @ref LL_RTC_BKP_DR30
  *         @arg @ref LL_RTC_BKP_DR31
  * @retval None
  */
__STATIC_INLINE void LL_RTC_SetBackupRegProtection(const RTC_TypeDef *RTCx, uint32_t startZone2, uint32_t startZone3)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b085      	sub	sp, #20
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	60f8      	str	r0, [r7, #12]
 80011b0:	60b9      	str	r1, [r7, #8]
 80011b2:	607a      	str	r2, [r7, #4]
  UNUSED(RTCx);
  MODIFY_REG(TAMP->SECCFGR, (TAMP_SECCFGR_BKPRWSEC_Msk | TAMP_SECCFGR_BKPWSEC_Msk), (startZone2 << \
 80011b4:	4b08      	ldr	r3, [pc, #32]	@ (80011d8 <LL_RTC_SetBackupRegProtection+0x30>)
 80011b6:	6a1b      	ldr	r3, [r3, #32]
 80011b8:	f003 22ff 	and.w	r2, r3, #4278255360	@ 0xff00ff00
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	0419      	lsls	r1, r3, #16
 80011c0:	68bb      	ldr	r3, [r7, #8]
 80011c2:	430b      	orrs	r3, r1
 80011c4:	4904      	ldr	r1, [pc, #16]	@ (80011d8 <LL_RTC_SetBackupRegProtection+0x30>)
 80011c6:	4313      	orrs	r3, r2
 80011c8:	620b      	str	r3, [r1, #32]
             TAMP_SECCFGR_BKPRWSEC_Pos) | (startZone3 << TAMP_SECCFGR_BKPWSEC_Pos));
}
 80011ca:	bf00      	nop
 80011cc:	3714      	adds	r7, #20
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr
 80011d6:	bf00      	nop
 80011d8:	46007c00 	.word	0x46007c00

080011dc <LL_APB3_GRP1_EnableClock>:
  *         @arg @ref LL_APB3_GRP1_PERIPH_VREF
  *         @arg @ref LL_APB3_GRP1_PERIPH_RTCAPB
  * @retval None
  */
__STATIC_INLINE void LL_APB3_GRP1_EnableClock(uint32_t Periphs)
{
 80011dc:	b480      	push	{r7}
 80011de:	b085      	sub	sp, #20
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB3ENR, Periphs);
 80011e4:	4b0a      	ldr	r3, [pc, #40]	@ (8001210 <LL_APB3_GRP1_EnableClock+0x34>)
 80011e6:	f8d3 20a8 	ldr.w	r2, [r3, #168]	@ 0xa8
 80011ea:	4909      	ldr	r1, [pc, #36]	@ (8001210 <LL_APB3_GRP1_EnableClock+0x34>)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	4313      	orrs	r3, r2
 80011f0:	f8c1 30a8 	str.w	r3, [r1, #168]	@ 0xa8
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 80011f4:	4b06      	ldr	r3, [pc, #24]	@ (8001210 <LL_APB3_GRP1_EnableClock+0x34>)
 80011f6:	f8d3 20a8 	ldr.w	r2, [r3, #168]	@ 0xa8
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	4013      	ands	r3, r2
 80011fe:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001200:	68fb      	ldr	r3, [r7, #12]
}
 8001202:	bf00      	nop
 8001204:	3714      	adds	r7, #20
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr
 800120e:	bf00      	nop
 8001210:	46020c00 	.word	0x46020c00

08001214 <LL_SRDAMR_GRP1_EnableAutonomousClock>:
  *         @arg @ref LL_SRDAMR_GRP1_PERIPH_ADF1
  *         @arg @ref LL_SRDAMR_GRP1_PERIPH_SRAM4
  * @retval None
  */
__STATIC_INLINE void LL_SRDAMR_GRP1_EnableAutonomousClock(uint32_t Periphs)
{
 8001214:	b480      	push	{r7}
 8001216:	b085      	sub	sp, #20
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->SRDAMR, Periphs);
 800121c:	4b0a      	ldr	r3, [pc, #40]	@ (8001248 <LL_SRDAMR_GRP1_EnableAutonomousClock+0x34>)
 800121e:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 8001222:	4909      	ldr	r1, [pc, #36]	@ (8001248 <LL_SRDAMR_GRP1_EnableAutonomousClock+0x34>)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	4313      	orrs	r3, r2
 8001228:	f8c1 30d8 	str.w	r3, [r1, #216]	@ 0xd8
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->SRDAMR, Periphs);
 800122c:	4b06      	ldr	r3, [pc, #24]	@ (8001248 <LL_SRDAMR_GRP1_EnableAutonomousClock+0x34>)
 800122e:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	4013      	ands	r3, r2
 8001236:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001238:	68fb      	ldr	r3, [r7, #12]
}
 800123a:	bf00      	nop
 800123c:	3714      	adds	r7, #20
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr
 8001246:	bf00      	nop
 8001248:	46020c00 	.word	0x46020c00

0800124c <MX_RTC_Init>:

/* USER CODE END 0 */

/* RTC init function */
void MX_RTC_Init(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b0b4      	sub	sp, #208	@ 0xd0
 8001250:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  LL_RTC_InitTypeDef RTC_InitStruct = {0};
 8001252:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 8001256:	2200      	movs	r2, #0
 8001258:	601a      	str	r2, [r3, #0]
 800125a:	605a      	str	r2, [r3, #4]
 800125c:	609a      	str	r2, [r3, #8]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800125e:	463b      	mov	r3, r7
 8001260:	22c0      	movs	r2, #192	@ 0xc0
 8001262:	2100      	movs	r1, #0
 8001264:	4618      	mov	r0, r3
 8001266:	f007 ffd4 	bl	8009212 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800126a:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800126e:	f04f 0300 	mov.w	r3, #0
 8001272:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001276:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800127a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800127e:	463b      	mov	r3, r7
 8001280:	4618      	mov	r0, r3
 8001282:	f004 fb8b 	bl	800599c <HAL_RCCEx_PeriphCLKConfig>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d001      	beq.n	8001290 <MX_RTC_Init+0x44>
  {
    Error_Handler();
 800128c:	f7ff ff48 	bl	8001120 <Error_Handler>
  }

  /* Peripheral clock enable */
  LL_RCC_EnableRTC();
 8001290:	f7ff ff4c 	bl	800112c <LL_RCC_EnableRTC>
  LL_APB3_GRP1_EnableClock(LL_APB3_GRP1_PERIPH_RTCAPB);
 8001294:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 8001298:	f7ff ffa0 	bl	80011dc <LL_APB3_GRP1_EnableClock>
  LL_SRDAMR_GRP1_EnableAutonomousClock(LL_SRDAMR_GRP1_PERIPH_RTCAPBAMEN);
 800129c:	f44f 1000 	mov.w	r0, #2097152	@ 0x200000
 80012a0:	f7ff ffb8 	bl	8001214 <LL_SRDAMR_GRP1_EnableAutonomousClock>

  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  RTC_InitStruct.HourFormat = LL_RTC_HOURFORMAT_24HOUR;
 80012a4:	2300      	movs	r3, #0
 80012a6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  RTC_InitStruct.AsynchPrescaler = 127;
 80012aa:	237f      	movs	r3, #127	@ 0x7f
 80012ac:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  RTC_InitStruct.SynchPrescaler = 255;
 80012b0:	23ff      	movs	r3, #255	@ 0xff
 80012b2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  LL_RTC_Init(RTC, &RTC_InitStruct);
 80012b6:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 80012ba:	4619      	mov	r1, r3
 80012bc:	4809      	ldr	r0, [pc, #36]	@ (80012e4 <MX_RTC_Init+0x98>)
 80012be:	f007 fb6f 	bl	80089a0 <LL_RTC_Init>
  LL_RTC_SetBackupRegisterPrivilege(RTC, LL_RTC_PRIVILEGE_BKUP_ZONE_NONE);
 80012c2:	2100      	movs	r1, #0
 80012c4:	4807      	ldr	r0, [pc, #28]	@ (80012e4 <MX_RTC_Init+0x98>)
 80012c6:	f7ff ff59 	bl	800117c <LL_RTC_SetBackupRegisterPrivilege>
  LL_RTC_SetBackupRegProtection(RTC, LL_RTC_BKP_DR0, LL_RTC_BKP_DR0);
 80012ca:	2200      	movs	r2, #0
 80012cc:	2100      	movs	r1, #0
 80012ce:	4805      	ldr	r0, [pc, #20]	@ (80012e4 <MX_RTC_Init+0x98>)
 80012d0:	f7ff ff6a 	bl	80011a8 <LL_RTC_SetBackupRegProtection>
  LL_RTC_SetRtcPrivilege(RTC, LL_RTC_PRIVILEGE_FULL_NO);
 80012d4:	2100      	movs	r1, #0
 80012d6:	4803      	ldr	r0, [pc, #12]	@ (80012e4 <MX_RTC_Init+0x98>)
 80012d8:	f7ff ff3a 	bl	8001150 <LL_RTC_SetRtcPrivilege>
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80012dc:	bf00      	nop
 80012de:	37d0      	adds	r7, #208	@ 0xd0
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	46007800 	.word	0x46007800

080012e8 <MX_SPI2_Init>:
DMA_HandleTypeDef handle_GPDMA1_Channel13;
DMA_HandleTypeDef handle_GPDMA1_Channel12;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b084      	sub	sp, #16
 80012ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 0 */

  /* USER CODE END SPI2_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 80012ee:	1d3b      	adds	r3, r7, #4
 80012f0:	2200      	movs	r2, #0
 80012f2:	601a      	str	r2, [r3, #0]
 80012f4:	605a      	str	r2, [r3, #4]
 80012f6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80012f8:	4b31      	ldr	r3, [pc, #196]	@ (80013c0 <MX_SPI2_Init+0xd8>)
 80012fa:	4a32      	ldr	r2, [pc, #200]	@ (80013c4 <MX_SPI2_Init+0xdc>)
 80012fc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80012fe:	4b30      	ldr	r3, [pc, #192]	@ (80013c0 <MX_SPI2_Init+0xd8>)
 8001300:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8001304:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001306:	4b2e      	ldr	r3, [pc, #184]	@ (80013c0 <MX_SPI2_Init+0xd8>)
 8001308:	2200      	movs	r2, #0
 800130a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800130c:	4b2c      	ldr	r3, [pc, #176]	@ (80013c0 <MX_SPI2_Init+0xd8>)
 800130e:	2207      	movs	r2, #7
 8001310:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001312:	4b2b      	ldr	r3, [pc, #172]	@ (80013c0 <MX_SPI2_Init+0xd8>)
 8001314:	2200      	movs	r2, #0
 8001316:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001318:	4b29      	ldr	r3, [pc, #164]	@ (80013c0 <MX_SPI2_Init+0xd8>)
 800131a:	2200      	movs	r2, #0
 800131c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800131e:	4b28      	ldr	r3, [pc, #160]	@ (80013c0 <MX_SPI2_Init+0xd8>)
 8001320:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001324:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001326:	4b26      	ldr	r3, [pc, #152]	@ (80013c0 <MX_SPI2_Init+0xd8>)
 8001328:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 800132c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800132e:	4b24      	ldr	r3, [pc, #144]	@ (80013c0 <MX_SPI2_Init+0xd8>)
 8001330:	2200      	movs	r2, #0
 8001332:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001334:	4b22      	ldr	r3, [pc, #136]	@ (80013c0 <MX_SPI2_Init+0xd8>)
 8001336:	2200      	movs	r2, #0
 8001338:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800133a:	4b21      	ldr	r3, [pc, #132]	@ (80013c0 <MX_SPI2_Init+0xd8>)
 800133c:	2200      	movs	r2, #0
 800133e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x7;
 8001340:	4b1f      	ldr	r3, [pc, #124]	@ (80013c0 <MX_SPI2_Init+0xd8>)
 8001342:	2207      	movs	r2, #7
 8001344:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001346:	4b1e      	ldr	r3, [pc, #120]	@ (80013c0 <MX_SPI2_Init+0xd8>)
 8001348:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800134c:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800134e:	4b1c      	ldr	r3, [pc, #112]	@ (80013c0 <MX_SPI2_Init+0xd8>)
 8001350:	2200      	movs	r2, #0
 8001352:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001354:	4b1a      	ldr	r3, [pc, #104]	@ (80013c0 <MX_SPI2_Init+0xd8>)
 8001356:	2200      	movs	r2, #0
 8001358:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800135a:	4b19      	ldr	r3, [pc, #100]	@ (80013c0 <MX_SPI2_Init+0xd8>)
 800135c:	2200      	movs	r2, #0
 800135e:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001360:	4b17      	ldr	r3, [pc, #92]	@ (80013c0 <MX_SPI2_Init+0xd8>)
 8001362:	2200      	movs	r2, #0
 8001364:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001366:	4b16      	ldr	r3, [pc, #88]	@ (80013c0 <MX_SPI2_Init+0xd8>)
 8001368:	2200      	movs	r2, #0
 800136a:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800136c:	4b14      	ldr	r3, [pc, #80]	@ (80013c0 <MX_SPI2_Init+0xd8>)
 800136e:	2200      	movs	r2, #0
 8001370:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001372:	4b13      	ldr	r3, [pc, #76]	@ (80013c0 <MX_SPI2_Init+0xd8>)
 8001374:	2200      	movs	r2, #0
 8001376:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi2.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8001378:	4b11      	ldr	r3, [pc, #68]	@ (80013c0 <MX_SPI2_Init+0xd8>)
 800137a:	2200      	movs	r2, #0
 800137c:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi2.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 800137e:	4b10      	ldr	r3, [pc, #64]	@ (80013c0 <MX_SPI2_Init+0xd8>)
 8001380:	2200      	movs	r2, #0
 8001382:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001384:	480e      	ldr	r0, [pc, #56]	@ (80013c0 <MX_SPI2_Init+0xd8>)
 8001386:	f005 f9dd 	bl	8006744 <HAL_SPI_Init>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <MX_SPI2_Init+0xac>
  {
    Error_Handler();
 8001390:	f7ff fec6 	bl	8001120 <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 8001394:	2300      	movs	r3, #0
 8001396:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP1_GPDMA_CH0_TCF_TRG;
 8001398:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 800139c:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 800139e:	2300      	movs	r3, #0
 80013a0:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi2, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 80013a2:	1d3b      	adds	r3, r7, #4
 80013a4:	4619      	mov	r1, r3
 80013a6:	4806      	ldr	r0, [pc, #24]	@ (80013c0 <MX_SPI2_Init+0xd8>)
 80013a8:	f005 fe35 	bl	8007016 <HAL_SPIEx_SetConfigAutonomousMode>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <MX_SPI2_Init+0xce>
  {
    Error_Handler();
 80013b2:	f7ff feb5 	bl	8001120 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80013b6:	bf00      	nop
 80013b8:	3710      	adds	r7, #16
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	20000108 	.word	0x20000108
 80013c4:	40003800 	.word	0x40003800

080013c8 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b084      	sub	sp, #16
 80013cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 0 */

  /* USER CODE END SPI3_Init 0 */

  SPI_AutonomousModeConfTypeDef HAL_SPI_AutonomousMode_Cfg_Struct = {0};
 80013ce:	1d3b      	adds	r3, r7, #4
 80013d0:	2200      	movs	r2, #0
 80013d2:	601a      	str	r2, [r3, #0]
 80013d4:	605a      	str	r2, [r3, #4]
 80013d6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 80013d8:	4b31      	ldr	r3, [pc, #196]	@ (80014a0 <MX_SPI3_Init+0xd8>)
 80013da:	4a32      	ldr	r2, [pc, #200]	@ (80014a4 <MX_SPI3_Init+0xdc>)
 80013dc:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80013de:	4b30      	ldr	r3, [pc, #192]	@ (80014a0 <MX_SPI3_Init+0xd8>)
 80013e0:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 80013e4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80013e6:	4b2e      	ldr	r3, [pc, #184]	@ (80014a0 <MX_SPI3_Init+0xd8>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80013ec:	4b2c      	ldr	r3, [pc, #176]	@ (80014a0 <MX_SPI3_Init+0xd8>)
 80013ee:	2207      	movs	r2, #7
 80013f0:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80013f2:	4b2b      	ldr	r3, [pc, #172]	@ (80014a0 <MX_SPI3_Init+0xd8>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80013f8:	4b29      	ldr	r3, [pc, #164]	@ (80014a0 <MX_SPI3_Init+0xd8>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80013fe:	4b28      	ldr	r3, [pc, #160]	@ (80014a0 <MX_SPI3_Init+0xd8>)
 8001400:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001404:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001406:	4b26      	ldr	r3, [pc, #152]	@ (80014a0 <MX_SPI3_Init+0xd8>)
 8001408:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 800140c:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800140e:	4b24      	ldr	r3, [pc, #144]	@ (80014a0 <MX_SPI3_Init+0xd8>)
 8001410:	2200      	movs	r2, #0
 8001412:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001414:	4b22      	ldr	r3, [pc, #136]	@ (80014a0 <MX_SPI3_Init+0xd8>)
 8001416:	2200      	movs	r2, #0
 8001418:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800141a:	4b21      	ldr	r3, [pc, #132]	@ (80014a0 <MX_SPI3_Init+0xd8>)
 800141c:	2200      	movs	r2, #0
 800141e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 0x7;
 8001420:	4b1f      	ldr	r3, [pc, #124]	@ (80014a0 <MX_SPI3_Init+0xd8>)
 8001422:	2207      	movs	r2, #7
 8001424:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001426:	4b1e      	ldr	r3, [pc, #120]	@ (80014a0 <MX_SPI3_Init+0xd8>)
 8001428:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800142c:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 800142e:	4b1c      	ldr	r3, [pc, #112]	@ (80014a0 <MX_SPI3_Init+0xd8>)
 8001430:	2200      	movs	r2, #0
 8001432:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001434:	4b1a      	ldr	r3, [pc, #104]	@ (80014a0 <MX_SPI3_Init+0xd8>)
 8001436:	2200      	movs	r2, #0
 8001438:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 800143a:	4b19      	ldr	r3, [pc, #100]	@ (80014a0 <MX_SPI3_Init+0xd8>)
 800143c:	2200      	movs	r2, #0
 800143e:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001440:	4b17      	ldr	r3, [pc, #92]	@ (80014a0 <MX_SPI3_Init+0xd8>)
 8001442:	2200      	movs	r2, #0
 8001444:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001446:	4b16      	ldr	r3, [pc, #88]	@ (80014a0 <MX_SPI3_Init+0xd8>)
 8001448:	2200      	movs	r2, #0
 800144a:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800144c:	4b14      	ldr	r3, [pc, #80]	@ (80014a0 <MX_SPI3_Init+0xd8>)
 800144e:	2200      	movs	r2, #0
 8001450:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001452:	4b13      	ldr	r3, [pc, #76]	@ (80014a0 <MX_SPI3_Init+0xd8>)
 8001454:	2200      	movs	r2, #0
 8001456:	659a      	str	r2, [r3, #88]	@ 0x58
  hspi3.Init.ReadyMasterManagement = SPI_RDY_MASTER_MANAGEMENT_INTERNALLY;
 8001458:	4b11      	ldr	r3, [pc, #68]	@ (80014a0 <MX_SPI3_Init+0xd8>)
 800145a:	2200      	movs	r2, #0
 800145c:	65da      	str	r2, [r3, #92]	@ 0x5c
  hspi3.Init.ReadyPolarity = SPI_RDY_POLARITY_HIGH;
 800145e:	4b10      	ldr	r3, [pc, #64]	@ (80014a0 <MX_SPI3_Init+0xd8>)
 8001460:	2200      	movs	r2, #0
 8001462:	661a      	str	r2, [r3, #96]	@ 0x60
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001464:	480e      	ldr	r0, [pc, #56]	@ (80014a0 <MX_SPI3_Init+0xd8>)
 8001466:	f005 f96d 	bl	8006744 <HAL_SPI_Init>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	d001      	beq.n	8001474 <MX_SPI3_Init+0xac>
  {
    Error_Handler();
 8001470:	f7ff fe56 	bl	8001120 <Error_Handler>
  }
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerState = SPI_AUTO_MODE_DISABLE;
 8001474:	2300      	movs	r3, #0
 8001476:	607b      	str	r3, [r7, #4]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerSelection = SPI_GRP2_LPDMA_CH0_TCF_TRG;
 8001478:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800147c:	60bb      	str	r3, [r7, #8]
  HAL_SPI_AutonomousMode_Cfg_Struct.TriggerPolarity = SPI_TRIG_POLARITY_RISING;
 800147e:	2300      	movs	r3, #0
 8001480:	60fb      	str	r3, [r7, #12]
  if (HAL_SPIEx_SetConfigAutonomousMode(&hspi3, &HAL_SPI_AutonomousMode_Cfg_Struct) != HAL_OK)
 8001482:	1d3b      	adds	r3, r7, #4
 8001484:	4619      	mov	r1, r3
 8001486:	4806      	ldr	r0, [pc, #24]	@ (80014a0 <MX_SPI3_Init+0xd8>)
 8001488:	f005 fdc5 	bl	8007016 <HAL_SPIEx_SetConfigAutonomousMode>
 800148c:	4603      	mov	r3, r0
 800148e:	2b00      	cmp	r3, #0
 8001490:	d001      	beq.n	8001496 <MX_SPI3_Init+0xce>
  {
    Error_Handler();
 8001492:	f7ff fe45 	bl	8001120 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001496:	bf00      	nop
 8001498:	3710      	adds	r7, #16
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	200001c4 	.word	0x200001c4
 80014a4:	46002000 	.word	0x46002000

080014a8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b0bc      	sub	sp, #240	@ 0xf0
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b0:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80014b4:	2200      	movs	r2, #0
 80014b6:	601a      	str	r2, [r3, #0]
 80014b8:	605a      	str	r2, [r3, #4]
 80014ba:	609a      	str	r2, [r3, #8]
 80014bc:	60da      	str	r2, [r3, #12]
 80014be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014c0:	f107 0318 	add.w	r3, r7, #24
 80014c4:	22c0      	movs	r2, #192	@ 0xc0
 80014c6:	2100      	movs	r1, #0
 80014c8:	4618      	mov	r0, r3
 80014ca:	f007 fea2 	bl	8009212 <memset>
  if(spiHandle->Instance==SPI2)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4a6d      	ldr	r2, [pc, #436]	@ (8001688 <HAL_SPI_MspInit+0x1e0>)
 80014d4:	4293      	cmp	r3, r2
 80014d6:	f040 80e5 	bne.w	80016a4 <HAL_SPI_MspInit+0x1fc>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 80014da:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80014de:	f04f 0300 	mov.w	r3, #0
 80014e2:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.Spi2ClockSelection = RCC_SPI2CLKSOURCE_SYSCLK;
 80014e6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80014ea:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014ee:	f107 0318 	add.w	r3, r7, #24
 80014f2:	4618      	mov	r0, r3
 80014f4:	f004 fa52 	bl	800599c <HAL_RCCEx_PeriphCLKConfig>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d001      	beq.n	8001502 <HAL_SPI_MspInit+0x5a>
    {
      Error_Handler();
 80014fe:	f7ff fe0f 	bl	8001120 <Error_Handler>
    }

    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001502:	4b62      	ldr	r3, [pc, #392]	@ (800168c <HAL_SPI_MspInit+0x1e4>)
 8001504:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001508:	4a60      	ldr	r2, [pc, #384]	@ (800168c <HAL_SPI_MspInit+0x1e4>)
 800150a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800150e:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8001512:	4b5e      	ldr	r3, [pc, #376]	@ (800168c <HAL_SPI_MspInit+0x1e4>)
 8001514:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8001518:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800151c:	617b      	str	r3, [r7, #20]
 800151e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001520:	4b5a      	ldr	r3, [pc, #360]	@ (800168c <HAL_SPI_MspInit+0x1e4>)
 8001522:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001526:	4a59      	ldr	r2, [pc, #356]	@ (800168c <HAL_SPI_MspInit+0x1e4>)
 8001528:	f043 0302 	orr.w	r3, r3, #2
 800152c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001530:	4b56      	ldr	r3, [pc, #344]	@ (800168c <HAL_SPI_MspInit+0x1e4>)
 8001532:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8001536:	f003 0302 	and.w	r3, r3, #2
 800153a:	613b      	str	r3, [r7, #16]
 800153c:	693b      	ldr	r3, [r7, #16]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800153e:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8001542:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001546:	2302      	movs	r3, #2
 8001548:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154c:	2300      	movs	r3, #0
 800154e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001552:	2300      	movs	r3, #0
 8001554:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001558:	2305      	movs	r3, #5
 800155a:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800155e:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001562:	4619      	mov	r1, r3
 8001564:	484a      	ldr	r0, [pc, #296]	@ (8001690 <HAL_SPI_MspInit+0x1e8>)
 8001566:	f002 f9db 	bl	8003920 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* GPDMA1_REQUEST_SPI2_RX Init */
    handle_GPDMA1_Channel15.Instance = GPDMA1_Channel15;
 800156a:	4b4a      	ldr	r3, [pc, #296]	@ (8001694 <HAL_SPI_MspInit+0x1ec>)
 800156c:	4a4a      	ldr	r2, [pc, #296]	@ (8001698 <HAL_SPI_MspInit+0x1f0>)
 800156e:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel15.Init.Request = GPDMA1_REQUEST_SPI2_RX;
 8001570:	4b48      	ldr	r3, [pc, #288]	@ (8001694 <HAL_SPI_MspInit+0x1ec>)
 8001572:	2208      	movs	r2, #8
 8001574:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel15.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8001576:	4b47      	ldr	r3, [pc, #284]	@ (8001694 <HAL_SPI_MspInit+0x1ec>)
 8001578:	2200      	movs	r2, #0
 800157a:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel15.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800157c:	4b45      	ldr	r3, [pc, #276]	@ (8001694 <HAL_SPI_MspInit+0x1ec>)
 800157e:	2200      	movs	r2, #0
 8001580:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel15.Init.SrcInc = DMA_SINC_FIXED;
 8001582:	4b44      	ldr	r3, [pc, #272]	@ (8001694 <HAL_SPI_MspInit+0x1ec>)
 8001584:	2200      	movs	r2, #0
 8001586:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel15.Init.DestInc = DMA_DINC_INCREMENTED;
 8001588:	4b42      	ldr	r3, [pc, #264]	@ (8001694 <HAL_SPI_MspInit+0x1ec>)
 800158a:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800158e:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel15.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_BYTE;
 8001590:	4b40      	ldr	r3, [pc, #256]	@ (8001694 <HAL_SPI_MspInit+0x1ec>)
 8001592:	2200      	movs	r2, #0
 8001594:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel15.Init.DestDataWidth = DMA_DEST_DATAWIDTH_BYTE;
 8001596:	4b3f      	ldr	r3, [pc, #252]	@ (8001694 <HAL_SPI_MspInit+0x1ec>)
 8001598:	2200      	movs	r2, #0
 800159a:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel15.Init.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 800159c:	4b3d      	ldr	r3, [pc, #244]	@ (8001694 <HAL_SPI_MspInit+0x1ec>)
 800159e:	2200      	movs	r2, #0
 80015a0:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel15.Init.SrcBurstLength = 1;
 80015a2:	4b3c      	ldr	r3, [pc, #240]	@ (8001694 <HAL_SPI_MspInit+0x1ec>)
 80015a4:	2201      	movs	r2, #1
 80015a6:	625a      	str	r2, [r3, #36]	@ 0x24
    handle_GPDMA1_Channel15.Init.DestBurstLength = 1;
 80015a8:	4b3a      	ldr	r3, [pc, #232]	@ (8001694 <HAL_SPI_MspInit+0x1ec>)
 80015aa:	2201      	movs	r2, #1
 80015ac:	629a      	str	r2, [r3, #40]	@ 0x28
    handle_GPDMA1_Channel15.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 80015ae:	4b39      	ldr	r3, [pc, #228]	@ (8001694 <HAL_SPI_MspInit+0x1ec>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	62da      	str	r2, [r3, #44]	@ 0x2c
    handle_GPDMA1_Channel15.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 80015b4:	4b37      	ldr	r3, [pc, #220]	@ (8001694 <HAL_SPI_MspInit+0x1ec>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	631a      	str	r2, [r3, #48]	@ 0x30
    handle_GPDMA1_Channel15.Init.Mode = DMA_NORMAL;
 80015ba:	4b36      	ldr	r3, [pc, #216]	@ (8001694 <HAL_SPI_MspInit+0x1ec>)
 80015bc:	2200      	movs	r2, #0
 80015be:	635a      	str	r2, [r3, #52]	@ 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel15) != HAL_OK)
 80015c0:	4834      	ldr	r0, [pc, #208]	@ (8001694 <HAL_SPI_MspInit+0x1ec>)
 80015c2:	f001 fc3b 	bl	8002e3c <HAL_DMA_Init>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d001      	beq.n	80015d0 <HAL_SPI_MspInit+0x128>
    {
      Error_Handler();
 80015cc:	f7ff fda8 	bl	8001120 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle, hdmarx, handle_GPDMA1_Channel15);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	4a30      	ldr	r2, [pc, #192]	@ (8001694 <HAL_SPI_MspInit+0x1ec>)
 80015d4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 80015d8:	4a2e      	ldr	r2, [pc, #184]	@ (8001694 <HAL_SPI_MspInit+0x1ec>)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel15, DMA_CHANNEL_NPRIV) != HAL_OK)
 80015de:	2110      	movs	r1, #16
 80015e0:	482c      	ldr	r0, [pc, #176]	@ (8001694 <HAL_SPI_MspInit+0x1ec>)
 80015e2:	f001 fee1 	bl	80033a8 <HAL_DMA_ConfigChannelAttributes>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d001      	beq.n	80015f0 <HAL_SPI_MspInit+0x148>
    {
      Error_Handler();
 80015ec:	f7ff fd98 	bl	8001120 <Error_Handler>
    }

    /* GPDMA1_REQUEST_SPI2_TX Init */
    handle_GPDMA1_Channel14.Instance = GPDMA1_Channel14;
 80015f0:	4b2a      	ldr	r3, [pc, #168]	@ (800169c <HAL_SPI_MspInit+0x1f4>)
 80015f2:	4a2b      	ldr	r2, [pc, #172]	@ (80016a0 <HAL_SPI_MspInit+0x1f8>)
 80015f4:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel14.Init.Request = GPDMA1_REQUEST_SPI2_TX;
 80015f6:	4b29      	ldr	r3, [pc, #164]	@ (800169c <HAL_SPI_MspInit+0x1f4>)
 80015f8:	2209      	movs	r2, #9
 80015fa:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel14.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 80015fc:	4b27      	ldr	r3, [pc, #156]	@ (800169c <HAL_SPI_MspInit+0x1f4>)
 80015fe:	2200      	movs	r2, #0
 8001600:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel14.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001602:	4b26      	ldr	r3, [pc, #152]	@ (800169c <HAL_SPI_MspInit+0x1f4>)
 8001604:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001608:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel14.Init.SrcInc = DMA_SINC_INCREMENTED;
 800160a:	4b24      	ldr	r3, [pc, #144]	@ (800169c <HAL_SPI_MspInit+0x1f4>)
 800160c:	2208      	movs	r2, #8
 800160e:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel14.Init.DestInc = DMA_DINC_FIXED;
 8001610:	4b22      	ldr	r3, [pc, #136]	@ (800169c <HAL_SPI_MspInit+0x1f4>)
 8001612:	2200      	movs	r2, #0
 8001614:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel14.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_BYTE;
 8001616:	4b21      	ldr	r3, [pc, #132]	@ (800169c <HAL_SPI_MspInit+0x1f4>)
 8001618:	2200      	movs	r2, #0
 800161a:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel14.Init.DestDataWidth = DMA_DEST_DATAWIDTH_BYTE;
 800161c:	4b1f      	ldr	r3, [pc, #124]	@ (800169c <HAL_SPI_MspInit+0x1f4>)
 800161e:	2200      	movs	r2, #0
 8001620:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel14.Init.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 8001622:	4b1e      	ldr	r3, [pc, #120]	@ (800169c <HAL_SPI_MspInit+0x1f4>)
 8001624:	2200      	movs	r2, #0
 8001626:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel14.Init.SrcBurstLength = 1;
 8001628:	4b1c      	ldr	r3, [pc, #112]	@ (800169c <HAL_SPI_MspInit+0x1f4>)
 800162a:	2201      	movs	r2, #1
 800162c:	625a      	str	r2, [r3, #36]	@ 0x24
    handle_GPDMA1_Channel14.Init.DestBurstLength = 1;
 800162e:	4b1b      	ldr	r3, [pc, #108]	@ (800169c <HAL_SPI_MspInit+0x1f4>)
 8001630:	2201      	movs	r2, #1
 8001632:	629a      	str	r2, [r3, #40]	@ 0x28
    handle_GPDMA1_Channel14.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 8001634:	4b19      	ldr	r3, [pc, #100]	@ (800169c <HAL_SPI_MspInit+0x1f4>)
 8001636:	2200      	movs	r2, #0
 8001638:	62da      	str	r2, [r3, #44]	@ 0x2c
    handle_GPDMA1_Channel14.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 800163a:	4b18      	ldr	r3, [pc, #96]	@ (800169c <HAL_SPI_MspInit+0x1f4>)
 800163c:	2200      	movs	r2, #0
 800163e:	631a      	str	r2, [r3, #48]	@ 0x30
    handle_GPDMA1_Channel14.Init.Mode = DMA_NORMAL;
 8001640:	4b16      	ldr	r3, [pc, #88]	@ (800169c <HAL_SPI_MspInit+0x1f4>)
 8001642:	2200      	movs	r2, #0
 8001644:	635a      	str	r2, [r3, #52]	@ 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel14) != HAL_OK)
 8001646:	4815      	ldr	r0, [pc, #84]	@ (800169c <HAL_SPI_MspInit+0x1f4>)
 8001648:	f001 fbf8 	bl	8002e3c <HAL_DMA_Init>
 800164c:	4603      	mov	r3, r0
 800164e:	2b00      	cmp	r3, #0
 8001650:	d001      	beq.n	8001656 <HAL_SPI_MspInit+0x1ae>
    {
      Error_Handler();
 8001652:	f7ff fd65 	bl	8001120 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle, hdmatx, handle_GPDMA1_Channel14);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	4a10      	ldr	r2, [pc, #64]	@ (800169c <HAL_SPI_MspInit+0x1f4>)
 800165a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800165e:	4a0f      	ldr	r2, [pc, #60]	@ (800169c <HAL_SPI_MspInit+0x1f4>)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	65d3      	str	r3, [r2, #92]	@ 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel14, DMA_CHANNEL_NPRIV) != HAL_OK)
 8001664:	2110      	movs	r1, #16
 8001666:	480d      	ldr	r0, [pc, #52]	@ (800169c <HAL_SPI_MspInit+0x1f4>)
 8001668:	f001 fe9e 	bl	80033a8 <HAL_DMA_ConfigChannelAttributes>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d001      	beq.n	8001676 <HAL_SPI_MspInit+0x1ce>
    {
      Error_Handler();
 8001672:	f7ff fd55 	bl	8001120 <Error_Handler>
    }

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 6, 0);
 8001676:	2200      	movs	r2, #0
 8001678:	2106      	movs	r1, #6
 800167a:	203c      	movs	r0, #60	@ 0x3c
 800167c:	f001 fb5e 	bl	8002d3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8001680:	203c      	movs	r0, #60	@ 0x3c
 8001682:	f001 fb75 	bl	8002d70 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8001686:	e0e7      	b.n	8001858 <HAL_SPI_MspInit+0x3b0>
 8001688:	40003800 	.word	0x40003800
 800168c:	46020c00 	.word	0x46020c00
 8001690:	42020400 	.word	0x42020400
 8001694:	20000280 	.word	0x20000280
 8001698:	400207d0 	.word	0x400207d0
 800169c:	200002f8 	.word	0x200002f8
 80016a0:	40020750 	.word	0x40020750
  else if(spiHandle->Instance==SPI3)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a6d      	ldr	r2, [pc, #436]	@ (8001860 <HAL_SPI_MspInit+0x3b8>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	f040 80d4 	bne.w	8001858 <HAL_SPI_MspInit+0x3b0>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SPI3;
 80016b0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80016b4:	f04f 0300 	mov.w	r3, #0
 80016b8:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.Spi3ClockSelection = RCC_SPI3CLKSOURCE_SYSCLK;
 80016bc:	2308      	movs	r3, #8
 80016be:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016c2:	f107 0318 	add.w	r3, r7, #24
 80016c6:	4618      	mov	r0, r3
 80016c8:	f004 f968 	bl	800599c <HAL_RCCEx_PeriphCLKConfig>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d001      	beq.n	80016d6 <HAL_SPI_MspInit+0x22e>
      Error_Handler();
 80016d2:	f7ff fd25 	bl	8001120 <Error_Handler>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80016d6:	4b63      	ldr	r3, [pc, #396]	@ (8001864 <HAL_SPI_MspInit+0x3bc>)
 80016d8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80016dc:	4a61      	ldr	r2, [pc, #388]	@ (8001864 <HAL_SPI_MspInit+0x3bc>)
 80016de:	f043 0320 	orr.w	r3, r3, #32
 80016e2:	f8c2 30a8 	str.w	r3, [r2, #168]	@ 0xa8
 80016e6:	4b5f      	ldr	r3, [pc, #380]	@ (8001864 <HAL_SPI_MspInit+0x3bc>)
 80016e8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80016ec:	f003 0320 	and.w	r3, r3, #32
 80016f0:	60fb      	str	r3, [r7, #12]
 80016f2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016f4:	4b5b      	ldr	r3, [pc, #364]	@ (8001864 <HAL_SPI_MspInit+0x3bc>)
 80016f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80016fa:	4a5a      	ldr	r2, [pc, #360]	@ (8001864 <HAL_SPI_MspInit+0x3bc>)
 80016fc:	f043 0302 	orr.w	r3, r3, #2
 8001700:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8001704:	4b57      	ldr	r3, [pc, #348]	@ (8001864 <HAL_SPI_MspInit+0x3bc>)
 8001706:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800170a:	f003 0302 	and.w	r3, r3, #2
 800170e:	60bb      	str	r3, [r7, #8]
 8001710:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001712:	2338      	movs	r3, #56	@ 0x38
 8001714:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001718:	2302      	movs	r3, #2
 800171a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171e:	2300      	movs	r3, #0
 8001720:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001724:	2300      	movs	r3, #0
 8001726:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800172a:	2306      	movs	r3, #6
 800172c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001730:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001734:	4619      	mov	r1, r3
 8001736:	484c      	ldr	r0, [pc, #304]	@ (8001868 <HAL_SPI_MspInit+0x3c0>)
 8001738:	f002 f8f2 	bl	8003920 <HAL_GPIO_Init>
    handle_GPDMA1_Channel13.Instance = GPDMA1_Channel13;
 800173c:	4b4b      	ldr	r3, [pc, #300]	@ (800186c <HAL_SPI_MspInit+0x3c4>)
 800173e:	4a4c      	ldr	r2, [pc, #304]	@ (8001870 <HAL_SPI_MspInit+0x3c8>)
 8001740:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel13.Init.Request = GPDMA1_REQUEST_SPI3_TX;
 8001742:	4b4a      	ldr	r3, [pc, #296]	@ (800186c <HAL_SPI_MspInit+0x3c4>)
 8001744:	220b      	movs	r2, #11
 8001746:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel13.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 8001748:	4b48      	ldr	r3, [pc, #288]	@ (800186c <HAL_SPI_MspInit+0x3c4>)
 800174a:	2200      	movs	r2, #0
 800174c:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel13.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800174e:	4b47      	ldr	r3, [pc, #284]	@ (800186c <HAL_SPI_MspInit+0x3c4>)
 8001750:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001754:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel13.Init.SrcInc = DMA_SINC_INCREMENTED;
 8001756:	4b45      	ldr	r3, [pc, #276]	@ (800186c <HAL_SPI_MspInit+0x3c4>)
 8001758:	2208      	movs	r2, #8
 800175a:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel13.Init.DestInc = DMA_DINC_FIXED;
 800175c:	4b43      	ldr	r3, [pc, #268]	@ (800186c <HAL_SPI_MspInit+0x3c4>)
 800175e:	2200      	movs	r2, #0
 8001760:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel13.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_BYTE;
 8001762:	4b42      	ldr	r3, [pc, #264]	@ (800186c <HAL_SPI_MspInit+0x3c4>)
 8001764:	2200      	movs	r2, #0
 8001766:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel13.Init.DestDataWidth = DMA_DEST_DATAWIDTH_BYTE;
 8001768:	4b40      	ldr	r3, [pc, #256]	@ (800186c <HAL_SPI_MspInit+0x3c4>)
 800176a:	2200      	movs	r2, #0
 800176c:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel13.Init.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 800176e:	4b3f      	ldr	r3, [pc, #252]	@ (800186c <HAL_SPI_MspInit+0x3c4>)
 8001770:	2200      	movs	r2, #0
 8001772:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel13.Init.SrcBurstLength = 1;
 8001774:	4b3d      	ldr	r3, [pc, #244]	@ (800186c <HAL_SPI_MspInit+0x3c4>)
 8001776:	2201      	movs	r2, #1
 8001778:	625a      	str	r2, [r3, #36]	@ 0x24
    handle_GPDMA1_Channel13.Init.DestBurstLength = 1;
 800177a:	4b3c      	ldr	r3, [pc, #240]	@ (800186c <HAL_SPI_MspInit+0x3c4>)
 800177c:	2201      	movs	r2, #1
 800177e:	629a      	str	r2, [r3, #40]	@ 0x28
    handle_GPDMA1_Channel13.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 8001780:	4b3a      	ldr	r3, [pc, #232]	@ (800186c <HAL_SPI_MspInit+0x3c4>)
 8001782:	2200      	movs	r2, #0
 8001784:	62da      	str	r2, [r3, #44]	@ 0x2c
    handle_GPDMA1_Channel13.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8001786:	4b39      	ldr	r3, [pc, #228]	@ (800186c <HAL_SPI_MspInit+0x3c4>)
 8001788:	2200      	movs	r2, #0
 800178a:	631a      	str	r2, [r3, #48]	@ 0x30
    handle_GPDMA1_Channel13.Init.Mode = DMA_NORMAL;
 800178c:	4b37      	ldr	r3, [pc, #220]	@ (800186c <HAL_SPI_MspInit+0x3c4>)
 800178e:	2200      	movs	r2, #0
 8001790:	635a      	str	r2, [r3, #52]	@ 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel13) != HAL_OK)
 8001792:	4836      	ldr	r0, [pc, #216]	@ (800186c <HAL_SPI_MspInit+0x3c4>)
 8001794:	f001 fb52 	bl	8002e3c <HAL_DMA_Init>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d001      	beq.n	80017a2 <HAL_SPI_MspInit+0x2fa>
      Error_Handler();
 800179e:	f7ff fcbf 	bl	8001120 <Error_Handler>
    __HAL_LINKDMA(spiHandle, hdmatx, handle_GPDMA1_Channel13);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	4a31      	ldr	r2, [pc, #196]	@ (800186c <HAL_SPI_MspInit+0x3c4>)
 80017a6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80017aa:	4a30      	ldr	r2, [pc, #192]	@ (800186c <HAL_SPI_MspInit+0x3c4>)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	65d3      	str	r3, [r2, #92]	@ 0x5c
    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel13, DMA_CHANNEL_NPRIV) != HAL_OK)
 80017b0:	2110      	movs	r1, #16
 80017b2:	482e      	ldr	r0, [pc, #184]	@ (800186c <HAL_SPI_MspInit+0x3c4>)
 80017b4:	f001 fdf8 	bl	80033a8 <HAL_DMA_ConfigChannelAttributes>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d001      	beq.n	80017c2 <HAL_SPI_MspInit+0x31a>
      Error_Handler();
 80017be:	f7ff fcaf 	bl	8001120 <Error_Handler>
    handle_GPDMA1_Channel12.Instance = GPDMA1_Channel12;
 80017c2:	4b2c      	ldr	r3, [pc, #176]	@ (8001874 <HAL_SPI_MspInit+0x3cc>)
 80017c4:	4a2c      	ldr	r2, [pc, #176]	@ (8001878 <HAL_SPI_MspInit+0x3d0>)
 80017c6:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel12.Init.Request = GPDMA1_REQUEST_SPI3_RX;
 80017c8:	4b2a      	ldr	r3, [pc, #168]	@ (8001874 <HAL_SPI_MspInit+0x3cc>)
 80017ca:	220a      	movs	r2, #10
 80017cc:	605a      	str	r2, [r3, #4]
    handle_GPDMA1_Channel12.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 80017ce:	4b29      	ldr	r3, [pc, #164]	@ (8001874 <HAL_SPI_MspInit+0x3cc>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	609a      	str	r2, [r3, #8]
    handle_GPDMA1_Channel12.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80017d4:	4b27      	ldr	r3, [pc, #156]	@ (8001874 <HAL_SPI_MspInit+0x3cc>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	60da      	str	r2, [r3, #12]
    handle_GPDMA1_Channel12.Init.SrcInc = DMA_SINC_FIXED;
 80017da:	4b26      	ldr	r3, [pc, #152]	@ (8001874 <HAL_SPI_MspInit+0x3cc>)
 80017dc:	2200      	movs	r2, #0
 80017de:	611a      	str	r2, [r3, #16]
    handle_GPDMA1_Channel12.Init.DestInc = DMA_DINC_INCREMENTED;
 80017e0:	4b24      	ldr	r3, [pc, #144]	@ (8001874 <HAL_SPI_MspInit+0x3cc>)
 80017e2:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80017e6:	615a      	str	r2, [r3, #20]
    handle_GPDMA1_Channel12.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_BYTE;
 80017e8:	4b22      	ldr	r3, [pc, #136]	@ (8001874 <HAL_SPI_MspInit+0x3cc>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	619a      	str	r2, [r3, #24]
    handle_GPDMA1_Channel12.Init.DestDataWidth = DMA_DEST_DATAWIDTH_BYTE;
 80017ee:	4b21      	ldr	r3, [pc, #132]	@ (8001874 <HAL_SPI_MspInit+0x3cc>)
 80017f0:	2200      	movs	r2, #0
 80017f2:	61da      	str	r2, [r3, #28]
    handle_GPDMA1_Channel12.Init.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 80017f4:	4b1f      	ldr	r3, [pc, #124]	@ (8001874 <HAL_SPI_MspInit+0x3cc>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	621a      	str	r2, [r3, #32]
    handle_GPDMA1_Channel12.Init.SrcBurstLength = 1;
 80017fa:	4b1e      	ldr	r3, [pc, #120]	@ (8001874 <HAL_SPI_MspInit+0x3cc>)
 80017fc:	2201      	movs	r2, #1
 80017fe:	625a      	str	r2, [r3, #36]	@ 0x24
    handle_GPDMA1_Channel12.Init.DestBurstLength = 1;
 8001800:	4b1c      	ldr	r3, [pc, #112]	@ (8001874 <HAL_SPI_MspInit+0x3cc>)
 8001802:	2201      	movs	r2, #1
 8001804:	629a      	str	r2, [r3, #40]	@ 0x28
    handle_GPDMA1_Channel12.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 8001806:	4b1b      	ldr	r3, [pc, #108]	@ (8001874 <HAL_SPI_MspInit+0x3cc>)
 8001808:	2200      	movs	r2, #0
 800180a:	62da      	str	r2, [r3, #44]	@ 0x2c
    handle_GPDMA1_Channel12.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 800180c:	4b19      	ldr	r3, [pc, #100]	@ (8001874 <HAL_SPI_MspInit+0x3cc>)
 800180e:	2200      	movs	r2, #0
 8001810:	631a      	str	r2, [r3, #48]	@ 0x30
    handle_GPDMA1_Channel12.Init.Mode = DMA_NORMAL;
 8001812:	4b18      	ldr	r3, [pc, #96]	@ (8001874 <HAL_SPI_MspInit+0x3cc>)
 8001814:	2200      	movs	r2, #0
 8001816:	635a      	str	r2, [r3, #52]	@ 0x34
    if (HAL_DMA_Init(&handle_GPDMA1_Channel12) != HAL_OK)
 8001818:	4816      	ldr	r0, [pc, #88]	@ (8001874 <HAL_SPI_MspInit+0x3cc>)
 800181a:	f001 fb0f 	bl	8002e3c <HAL_DMA_Init>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	d001      	beq.n	8001828 <HAL_SPI_MspInit+0x380>
      Error_Handler();
 8001824:	f7ff fc7c 	bl	8001120 <Error_Handler>
    __HAL_LINKDMA(spiHandle, hdmarx, handle_GPDMA1_Channel12);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	4a12      	ldr	r2, [pc, #72]	@ (8001874 <HAL_SPI_MspInit+0x3cc>)
 800182c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8001830:	4a10      	ldr	r2, [pc, #64]	@ (8001874 <HAL_SPI_MspInit+0x3cc>)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	65d3      	str	r3, [r2, #92]	@ 0x5c
    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel12, DMA_CHANNEL_NPRIV) != HAL_OK)
 8001836:	2110      	movs	r1, #16
 8001838:	480e      	ldr	r0, [pc, #56]	@ (8001874 <HAL_SPI_MspInit+0x3cc>)
 800183a:	f001 fdb5 	bl	80033a8 <HAL_DMA_ConfigChannelAttributes>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	d001      	beq.n	8001848 <HAL_SPI_MspInit+0x3a0>
      Error_Handler();
 8001844:	f7ff fc6c 	bl	8001120 <Error_Handler>
    HAL_NVIC_SetPriority(SPI3_IRQn, 6, 0);
 8001848:	2200      	movs	r2, #0
 800184a:	2106      	movs	r1, #6
 800184c:	2063      	movs	r0, #99	@ 0x63
 800184e:	f001 fa75 	bl	8002d3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8001852:	2063      	movs	r0, #99	@ 0x63
 8001854:	f001 fa8c 	bl	8002d70 <HAL_NVIC_EnableIRQ>
}
 8001858:	bf00      	nop
 800185a:	37f0      	adds	r7, #240	@ 0xf0
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	46002000 	.word	0x46002000
 8001864:	46020c00 	.word	0x46020c00
 8001868:	42020400 	.word	0x42020400
 800186c:	20000370 	.word	0x20000370
 8001870:	400206d0 	.word	0x400206d0
 8001874:	200003e8 	.word	0x200003e8
 8001878:	40020650 	.word	0x40020650

0800187c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800187c:	b480      	push	{r7}
 800187e:	b083      	sub	sp, #12
 8001880:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001882:	4b0a      	ldr	r3, [pc, #40]	@ (80018ac <HAL_MspInit+0x30>)
 8001884:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001888:	4a08      	ldr	r2, [pc, #32]	@ (80018ac <HAL_MspInit+0x30>)
 800188a:	f043 0304 	orr.w	r3, r3, #4
 800188e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8001892:	4b06      	ldr	r3, [pc, #24]	@ (80018ac <HAL_MspInit+0x30>)
 8001894:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001898:	f003 0304 	and.w	r3, r3, #4
 800189c:	607b      	str	r3, [r7, #4]
 800189e:	687b      	ldr	r3, [r7, #4]
  /* Peripheral interrupt init */

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018a0:	bf00      	nop
 80018a2:	370c      	adds	r7, #12
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr
 80018ac:	46020c00 	.word	0x46020c00

080018b0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b08e      	sub	sp, #56	@ 0x38
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80018b8:	2300      	movs	r3, #0
 80018ba:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t              uwPrescalerValue = 0;
 80018bc:	2300      	movs	r3, #0
 80018be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM8 clock */
  __HAL_RCC_TIM8_CLK_ENABLE();
 80018c0:	4b2e      	ldr	r3, [pc, #184]	@ (800197c <HAL_InitTick+0xcc>)
 80018c2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80018c6:	4a2d      	ldr	r2, [pc, #180]	@ (800197c <HAL_InitTick+0xcc>)
 80018c8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80018cc:	f8c2 30a4 	str.w	r3, [r2, #164]	@ 0xa4
 80018d0:	4b2a      	ldr	r3, [pc, #168]	@ (800197c <HAL_InitTick+0xcc>)
 80018d2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80018d6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80018da:	60fb      	str	r3, [r7, #12]
 80018dc:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80018de:	f107 0210 	add.w	r2, r7, #16
 80018e2:	f107 0314 	add.w	r3, r7, #20
 80018e6:	4611      	mov	r1, r2
 80018e8:	4618      	mov	r0, r3
 80018ea:	f003 ff99 	bl	8005820 <HAL_RCC_GetClockConfig>
  /* Compute TIM8 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 80018ee:	f003 ff83 	bl	80057f8 <HAL_RCC_GetPCLK2Freq>
 80018f2:	6338      	str	r0, [r7, #48]	@ 0x30

  /* Compute the prescaler value to have TIM8 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80018f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80018f6:	4a22      	ldr	r2, [pc, #136]	@ (8001980 <HAL_InitTick+0xd0>)
 80018f8:	fba2 2303 	umull	r2, r3, r2, r3
 80018fc:	0c9b      	lsrs	r3, r3, #18
 80018fe:	3b01      	subs	r3, #1
 8001900:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Initialize TIM8 */
  htim8.Instance = TIM8;
 8001902:	4b20      	ldr	r3, [pc, #128]	@ (8001984 <HAL_InitTick+0xd4>)
 8001904:	4a20      	ldr	r2, [pc, #128]	@ (8001988 <HAL_InitTick+0xd8>)
 8001906:	601a      	str	r2, [r3, #0]
  + Period = [(TIM8CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim8.Init.Period = (1000000U / 1000U) - 1U;
 8001908:	4b1e      	ldr	r3, [pc, #120]	@ (8001984 <HAL_InitTick+0xd4>)
 800190a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800190e:	60da      	str	r2, [r3, #12]
  htim8.Init.Prescaler = uwPrescalerValue;
 8001910:	4a1c      	ldr	r2, [pc, #112]	@ (8001984 <HAL_InitTick+0xd4>)
 8001912:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001914:	6053      	str	r3, [r2, #4]
  htim8.Init.ClockDivision = 0;
 8001916:	4b1b      	ldr	r3, [pc, #108]	@ (8001984 <HAL_InitTick+0xd4>)
 8001918:	2200      	movs	r2, #0
 800191a:	611a      	str	r2, [r3, #16]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800191c:	4b19      	ldr	r3, [pc, #100]	@ (8001984 <HAL_InitTick+0xd4>)
 800191e:	2200      	movs	r2, #0
 8001920:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim8);
 8001922:	4818      	ldr	r0, [pc, #96]	@ (8001984 <HAL_InitTick+0xd4>)
 8001924:	f005 fbb8 	bl	8007098 <HAL_TIM_Base_Init>
 8001928:	4603      	mov	r3, r0
 800192a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  if (status == HAL_OK)
 800192e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001932:	2b00      	cmp	r3, #0
 8001934:	d118      	bne.n	8001968 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim8);
 8001936:	4813      	ldr	r0, [pc, #76]	@ (8001984 <HAL_InitTick+0xd4>)
 8001938:	f005 fc10 	bl	800715c <HAL_TIM_Base_Start_IT>
 800193c:	4603      	mov	r3, r0
 800193e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    if (status == HAL_OK)
 8001942:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001946:	2b00      	cmp	r3, #0
 8001948:	d10e      	bne.n	8001968 <HAL_InitTick+0xb8>
    {
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	2b0f      	cmp	r3, #15
 800194e:	d808      	bhi.n	8001962 <HAL_InitTick+0xb2>
      {
        /* Enable the TIM8 global Interrupt */
        HAL_NVIC_SetPriority(TIM8_UP_IRQn, TickPriority, 0U);
 8001950:	2200      	movs	r2, #0
 8001952:	6879      	ldr	r1, [r7, #4]
 8001954:	2034      	movs	r0, #52	@ 0x34
 8001956:	f001 f9f1 	bl	8002d3c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800195a:	4a0c      	ldr	r2, [pc, #48]	@ (800198c <HAL_InitTick+0xdc>)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6013      	str	r3, [r2, #0]
 8001960:	e002      	b.n	8001968 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8001962:	2301      	movs	r3, #1
 8001964:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
      }
    }
  }

  /* Enable the TIM8 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_UP_IRQn);
 8001968:	2034      	movs	r0, #52	@ 0x34
 800196a:	f001 fa01 	bl	8002d70 <HAL_NVIC_EnableIRQ>

 /* Return function status */
  return status;
 800196e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 8001972:	4618      	mov	r0, r3
 8001974:	3738      	adds	r7, #56	@ 0x38
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	46020c00 	.word	0x46020c00
 8001980:	431bde83 	.word	0x431bde83
 8001984:	20000460 	.word	0x20000460
 8001988:	40013400 	.word	0x40013400
 800198c:	20000004 	.word	0x20000004

08001990 <LL_EXTI_IsActiveFallingFlag_0_31>:
{
 8001990:	b480      	push	{r7}
 8001992:	b083      	sub	sp, #12
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->FPR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 8001998:	4b07      	ldr	r3, [pc, #28]	@ (80019b8 <LL_EXTI_IsActiveFallingFlag_0_31+0x28>)
 800199a:	691a      	ldr	r2, [r3, #16]
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	4013      	ands	r3, r2
 80019a0:	687a      	ldr	r2, [r7, #4]
 80019a2:	429a      	cmp	r2, r3
 80019a4:	d101      	bne.n	80019aa <LL_EXTI_IsActiveFallingFlag_0_31+0x1a>
 80019a6:	2301      	movs	r3, #1
 80019a8:	e000      	b.n	80019ac <LL_EXTI_IsActiveFallingFlag_0_31+0x1c>
 80019aa:	2300      	movs	r3, #0
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	370c      	adds	r7, #12
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr
 80019b8:	46022000 	.word	0x46022000

080019bc <LL_EXTI_ClearFallingFlag_0_31>:
{
 80019bc:	b480      	push	{r7}
 80019be:	b083      	sub	sp, #12
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->FPR1, ExtiLine);
 80019c4:	4a04      	ldr	r2, [pc, #16]	@ (80019d8 <LL_EXTI_ClearFallingFlag_0_31+0x1c>)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6113      	str	r3, [r2, #16]
}
 80019ca:	bf00      	nop
 80019cc:	370c      	adds	r7, #12
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr
 80019d6:	bf00      	nop
 80019d8:	46022000 	.word	0x46022000

080019dc <LL_EXTI_IsActiveRisingFlag_0_31>:
{
 80019dc:	b480      	push	{r7}
 80019de:	b083      	sub	sp, #12
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->RPR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 80019e4:	4b07      	ldr	r3, [pc, #28]	@ (8001a04 <LL_EXTI_IsActiveRisingFlag_0_31+0x28>)
 80019e6:	68da      	ldr	r2, [r3, #12]
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	4013      	ands	r3, r2
 80019ec:	687a      	ldr	r2, [r7, #4]
 80019ee:	429a      	cmp	r2, r3
 80019f0:	d101      	bne.n	80019f6 <LL_EXTI_IsActiveRisingFlag_0_31+0x1a>
 80019f2:	2301      	movs	r3, #1
 80019f4:	e000      	b.n	80019f8 <LL_EXTI_IsActiveRisingFlag_0_31+0x1c>
 80019f6:	2300      	movs	r3, #0
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	370c      	adds	r7, #12
 80019fc:	46bd      	mov	sp, r7
 80019fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a02:	4770      	bx	lr
 8001a04:	46022000 	.word	0x46022000

08001a08 <LL_EXTI_ClearRisingFlag_0_31>:
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b083      	sub	sp, #12
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->RPR1, ExtiLine);
 8001a10:	4a04      	ldr	r2, [pc, #16]	@ (8001a24 <LL_EXTI_ClearRisingFlag_0_31+0x1c>)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	60d3      	str	r3, [r2, #12]
}
 8001a16:	bf00      	nop
 8001a18:	370c      	adds	r7, #12
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr
 8001a22:	bf00      	nop
 8001a24:	46022000 	.word	0x46022000

08001a28 <DebugMon_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a2c:	bf00      	nop
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr

08001a36 <EXTI8_IRQHandler>:

/**
  * @brief This function handles EXTI Line8 interrupt.
  */
void EXTI8_IRQHandler(void)
{
 8001a36:	b580      	push	{r7, lr}
 8001a38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI8_IRQn 0 */

  /* USER CODE END EXTI8_IRQn 0 */
  if (LL_EXTI_IsActiveFallingFlag_0_31(LL_EXTI_LINE_8) != RESET)
 8001a3a:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001a3e:	f7ff ffa7 	bl	8001990 <LL_EXTI_IsActiveFallingFlag_0_31>
 8001a42:	4603      	mov	r3, r0
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d003      	beq.n	8001a50 <EXTI8_IRQHandler+0x1a>
  {
    LL_EXTI_ClearFallingFlag_0_31(LL_EXTI_LINE_8);
 8001a48:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001a4c:	f7ff ffb6 	bl	80019bc <LL_EXTI_ClearFallingFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_8_FALLING */
  }
  /* USER CODE BEGIN EXTI8_IRQn 1 */

  /* USER CODE END EXTI8_IRQn 1 */
}
 8001a50:	bf00      	nop
 8001a52:	bd80      	pop	{r7, pc}

08001a54 <EXTI9_IRQHandler>:

/**
  * @brief This function handles EXTI Line9 interrupt.
  */
void EXTI9_IRQHandler(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_IRQn 0 */

  /* USER CODE END EXTI9_IRQn 0 */
  if (LL_EXTI_IsActiveFallingFlag_0_31(LL_EXTI_LINE_9) != RESET)
 8001a58:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001a5c:	f7ff ff98 	bl	8001990 <LL_EXTI_IsActiveFallingFlag_0_31>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d003      	beq.n	8001a6e <EXTI9_IRQHandler+0x1a>
  {
    LL_EXTI_ClearFallingFlag_0_31(LL_EXTI_LINE_9);
 8001a66:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001a6a:	f7ff ffa7 	bl	80019bc <LL_EXTI_ClearFallingFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_9_FALLING */

    /* USER CODE END LL_EXTI_LINE_9_FALLING */
  }
  if (LL_EXTI_IsActiveRisingFlag_0_31(LL_EXTI_LINE_9) != RESET)
 8001a6e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001a72:	f7ff ffb3 	bl	80019dc <LL_EXTI_IsActiveRisingFlag_0_31>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d003      	beq.n	8001a84 <EXTI9_IRQHandler+0x30>
  {
    LL_EXTI_ClearRisingFlag_0_31(LL_EXTI_LINE_9);
 8001a7c:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001a80:	f7ff ffc2 	bl	8001a08 <LL_EXTI_ClearRisingFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_9_RISING */
  }
  /* USER CODE BEGIN EXTI9_IRQn 1 */

  /* USER CODE END EXTI9_IRQn 1 */
}
 8001a84:	bf00      	nop
 8001a86:	bd80      	pop	{r7, pc}

08001a88 <EXTI10_IRQHandler>:

/**
  * @brief This function handles EXTI Line10 interrupt.
  */
void EXTI10_IRQHandler(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI10_IRQn 0 */

  /* USER CODE END EXTI10_IRQn 0 */
  if (LL_EXTI_IsActiveRisingFlag_0_31(LL_EXTI_LINE_10) != RESET)
 8001a8c:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8001a90:	f7ff ffa4 	bl	80019dc <LL_EXTI_IsActiveRisingFlag_0_31>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d003      	beq.n	8001aa2 <EXTI10_IRQHandler+0x1a>
  {
    LL_EXTI_ClearRisingFlag_0_31(LL_EXTI_LINE_10);
 8001a9a:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8001a9e:	f7ff ffb3 	bl	8001a08 <LL_EXTI_ClearRisingFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_10_RISING */
  }
  /* USER CODE BEGIN EXTI10_IRQn 1 */

  /* USER CODE END EXTI10_IRQn 1 */
}
 8001aa2:	bf00      	nop
 8001aa4:	bd80      	pop	{r7, pc}
	...

08001aa8 <TIM8_UP_IRQHandler>:

/**
  * @brief This function handles TIM8 Update interrupt.
  */
void TIM8_UP_IRQHandler(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_IRQn 0 */

  /* USER CODE END TIM8_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8001aac:	4802      	ldr	r0, [pc, #8]	@ (8001ab8 <TIM8_UP_IRQHandler+0x10>)
 8001aae:	f005 fbf5 	bl	800729c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_IRQn 1 */

  /* USER CODE END TIM8_UP_IRQn 1 */
}
 8001ab2:	bf00      	nop
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	20000460 	.word	0x20000460

08001abc <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8001ac0:	4802      	ldr	r0, [pc, #8]	@ (8001acc <SPI2_IRQHandler+0x10>)
 8001ac2:	f004 ff97 	bl	80069f4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8001ac6:	bf00      	nop
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	20000108 	.word	0x20000108

08001ad0 <GPDMA1_Channel12_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 12 global interrupt.
  */
void GPDMA1_Channel12_IRQHandler(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel12_IRQn 0 */

  /* USER CODE END GPDMA1_Channel12_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel12);
 8001ad4:	4802      	ldr	r0, [pc, #8]	@ (8001ae0 <GPDMA1_Channel12_IRQHandler+0x10>)
 8001ad6:	f001 fb06 	bl	80030e6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel12_IRQn 1 */

  /* USER CODE END GPDMA1_Channel12_IRQn 1 */
}
 8001ada:	bf00      	nop
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	200003e8 	.word	0x200003e8

08001ae4 <GPDMA1_Channel13_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 13 global interrupt.
  */
void GPDMA1_Channel13_IRQHandler(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel13_IRQn 0 */

  /* USER CODE END GPDMA1_Channel13_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel13);
 8001ae8:	4802      	ldr	r0, [pc, #8]	@ (8001af4 <GPDMA1_Channel13_IRQHandler+0x10>)
 8001aea:	f001 fafc 	bl	80030e6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel13_IRQn 1 */

  /* USER CODE END GPDMA1_Channel13_IRQn 1 */
}
 8001aee:	bf00      	nop
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	20000370 	.word	0x20000370

08001af8 <GPDMA1_Channel14_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 14 global interrupt.
  */
void GPDMA1_Channel14_IRQHandler(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel14_IRQn 0 */

  /* USER CODE END GPDMA1_Channel14_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel14);
 8001afc:	4802      	ldr	r0, [pc, #8]	@ (8001b08 <GPDMA1_Channel14_IRQHandler+0x10>)
 8001afe:	f001 faf2 	bl	80030e6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel14_IRQn 1 */

  /* USER CODE END GPDMA1_Channel14_IRQn 1 */
}
 8001b02:	bf00      	nop
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	200002f8 	.word	0x200002f8

08001b0c <GPDMA1_Channel15_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 15 global interrupt.
  */
void GPDMA1_Channel15_IRQHandler(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel15_IRQn 0 */

  /* USER CODE END GPDMA1_Channel15_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel15);
 8001b10:	4802      	ldr	r0, [pc, #8]	@ (8001b1c <GPDMA1_Channel15_IRQHandler+0x10>)
 8001b12:	f001 fae8 	bl	80030e6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel15_IRQn 1 */

  /* USER CODE END GPDMA1_Channel15_IRQn 1 */
}
 8001b16:	bf00      	nop
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	20000280 	.word	0x20000280

08001b20 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8001b24:	4802      	ldr	r0, [pc, #8]	@ (8001b30 <SPI3_IRQHandler+0x10>)
 8001b26:	f004 ff65 	bl	80069f4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8001b2a:	bf00      	nop
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	200001c4 	.word	0x200001c4

08001b34 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001b34:	b480      	push	{r7}
 8001b36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001b38:	4b18      	ldr	r3, [pc, #96]	@ (8001b9c <SystemInit+0x68>)
 8001b3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b3e:	4a17      	ldr	r2, [pc, #92]	@ (8001b9c <SystemInit+0x68>)
 8001b40:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b44:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8001b48:	4b15      	ldr	r3, [pc, #84]	@ (8001ba0 <SystemInit+0x6c>)
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8001b4e:	4b14      	ldr	r3, [pc, #80]	@ (8001ba0 <SystemInit+0x6c>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8001b54:	4b12      	ldr	r3, [pc, #72]	@ (8001ba0 <SystemInit+0x6c>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8001b5a:	4b11      	ldr	r3, [pc, #68]	@ (8001ba0 <SystemInit+0x6c>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8001b60:	4b0f      	ldr	r3, [pc, #60]	@ (8001ba0 <SystemInit+0x6c>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a0e      	ldr	r2, [pc, #56]	@ (8001ba0 <SystemInit+0x6c>)
 8001b66:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 8001b6a:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 8001b6e:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8001b70:	4b0b      	ldr	r3, [pc, #44]	@ (8001ba0 <SystemInit+0x6c>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8001b76:	4b0a      	ldr	r3, [pc, #40]	@ (8001ba0 <SystemInit+0x6c>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a09      	ldr	r2, [pc, #36]	@ (8001ba0 <SystemInit+0x6c>)
 8001b7c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001b80:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8001b82:	4b07      	ldr	r3, [pc, #28]	@ (8001ba0 <SystemInit+0x6c>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001b88:	4b04      	ldr	r3, [pc, #16]	@ (8001b9c <SystemInit+0x68>)
 8001b8a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001b8e:	609a      	str	r2, [r3, #8]
  #endif
}
 8001b90:	bf00      	nop
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr
 8001b9a:	bf00      	nop
 8001b9c:	e000ed00 	.word	0xe000ed00
 8001ba0:	46020c00 	.word	0x46020c00

08001ba4 <__NVIC_GetPriorityGrouping>:
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ba8:	4b04      	ldr	r3, [pc, #16]	@ (8001bbc <__NVIC_GetPriorityGrouping+0x18>)
 8001baa:	68db      	ldr	r3, [r3, #12]
 8001bac:	0a1b      	lsrs	r3, r3, #8
 8001bae:	f003 0307 	and.w	r3, r3, #7
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bba:	4770      	bx	lr
 8001bbc:	e000ed00 	.word	0xe000ed00

08001bc0 <__NVIC_EnableIRQ>:
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b083      	sub	sp, #12
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	db0b      	blt.n	8001bea <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bd2:	79fb      	ldrb	r3, [r7, #7]
 8001bd4:	f003 021f 	and.w	r2, r3, #31
 8001bd8:	4907      	ldr	r1, [pc, #28]	@ (8001bf8 <__NVIC_EnableIRQ+0x38>)
 8001bda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bde:	095b      	lsrs	r3, r3, #5
 8001be0:	2001      	movs	r0, #1
 8001be2:	fa00 f202 	lsl.w	r2, r0, r2
 8001be6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001bea:	bf00      	nop
 8001bec:	370c      	adds	r7, #12
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr
 8001bf6:	bf00      	nop
 8001bf8:	e000e100 	.word	0xe000e100

08001bfc <__NVIC_SetPriority>:
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b083      	sub	sp, #12
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	4603      	mov	r3, r0
 8001c04:	6039      	str	r1, [r7, #0]
 8001c06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	db0a      	blt.n	8001c26 <__NVIC_SetPriority+0x2a>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	b2da      	uxtb	r2, r3
 8001c14:	490c      	ldr	r1, [pc, #48]	@ (8001c48 <__NVIC_SetPriority+0x4c>)
 8001c16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c1a:	0112      	lsls	r2, r2, #4
 8001c1c:	b2d2      	uxtb	r2, r2
 8001c1e:	440b      	add	r3, r1
 8001c20:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001c24:	e00a      	b.n	8001c3c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	b2da      	uxtb	r2, r3
 8001c2a:	4908      	ldr	r1, [pc, #32]	@ (8001c4c <__NVIC_SetPriority+0x50>)
 8001c2c:	79fb      	ldrb	r3, [r7, #7]
 8001c2e:	f003 030f 	and.w	r3, r3, #15
 8001c32:	3b04      	subs	r3, #4
 8001c34:	0112      	lsls	r2, r2, #4
 8001c36:	b2d2      	uxtb	r2, r2
 8001c38:	440b      	add	r3, r1
 8001c3a:	761a      	strb	r2, [r3, #24]
}
 8001c3c:	bf00      	nop
 8001c3e:	370c      	adds	r7, #12
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr
 8001c48:	e000e100 	.word	0xe000e100
 8001c4c:	e000ed00 	.word	0xe000ed00

08001c50 <NVIC_EncodePriority>:
{
 8001c50:	b480      	push	{r7}
 8001c52:	b089      	sub	sp, #36	@ 0x24
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	60f8      	str	r0, [r7, #12]
 8001c58:	60b9      	str	r1, [r7, #8]
 8001c5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	f003 0307 	and.w	r3, r3, #7
 8001c62:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c64:	69fb      	ldr	r3, [r7, #28]
 8001c66:	f1c3 0307 	rsb	r3, r3, #7
 8001c6a:	2b04      	cmp	r3, #4
 8001c6c:	bf28      	it	cs
 8001c6e:	2304      	movcs	r3, #4
 8001c70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c72:	69fb      	ldr	r3, [r7, #28]
 8001c74:	3304      	adds	r3, #4
 8001c76:	2b06      	cmp	r3, #6
 8001c78:	d902      	bls.n	8001c80 <NVIC_EncodePriority+0x30>
 8001c7a:	69fb      	ldr	r3, [r7, #28]
 8001c7c:	3b03      	subs	r3, #3
 8001c7e:	e000      	b.n	8001c82 <NVIC_EncodePriority+0x32>
 8001c80:	2300      	movs	r3, #0
 8001c82:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c84:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001c88:	69bb      	ldr	r3, [r7, #24]
 8001c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8e:	43da      	mvns	r2, r3
 8001c90:	68bb      	ldr	r3, [r7, #8]
 8001c92:	401a      	ands	r2, r3
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c98:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	fa01 f303 	lsl.w	r3, r1, r3
 8001ca2:	43d9      	mvns	r1, r3
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ca8:	4313      	orrs	r3, r2
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	3724      	adds	r7, #36	@ 0x24
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr

08001cb6 <LL_LPUART_Enable>:
  * @rmtoll CR1          UE            LL_LPUART_Enable
  * @param  LPUARTx LPUART Instance
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_Enable(USART_TypeDef *LPUARTx)
{
 8001cb6:	b480      	push	{r7}
 8001cb8:	b083      	sub	sp, #12
 8001cba:	af00      	add	r7, sp, #0
 8001cbc:	6078      	str	r0, [r7, #4]
  SET_BIT(LPUARTx->CR1, USART_CR1_UE);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f043 0201 	orr.w	r2, r3, #1
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	601a      	str	r2, [r3, #0]
}
 8001cca:	bf00      	nop
 8001ccc:	370c      	adds	r7, #12
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr

08001cd6 <LL_LPUART_DisableFIFO>:
  * @rmtoll CR1          FIFOEN        LL_LPUART_DisableFIFO
  * @param  LPUARTx LPUART Instance
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_DisableFIFO(USART_TypeDef *LPUARTx)
{
 8001cd6:	b480      	push	{r7}
 8001cd8:	b083      	sub	sp, #12
 8001cda:	af00      	add	r7, sp, #0
 8001cdc:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(LPUARTx->CR1, USART_CR1_FIFOEN);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	601a      	str	r2, [r3, #0]
}
 8001cea:	bf00      	nop
 8001cec:	370c      	adds	r7, #12
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr

08001cf6 <LL_LPUART_SetTXFIFOThreshold>:
  *         @arg @ref LL_LPUART_FIFOTHRESHOLD_7_8
  *         @arg @ref LL_LPUART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_SetTXFIFOThreshold(USART_TypeDef *LPUARTx, uint32_t Threshold)
{
 8001cf6:	b480      	push	{r7}
 8001cf8:	b089      	sub	sp, #36	@ 0x24
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	6078      	str	r0, [r7, #4]
 8001cfe:	6039      	str	r1, [r7, #0]
  ATOMIC_MODIFY_REG(LPUARTx->CR3, USART_CR3_TXFTCFG, Threshold << USART_CR3_TXFTCFG_Pos);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	3308      	adds	r3, #8
 8001d04:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	e853 3f00 	ldrex	r3, [r3]
 8001d0c:	60bb      	str	r3, [r7, #8]
   return(result);
 8001d0e:	68bb      	ldr	r3, [r7, #8]
 8001d10:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	075b      	lsls	r3, r3, #29
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	61fb      	str	r3, [r7, #28]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	3308      	adds	r3, #8
 8001d20:	69fa      	ldr	r2, [r7, #28]
 8001d22:	61ba      	str	r2, [r7, #24]
 8001d24:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001d26:	6979      	ldr	r1, [r7, #20]
 8001d28:	69ba      	ldr	r2, [r7, #24]
 8001d2a:	e841 2300 	strex	r3, r2, [r1]
 8001d2e:	613b      	str	r3, [r7, #16]
   return(result);
 8001d30:	693b      	ldr	r3, [r7, #16]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d1e4      	bne.n	8001d00 <LL_LPUART_SetTXFIFOThreshold+0xa>
}
 8001d36:	bf00      	nop
 8001d38:	bf00      	nop
 8001d3a:	3724      	adds	r7, #36	@ 0x24
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr

08001d44 <LL_LPUART_SetRXFIFOThreshold>:
  *         @arg @ref LL_LPUART_FIFOTHRESHOLD_7_8
  *         @arg @ref LL_LPUART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_SetRXFIFOThreshold(USART_TypeDef *LPUARTx, uint32_t Threshold)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b089      	sub	sp, #36	@ 0x24
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
 8001d4c:	6039      	str	r1, [r7, #0]
  ATOMIC_MODIFY_REG(LPUARTx->CR3, USART_CR3_RXFTCFG, Threshold << USART_CR3_RXFTCFG_Pos);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	3308      	adds	r3, #8
 8001d52:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	e853 3f00 	ldrex	r3, [r3]
 8001d5a:	60bb      	str	r3, [r7, #8]
   return(result);
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	065b      	lsls	r3, r3, #25
 8001d66:	4313      	orrs	r3, r2
 8001d68:	61fb      	str	r3, [r7, #28]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	3308      	adds	r3, #8
 8001d6e:	69fa      	ldr	r2, [r7, #28]
 8001d70:	61ba      	str	r2, [r7, #24]
 8001d72:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001d74:	6979      	ldr	r1, [r7, #20]
 8001d76:	69ba      	ldr	r2, [r7, #24]
 8001d78:	e841 2300 	strex	r3, r2, [r1]
 8001d7c:	613b      	str	r3, [r7, #16]
   return(result);
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d1e4      	bne.n	8001d4e <LL_LPUART_SetRXFIFOThreshold+0xa>
}
 8001d84:	bf00      	nop
 8001d86:	bf00      	nop
 8001d88:	3724      	adds	r7, #36	@ 0x24
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr

08001d92 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8001d92:	b480      	push	{r7}
 8001d94:	b083      	sub	sp, #12
 8001d96:	af00      	add	r7, sp, #0
 8001d98:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f043 0201 	orr.w	r2, r3, #1
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	601a      	str	r2, [r3, #0]
}
 8001da6:	bf00      	nop
 8001da8:	370c      	adds	r7, #12
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr

08001db2 <LL_USART_DisableFIFO>:
  * @rmtoll CR1          FIFOEN        LL_USART_DisableFIFO
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableFIFO(USART_TypeDef *USARTx)
{
 8001db2:	b480      	push	{r7}
 8001db4:	b083      	sub	sp, #12
 8001db6:	af00      	add	r7, sp, #0
 8001db8:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_FIFOEN);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	601a      	str	r2, [r3, #0]
}
 8001dc6:	bf00      	nop
 8001dc8:	370c      	adds	r7, #12
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr

08001dd2 <LL_USART_SetTXFIFOThreshold>:
  *         @arg @ref LL_USART_FIFOTHRESHOLD_7_8
  *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetTXFIFOThreshold(USART_TypeDef *USARTx, uint32_t Threshold)
{
 8001dd2:	b480      	push	{r7}
 8001dd4:	b089      	sub	sp, #36	@ 0x24
 8001dd6:	af00      	add	r7, sp, #0
 8001dd8:	6078      	str	r0, [r7, #4]
 8001dda:	6039      	str	r1, [r7, #0]
  ATOMIC_MODIFY_REG(USARTx->CR3, USART_CR3_TXFTCFG, Threshold << USART_CR3_TXFTCFG_Pos);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	3308      	adds	r3, #8
 8001de0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	e853 3f00 	ldrex	r3, [r3]
 8001de8:	60bb      	str	r3, [r7, #8]
   return(result);
 8001dea:	68bb      	ldr	r3, [r7, #8]
 8001dec:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	075b      	lsls	r3, r3, #29
 8001df4:	4313      	orrs	r3, r2
 8001df6:	61fb      	str	r3, [r7, #28]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	3308      	adds	r3, #8
 8001dfc:	69fa      	ldr	r2, [r7, #28]
 8001dfe:	61ba      	str	r2, [r7, #24]
 8001e00:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001e02:	6979      	ldr	r1, [r7, #20]
 8001e04:	69ba      	ldr	r2, [r7, #24]
 8001e06:	e841 2300 	strex	r3, r2, [r1]
 8001e0a:	613b      	str	r3, [r7, #16]
   return(result);
 8001e0c:	693b      	ldr	r3, [r7, #16]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d1e4      	bne.n	8001ddc <LL_USART_SetTXFIFOThreshold+0xa>
}
 8001e12:	bf00      	nop
 8001e14:	bf00      	nop
 8001e16:	3724      	adds	r7, #36	@ 0x24
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1e:	4770      	bx	lr

08001e20 <LL_USART_SetRXFIFOThreshold>:
  *         @arg @ref LL_USART_FIFOTHRESHOLD_7_8
  *         @arg @ref LL_USART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetRXFIFOThreshold(USART_TypeDef *USARTx, uint32_t Threshold)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b089      	sub	sp, #36	@ 0x24
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
 8001e28:	6039      	str	r1, [r7, #0]
  ATOMIC_MODIFY_REG(USARTx->CR3, USART_CR3_RXFTCFG, Threshold << USART_CR3_RXFTCFG_Pos);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	3308      	adds	r3, #8
 8001e2e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	e853 3f00 	ldrex	r3, [r3]
 8001e36:	60bb      	str	r3, [r7, #8]
   return(result);
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	065b      	lsls	r3, r3, #25
 8001e42:	4313      	orrs	r3, r2
 8001e44:	61fb      	str	r3, [r7, #28]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	3308      	adds	r3, #8
 8001e4a:	69fa      	ldr	r2, [r7, #28]
 8001e4c:	61ba      	str	r2, [r7, #24]
 8001e4e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001e50:	6979      	ldr	r1, [r7, #20]
 8001e52:	69ba      	ldr	r2, [r7, #24]
 8001e54:	e841 2300 	strex	r3, r2, [r1]
 8001e58:	613b      	str	r3, [r7, #16]
   return(result);
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d1e4      	bne.n	8001e2a <LL_USART_SetRXFIFOThreshold+0xa>
}
 8001e60:	bf00      	nop
 8001e62:	bf00      	nop
 8001e64:	3724      	adds	r7, #36	@ 0x24
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr

08001e6e <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8001e6e:	b480      	push	{r7}
 8001e70:	b083      	sub	sp, #12
 8001e72:	af00      	add	r7, sp, #0
 8001e74:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.
  */
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	f423 4290 	bic.w	r2, r3, #18432	@ 0x4800
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	689b      	ldr	r3, [r3, #8]
 8001e86:	f023 022a 	bic.w	r2, r3, #42	@ 0x2a
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	609a      	str	r2, [r3, #8]
}
 8001e8e:	bf00      	nop
 8001e90:	370c      	adds	r7, #12
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr
	...

08001e9c <LL_AHB2_GRP1_EnableClock>:
{
 8001e9c:	b480      	push	{r7}
 8001e9e:	b085      	sub	sp, #20
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR1, Periphs);
 8001ea4:	4b0a      	ldr	r3, [pc, #40]	@ (8001ed0 <LL_AHB2_GRP1_EnableClock+0x34>)
 8001ea6:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8001eaa:	4909      	ldr	r1, [pc, #36]	@ (8001ed0 <LL_AHB2_GRP1_EnableClock+0x34>)
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  tmpreg = READ_BIT(RCC->AHB2ENR1, Periphs);
 8001eb4:	4b06      	ldr	r3, [pc, #24]	@ (8001ed0 <LL_AHB2_GRP1_EnableClock+0x34>)
 8001eb6:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001ec0:	68fb      	ldr	r3, [r7, #12]
}
 8001ec2:	bf00      	nop
 8001ec4:	3714      	adds	r7, #20
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr
 8001ece:	bf00      	nop
 8001ed0:	46020c00 	.word	0x46020c00

08001ed4 <LL_APB1_GRP1_EnableClock>:
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b085      	sub	sp, #20
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001edc:	4b0a      	ldr	r3, [pc, #40]	@ (8001f08 <LL_APB1_GRP1_EnableClock+0x34>)
 8001ede:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8001ee2:	4909      	ldr	r1, [pc, #36]	@ (8001f08 <LL_APB1_GRP1_EnableClock+0x34>)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001eec:	4b06      	ldr	r3, [pc, #24]	@ (8001f08 <LL_APB1_GRP1_EnableClock+0x34>)
 8001eee:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
}
 8001efa:	bf00      	nop
 8001efc:	3714      	adds	r7, #20
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr
 8001f06:	bf00      	nop
 8001f08:	46020c00 	.word	0x46020c00

08001f0c <LL_APB3_GRP1_EnableClock>:
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b085      	sub	sp, #20
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB3ENR, Periphs);
 8001f14:	4b0a      	ldr	r3, [pc, #40]	@ (8001f40 <LL_APB3_GRP1_EnableClock+0x34>)
 8001f16:	f8d3 20a8 	ldr.w	r2, [r3, #168]	@ 0xa8
 8001f1a:	4909      	ldr	r1, [pc, #36]	@ (8001f40 <LL_APB3_GRP1_EnableClock+0x34>)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	f8c1 30a8 	str.w	r3, [r1, #168]	@ 0xa8
  tmpreg = READ_BIT(RCC->APB3ENR, Periphs);
 8001f24:	4b06      	ldr	r3, [pc, #24]	@ (8001f40 <LL_APB3_GRP1_EnableClock+0x34>)
 8001f26:	f8d3 20a8 	ldr.w	r2, [r3, #168]	@ 0xa8
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001f30:	68fb      	ldr	r3, [r7, #12]
}
 8001f32:	bf00      	nop
 8001f34:	3714      	adds	r7, #20
 8001f36:	46bd      	mov	sp, r7
 8001f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3c:	4770      	bx	lr
 8001f3e:	bf00      	nop
 8001f40:	46020c00 	.word	0x46020c00

08001f44 <MX_LPUART1_UART_Init>:
/* USER CODE END 0 */

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b0be      	sub	sp, #248	@ 0xf8
 8001f48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LPUART1_Init 0 */

  /* USER CODE END LPUART1_Init 0 */

  LL_LPUART_InitTypeDef LPUART_InitStruct = {0};
 8001f4a:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8001f4e:	2200      	movs	r2, #0
 8001f50:	601a      	str	r2, [r3, #0]
 8001f52:	605a      	str	r2, [r3, #4]
 8001f54:	609a      	str	r2, [r3, #8]
 8001f56:	60da      	str	r2, [r3, #12]
 8001f58:	611a      	str	r2, [r3, #16]
 8001f5a:	615a      	str	r2, [r3, #20]
 8001f5c:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f5e:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 8001f62:	2200      	movs	r2, #0
 8001f64:	601a      	str	r2, [r3, #0]
 8001f66:	605a      	str	r2, [r3, #4]
 8001f68:	609a      	str	r2, [r3, #8]
 8001f6a:	60da      	str	r2, [r3, #12]
 8001f6c:	611a      	str	r2, [r3, #16]
 8001f6e:	615a      	str	r2, [r3, #20]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001f70:	463b      	mov	r3, r7
 8001f72:	22c0      	movs	r2, #192	@ 0xc0
 8001f74:	2100      	movs	r1, #0
 8001f76:	4618      	mov	r0, r3
 8001f78:	f007 f94b 	bl	8009212 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001f7c:	f04f 0220 	mov.w	r2, #32
 8001f80:	f04f 0300 	mov.w	r3, #0
 8001f84:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK3;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	667b      	str	r3, [r7, #100]	@ 0x64
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f8c:	463b      	mov	r3, r7
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f003 fd04 	bl	800599c <HAL_RCCEx_PeriphCLKConfig>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d001      	beq.n	8001f9e <MX_LPUART1_UART_Init+0x5a>
  {
    Error_Handler();
 8001f9a:	f7ff f8c1 	bl	8001120 <Error_Handler>
  }

  /* Peripheral clock enable */
  LL_APB3_GRP1_EnableClock(LL_APB3_GRP1_PERIPH_LPUART1);
 8001f9e:	2040      	movs	r0, #64	@ 0x40
 8001fa0:	f7ff ffb4 	bl	8001f0c <LL_APB3_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8001fa4:	2001      	movs	r0, #1
 8001fa6:	f7ff ff79 	bl	8001e9c <LL_AHB2_GRP1_EnableClock>
  /**LPUART1 GPIO Configuration
  PA2   ------> LPUART1_TX
  PA3   ------> LPUART1_RX
  */
  GPIO_InitStruct.Pin = PAYLOAD_TX_Pin|PAYLOAD_RX_Pin;
 8001faa:	230c      	movs	r3, #12
 8001fac:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001fb0:	2302      	movs	r3, #2
 8001fb2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 8001fc8:	2308      	movs	r3, #8
 8001fca:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fce:	f107 03c4 	add.w	r3, r7, #196	@ 0xc4
 8001fd2:	4619      	mov	r1, r3
 8001fd4:	481f      	ldr	r0, [pc, #124]	@ (8002054 <MX_LPUART1_UART_Init+0x110>)
 8001fd6:	f005 fe8f 	bl	8007cf8 <LL_GPIO_Init>

  /* LPUART1 interrupt Init */
  NVIC_SetPriority(LPUART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),6, 0));
 8001fda:	f7ff fde3 	bl	8001ba4 <__NVIC_GetPriorityGrouping>
 8001fde:	4603      	mov	r3, r0
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	2106      	movs	r1, #6
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f7ff fe33 	bl	8001c50 <NVIC_EncodePriority>
 8001fea:	4603      	mov	r3, r0
 8001fec:	4619      	mov	r1, r3
 8001fee:	2042      	movs	r0, #66	@ 0x42
 8001ff0:	f7ff fe04 	bl	8001bfc <__NVIC_SetPriority>
  NVIC_EnableIRQ(LPUART1_IRQn);
 8001ff4:	2042      	movs	r0, #66	@ 0x42
 8001ff6:	f7ff fde3 	bl	8001bc0 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  LPUART_InitStruct.PrescalerValue = LL_LPUART_PRESCALER_DIV64;
 8001ffa:	2309      	movs	r3, #9
 8001ffc:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  LPUART_InitStruct.BaudRate = 209700;
 8002000:	4b15      	ldr	r3, [pc, #84]	@ (8002058 <MX_LPUART1_UART_Init+0x114>)
 8002002:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  LPUART_InitStruct.DataWidth = LL_LPUART_DATAWIDTH_8B;
 8002006:	2300      	movs	r3, #0
 8002008:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  LPUART_InitStruct.StopBits = LL_LPUART_STOPBITS_1;
 800200c:	2300      	movs	r3, #0
 800200e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
  LPUART_InitStruct.Parity = LL_LPUART_PARITY_NONE;
 8002012:	2300      	movs	r3, #0
 8002014:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
  LPUART_InitStruct.TransferDirection = LL_LPUART_DIRECTION_TX_RX;
 8002018:	230c      	movs	r3, #12
 800201a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  LPUART_InitStruct.HardwareFlowControl = LL_LPUART_HWCONTROL_NONE;
 800201e:	2300      	movs	r3, #0
 8002020:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
  LL_LPUART_Init(LPUART1, &LPUART_InitStruct);
 8002024:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002028:	4619      	mov	r1, r3
 800202a:	480c      	ldr	r0, [pc, #48]	@ (800205c <MX_LPUART1_UART_Init+0x118>)
 800202c:	f005 ff7c 	bl	8007f28 <LL_LPUART_Init>
  LL_LPUART_SetTXFIFOThreshold(LPUART1, LL_LPUART_FIFOTHRESHOLD_1_8);
 8002030:	2100      	movs	r1, #0
 8002032:	480a      	ldr	r0, [pc, #40]	@ (800205c <MX_LPUART1_UART_Init+0x118>)
 8002034:	f7ff fe5f 	bl	8001cf6 <LL_LPUART_SetTXFIFOThreshold>
  LL_LPUART_SetRXFIFOThreshold(LPUART1, LL_LPUART_FIFOTHRESHOLD_1_8);
 8002038:	2100      	movs	r1, #0
 800203a:	4808      	ldr	r0, [pc, #32]	@ (800205c <MX_LPUART1_UART_Init+0x118>)
 800203c:	f7ff fe82 	bl	8001d44 <LL_LPUART_SetRXFIFOThreshold>
  LL_LPUART_DisableFIFO(LPUART1);
 8002040:	4806      	ldr	r0, [pc, #24]	@ (800205c <MX_LPUART1_UART_Init+0x118>)
 8002042:	f7ff fe48 	bl	8001cd6 <LL_LPUART_DisableFIFO>
  LL_LPUART_Enable(LPUART1);
 8002046:	4805      	ldr	r0, [pc, #20]	@ (800205c <MX_LPUART1_UART_Init+0x118>)
 8002048:	f7ff fe35 	bl	8001cb6 <LL_LPUART_Enable>
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800204c:	bf00      	nop
 800204e:	37f8      	adds	r7, #248	@ 0xf8
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}
 8002054:	42020000 	.word	0x42020000
 8002058:	00033324 	.word	0x00033324
 800205c:	46002400 	.word	0x46002400

08002060 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b0be      	sub	sp, #248	@ 0xf8
 8002064:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART3_Init 0 */

  /* USER CODE END USART3_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8002066:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 800206a:	2220      	movs	r2, #32
 800206c:	2100      	movs	r1, #0
 800206e:	4618      	mov	r0, r3
 8002070:	f007 f8cf 	bl	8009212 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002074:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8002078:	2200      	movs	r2, #0
 800207a:	601a      	str	r2, [r3, #0]
 800207c:	605a      	str	r2, [r3, #4]
 800207e:	609a      	str	r2, [r3, #8]
 8002080:	60da      	str	r2, [r3, #12]
 8002082:	611a      	str	r2, [r3, #16]
 8002084:	615a      	str	r2, [r3, #20]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002086:	463b      	mov	r3, r7
 8002088:	22c0      	movs	r2, #192	@ 0xc0
 800208a:	2100      	movs	r1, #0
 800208c:	4618      	mov	r0, r3
 800208e:	f007 f8c0 	bl	8009212 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002092:	f04f 0204 	mov.w	r2, #4
 8002096:	f04f 0300 	mov.w	r3, #0
 800209a:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800209e:	2300      	movs	r3, #0
 80020a0:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80020a2:	463b      	mov	r3, r7
 80020a4:	4618      	mov	r0, r3
 80020a6:	f003 fc79 	bl	800599c <HAL_RCCEx_PeriphCLKConfig>
 80020aa:	4603      	mov	r3, r0
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d001      	beq.n	80020b4 <MX_USART3_UART_Init+0x54>
  {
    Error_Handler();
 80020b0:	f7ff f836 	bl	8001120 <Error_Handler>
  }

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART3);
 80020b4:	f44f 2080 	mov.w	r0, #262144	@ 0x40000
 80020b8:	f7ff ff0c 	bl	8001ed4 <LL_APB1_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 80020bc:	2001      	movs	r0, #1
 80020be:	f7ff feed 	bl	8001e9c <LL_AHB2_GRP1_EnableClock>
  /**USART3 GPIO Configuration
  PA5   ------> USART3_RX
  PA7   ------> USART3_TX
  */
  GPIO_InitStruct.Pin = BM_SCK_RX3_Pin|BM_MOSI_TX3_Pin;
 80020c2:	23a0      	movs	r3, #160	@ 0xa0
 80020c4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80020c8:	2302      	movs	r3, #2
 80020ca:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80020ce:	2300      	movs	r3, #0
 80020d0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80020d4:	2300      	movs	r3, #0
 80020d6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80020da:	2300      	movs	r3, #0
 80020dc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 80020e0:	2307      	movs	r3, #7
 80020e2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020e6:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 80020ea:	4619      	mov	r1, r3
 80020ec:	4823      	ldr	r0, [pc, #140]	@ (800217c <MX_USART3_UART_Init+0x11c>)
 80020ee:	f005 fe03 	bl	8007cf8 <LL_GPIO_Init>

  /* USART3 interrupt Init */
  NVIC_SetPriority(USART3_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),6, 0));
 80020f2:	f7ff fd57 	bl	8001ba4 <__NVIC_GetPriorityGrouping>
 80020f6:	4603      	mov	r3, r0
 80020f8:	2200      	movs	r2, #0
 80020fa:	2106      	movs	r1, #6
 80020fc:	4618      	mov	r0, r3
 80020fe:	f7ff fda7 	bl	8001c50 <NVIC_EncodePriority>
 8002102:	4603      	mov	r3, r0
 8002104:	4619      	mov	r1, r3
 8002106:	203f      	movs	r0, #63	@ 0x3f
 8002108:	f7ff fd78 	bl	8001bfc <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART3_IRQn);
 800210c:	203f      	movs	r0, #63	@ 0x3f
 800210e:	f7ff fd57 	bl	8001bc0 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  USART_InitStruct.PrescalerValue = LL_USART_PRESCALER_DIV1;
 8002112:	2300      	movs	r3, #0
 8002114:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  USART_InitStruct.BaudRate = 115200;
 8002118:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 800211c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8002120:	2300      	movs	r3, #0
 8002122:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8002126:	2300      	movs	r3, #0
 8002128:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 800212c:	2300      	movs	r3, #0
 800212e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8002132:	230c      	movs	r3, #12
 8002134:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8002138:	2300      	movs	r3, #0
 800213a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 800213e:	2300      	movs	r3, #0
 8002140:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
  LL_USART_Init(USART3, &USART_InitStruct);
 8002144:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 8002148:	4619      	mov	r1, r3
 800214a:	480d      	ldr	r0, [pc, #52]	@ (8002180 <MX_USART3_UART_Init+0x120>)
 800214c:	f006 fd28 	bl	8008ba0 <LL_USART_Init>
  LL_USART_SetTXFIFOThreshold(USART3, LL_USART_FIFOTHRESHOLD_1_8);
 8002150:	2100      	movs	r1, #0
 8002152:	480b      	ldr	r0, [pc, #44]	@ (8002180 <MX_USART3_UART_Init+0x120>)
 8002154:	f7ff fe3d 	bl	8001dd2 <LL_USART_SetTXFIFOThreshold>
  LL_USART_SetRXFIFOThreshold(USART3, LL_USART_FIFOTHRESHOLD_1_8);
 8002158:	2100      	movs	r1, #0
 800215a:	4809      	ldr	r0, [pc, #36]	@ (8002180 <MX_USART3_UART_Init+0x120>)
 800215c:	f7ff fe60 	bl	8001e20 <LL_USART_SetRXFIFOThreshold>
  LL_USART_DisableFIFO(USART3);
 8002160:	4807      	ldr	r0, [pc, #28]	@ (8002180 <MX_USART3_UART_Init+0x120>)
 8002162:	f7ff fe26 	bl	8001db2 <LL_USART_DisableFIFO>
  LL_USART_ConfigAsyncMode(USART3);
 8002166:	4806      	ldr	r0, [pc, #24]	@ (8002180 <MX_USART3_UART_Init+0x120>)
 8002168:	f7ff fe81 	bl	8001e6e <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART3);
 800216c:	4804      	ldr	r0, [pc, #16]	@ (8002180 <MX_USART3_UART_Init+0x120>)
 800216e:	f7ff fe10 	bl	8001d92 <LL_USART_Enable>
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002172:	bf00      	nop
 8002174:	37f8      	adds	r7, #248	@ 0xf8
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}
 800217a:	bf00      	nop
 800217c:	42020000 	.word	0x42020000
 8002180:	40004800 	.word	0x40004800

08002184 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8002188:	4b15      	ldr	r3, [pc, #84]	@ (80021e0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800218a:	4a16      	ldr	r2, [pc, #88]	@ (80021e4 <MX_USB_OTG_FS_PCD_Init+0x60>)
 800218c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800218e:	4b14      	ldr	r3, [pc, #80]	@ (80021e0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002190:	2206      	movs	r2, #6
 8002192:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8002194:	4b12      	ldr	r3, [pc, #72]	@ (80021e0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002196:	2202      	movs	r2, #2
 8002198:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800219a:	4b11      	ldr	r3, [pc, #68]	@ (80021e0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800219c:	2202      	movs	r2, #2
 800219e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80021a0:	4b0f      	ldr	r3, [pc, #60]	@ (80021e0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80021a2:	2200      	movs	r2, #0
 80021a4:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80021a6:	4b0e      	ldr	r3, [pc, #56]	@ (80021e0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80021a8:	2200      	movs	r2, #0
 80021aa:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80021ac:	4b0c      	ldr	r3, [pc, #48]	@ (80021e0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80021ae:	2200      	movs	r2, #0
 80021b0:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 80021b2:	4b0b      	ldr	r3, [pc, #44]	@ (80021e0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80021b8:	4b09      	ldr	r3, [pc, #36]	@ (80021e0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80021ba:	2200      	movs	r2, #0
 80021bc:	73da      	strb	r2, [r3, #15]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80021be:	4b08      	ldr	r3, [pc, #32]	@ (80021e0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80021c4:	4b06      	ldr	r3, [pc, #24]	@ (80021e0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	719a      	strb	r2, [r3, #6]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80021ca:	4805      	ldr	r0, [pc, #20]	@ (80021e0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80021cc:	f001 fee2 	bl	8003f94 <HAL_PCD_Init>
 80021d0:	4603      	mov	r3, r0
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d001      	beq.n	80021da <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 80021d6:	f7fe ffa3 	bl	8001120 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80021da:	bf00      	nop
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	200004ac 	.word	0x200004ac
 80021e4:	42040000 	.word	0x42040000

080021e8 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b0bc      	sub	sp, #240	@ 0xf0
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021f0:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80021f4:	2200      	movs	r2, #0
 80021f6:	601a      	str	r2, [r3, #0]
 80021f8:	605a      	str	r2, [r3, #4]
 80021fa:	609a      	str	r2, [r3, #8]
 80021fc:	60da      	str	r2, [r3, #12]
 80021fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002200:	f107 0318 	add.w	r3, r7, #24
 8002204:	22c0      	movs	r2, #192	@ 0xc0
 8002206:	2100      	movs	r1, #0
 8002208:	4618      	mov	r0, r3
 800220a:	f007 f802 	bl	8009212 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a38      	ldr	r2, [pc, #224]	@ (80022f4 <HAL_PCD_MspInit+0x10c>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d169      	bne.n	80022ec <HAL_PCD_MspInit+0x104>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8002218:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800221c:	f04f 0300 	mov.w	r3, #0
 8002220:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.IclkClockSelection = RCC_CLK48CLKSOURCE_HSI48;
 8002224:	2300      	movs	r3, #0
 8002226:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800222a:	f107 0318 	add.w	r3, r7, #24
 800222e:	4618      	mov	r0, r3
 8002230:	f003 fbb4 	bl	800599c <HAL_RCCEx_PeriphCLKConfig>
 8002234:	4603      	mov	r3, r0
 8002236:	2b00      	cmp	r3, #0
 8002238:	d001      	beq.n	800223e <HAL_PCD_MspInit+0x56>
    {
      Error_Handler();
 800223a:	f7fe ff71 	bl	8001120 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800223e:	4b2e      	ldr	r3, [pc, #184]	@ (80022f8 <HAL_PCD_MspInit+0x110>)
 8002240:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002244:	4a2c      	ldr	r2, [pc, #176]	@ (80022f8 <HAL_PCD_MspInit+0x110>)
 8002246:	f043 0301 	orr.w	r3, r3, #1
 800224a:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 800224e:	4b2a      	ldr	r3, [pc, #168]	@ (80022f8 <HAL_PCD_MspInit+0x110>)
 8002250:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002254:	f003 0301 	and.w	r3, r3, #1
 8002258:	617b      	str	r3, [r7, #20]
 800225a:	697b      	ldr	r3, [r7, #20]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800225c:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8002260:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002264:	2302      	movs	r3, #2
 8002266:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800226a:	2300      	movs	r3, #0
 800226c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002270:	2300      	movs	r3, #0
 8002272:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8002276:	230a      	movs	r3, #10
 8002278:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800227c:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8002280:	4619      	mov	r1, r3
 8002282:	481e      	ldr	r0, [pc, #120]	@ (80022fc <HAL_PCD_MspInit+0x114>)
 8002284:	f001 fb4c 	bl	8003920 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8002288:	4b1b      	ldr	r3, [pc, #108]	@ (80022f8 <HAL_PCD_MspInit+0x110>)
 800228a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800228e:	4a1a      	ldr	r2, [pc, #104]	@ (80022f8 <HAL_PCD_MspInit+0x110>)
 8002290:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002294:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8002298:	4b17      	ldr	r3, [pc, #92]	@ (80022f8 <HAL_PCD_MspInit+0x110>)
 800229a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800229e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80022a2:	613b      	str	r3, [r7, #16]
 80022a4:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022a6:	4b14      	ldr	r3, [pc, #80]	@ (80022f8 <HAL_PCD_MspInit+0x110>)
 80022a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80022ac:	f003 0304 	and.w	r3, r3, #4
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d119      	bne.n	80022e8 <HAL_PCD_MspInit+0x100>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022b4:	4b10      	ldr	r3, [pc, #64]	@ (80022f8 <HAL_PCD_MspInit+0x110>)
 80022b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80022ba:	4a0f      	ldr	r2, [pc, #60]	@ (80022f8 <HAL_PCD_MspInit+0x110>)
 80022bc:	f043 0304 	orr.w	r3, r3, #4
 80022c0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80022c4:	4b0c      	ldr	r3, [pc, #48]	@ (80022f8 <HAL_PCD_MspInit+0x110>)
 80022c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80022ca:	f003 0304 	and.w	r3, r3, #4
 80022ce:	60fb      	str	r3, [r7, #12]
 80022d0:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 80022d2:	f002 f887 	bl	80043e4 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 80022d6:	4b08      	ldr	r3, [pc, #32]	@ (80022f8 <HAL_PCD_MspInit+0x110>)
 80022d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80022dc:	4a06      	ldr	r2, [pc, #24]	@ (80022f8 <HAL_PCD_MspInit+0x110>)
 80022de:	f023 0304 	bic.w	r3, r3, #4
 80022e2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80022e6:	e001      	b.n	80022ec <HAL_PCD_MspInit+0x104>
      HAL_PWREx_EnableVddUSB();
 80022e8:	f002 f87c 	bl	80043e4 <HAL_PWREx_EnableVddUSB>
}
 80022ec:	bf00      	nop
 80022ee:	37f0      	adds	r7, #240	@ 0xf0
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	42040000 	.word	0x42040000
 80022f8:	46020c00 	.word	0x46020c00
 80022fc:	42020000 	.word	0x42020000

08002300 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8002300:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002338 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002304:	f7ff fc16 	bl	8001b34 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002308:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800230a:	e003      	b.n	8002314 <LoopCopyDataInit>

0800230c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800230c:	4b0b      	ldr	r3, [pc, #44]	@ (800233c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800230e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002310:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002312:	3104      	adds	r1, #4

08002314 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002314:	480a      	ldr	r0, [pc, #40]	@ (8002340 <LoopForever+0xa>)
	ldr	r3, =_edata
 8002316:	4b0b      	ldr	r3, [pc, #44]	@ (8002344 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002318:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800231a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800231c:	d3f6      	bcc.n	800230c <CopyDataInit>
	ldr	r2, =_sbss
 800231e:	4a0a      	ldr	r2, [pc, #40]	@ (8002348 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002320:	e002      	b.n	8002328 <LoopFillZerobss>

08002322 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002322:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002324:	f842 3b04 	str.w	r3, [r2], #4

08002328 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002328:	4b08      	ldr	r3, [pc, #32]	@ (800234c <LoopForever+0x16>)
	cmp	r2, r3
 800232a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800232c:	d3f9      	bcc.n	8002322 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800232e:	f006 ff79 	bl	8009224 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002332:	f7fe fe3b 	bl	8000fac <main>

08002336 <LoopForever>:

LoopForever:
    b LoopForever
 8002336:	e7fe      	b.n	8002336 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8002338:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 800233c:	080093b4 	.word	0x080093b4
	ldr	r0, =_sdata
 8002340:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002344:	20000009 	.word	0x20000009
	ldr	r2, =_sbss
 8002348:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 800234c:	20000994 	.word	0x20000994

08002350 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002350:	e7fe      	b.n	8002350 <ADC1_IRQHandler>
	...

08002354 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002358:	4b12      	ldr	r3, [pc, #72]	@ (80023a4 <HAL_Init+0x50>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a11      	ldr	r2, [pc, #68]	@ (80023a4 <HAL_Init+0x50>)
 800235e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002362:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002364:	2003      	movs	r0, #3
 8002366:	f000 fcde 	bl	8002d26 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800236a:	f003 f929 	bl	80055c0 <HAL_RCC_GetSysClockFreq>
 800236e:	4602      	mov	r2, r0
 8002370:	4b0d      	ldr	r3, [pc, #52]	@ (80023a8 <HAL_Init+0x54>)
 8002372:	6a1b      	ldr	r3, [r3, #32]
 8002374:	f003 030f 	and.w	r3, r3, #15
 8002378:	490c      	ldr	r1, [pc, #48]	@ (80023ac <HAL_Init+0x58>)
 800237a:	5ccb      	ldrb	r3, [r1, r3]
 800237c:	fa22 f303 	lsr.w	r3, r2, r3
 8002380:	4a0b      	ldr	r2, [pc, #44]	@ (80023b0 <HAL_Init+0x5c>)
 8002382:	6013      	str	r3, [r2, #0]

  /* Select HCLK as SysTick clock source */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8002384:	2004      	movs	r0, #4
 8002386:	f000 fd01 	bl	8002d8c <HAL_SYSTICK_CLKSourceConfig>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800238a:	200f      	movs	r0, #15
 800238c:	f7ff fa90 	bl	80018b0 <HAL_InitTick>
 8002390:	4603      	mov	r3, r0
 8002392:	2b00      	cmp	r3, #0
 8002394:	d001      	beq.n	800239a <HAL_Init+0x46>
  {
    return HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	e002      	b.n	80023a0 <HAL_Init+0x4c>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800239a:	f7ff fa6f 	bl	800187c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800239e:	2300      	movs	r3, #0
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	bd80      	pop	{r7, pc}
 80023a4:	40022000 	.word	0x40022000
 80023a8:	46020c00 	.word	0x46020c00
 80023ac:	08009284 	.word	0x08009284
 80023b0:	20000000 	.word	0x20000000

080023b4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023b4:	b480      	push	{r7}
 80023b6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80023b8:	4b06      	ldr	r3, [pc, #24]	@ (80023d4 <HAL_IncTick+0x20>)
 80023ba:	781b      	ldrb	r3, [r3, #0]
 80023bc:	461a      	mov	r2, r3
 80023be:	4b06      	ldr	r3, [pc, #24]	@ (80023d8 <HAL_IncTick+0x24>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4413      	add	r3, r2
 80023c4:	4a04      	ldr	r2, [pc, #16]	@ (80023d8 <HAL_IncTick+0x24>)
 80023c6:	6013      	str	r3, [r2, #0]
}
 80023c8:	bf00      	nop
 80023ca:	46bd      	mov	sp, r7
 80023cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d0:	4770      	bx	lr
 80023d2:	bf00      	nop
 80023d4:	20000008 	.word	0x20000008
 80023d8:	20000990 	.word	0x20000990

080023dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023dc:	b480      	push	{r7}
 80023de:	af00      	add	r7, sp, #0
  return uwTick;
 80023e0:	4b03      	ldr	r3, [pc, #12]	@ (80023f0 <HAL_GetTick+0x14>)
 80023e2:	681b      	ldr	r3, [r3, #0]
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	46bd      	mov	sp, r7
 80023e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ec:	4770      	bx	lr
 80023ee:	bf00      	nop
 80023f0:	20000990 	.word	0x20000990

080023f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b084      	sub	sp, #16
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023fc:	f7ff ffee 	bl	80023dc <HAL_GetTick>
 8002400:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800240c:	d005      	beq.n	800241a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800240e:	4b0a      	ldr	r3, [pc, #40]	@ (8002438 <HAL_Delay+0x44>)
 8002410:	781b      	ldrb	r3, [r3, #0]
 8002412:	461a      	mov	r2, r3
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	4413      	add	r3, r2
 8002418:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800241a:	bf00      	nop
 800241c:	f7ff ffde 	bl	80023dc <HAL_GetTick>
 8002420:	4602      	mov	r2, r0
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	1ad3      	subs	r3, r2, r3
 8002426:	68fa      	ldr	r2, [r7, #12]
 8002428:	429a      	cmp	r2, r3
 800242a:	d8f7      	bhi.n	800241c <HAL_Delay+0x28>
  {
  }
}
 800242c:	bf00      	nop
 800242e:	bf00      	nop
 8002430:	3710      	adds	r7, #16
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}
 8002436:	bf00      	nop
 8002438:	20000008 	.word	0x20000008

0800243c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800243c:	b480      	push	{r7}
 800243e:	b083      	sub	sp, #12
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
 8002444:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_PRESC, CommonClock);
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	431a      	orrs	r2, r3
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	601a      	str	r2, [r3, #0]
}
 8002456:	bf00      	nop
 8002458:	370c      	adds	r7, #12
 800245a:	46bd      	mov	sp, r7
 800245c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002460:	4770      	bx	lr
	...

08002464 <LL_ADC_SetResolution>:
  *         (1): Specific to ADC instance: ADC1, ADC2
  *         (2): Specific to ADC instance: ADC4
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetResolution(ADC_TypeDef *ADCx, uint32_t Resolution)
{
 8002464:	b480      	push	{r7}
 8002466:	b085      	sub	sp, #20
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
 800246c:	6039      	str	r1, [r7, #0]
  uint32_t tmp_resolution = Resolution;
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	60fb      	str	r3, [r7, #12]
  if (ADCx == ADC4)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	4a0a      	ldr	r2, [pc, #40]	@ (80024a0 <LL_ADC_SetResolution+0x3c>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d104      	bne.n	8002484 <LL_ADC_SetResolution+0x20>
  {
    tmp_resolution = ((tmp_resolution - ADC_RESOLUTION_ADC4_PROCESSING) & ADC_CFGR1_RES);
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	3b01      	subs	r3, #1
 800247e:	f003 030c 	and.w	r3, r3, #12
 8002482:	60fb      	str	r3, [r7, #12]
  }

  MODIFY_REG(ADCx->CFGR1, ADC_CFGR1_RES, tmp_resolution);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	f023 020c 	bic.w	r2, r3, #12
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	431a      	orrs	r2, r3
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	60da      	str	r2, [r3, #12]
}
 8002494:	bf00      	nop
 8002496:	3714      	adds	r7, #20
 8002498:	46bd      	mov	sp, r7
 800249a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249e:	4770      	bx	lr
 80024a0:	46021000 	.word	0x46021000

080024a4 <LL_ADC_SetGainCompensation>:
  *         0           Gain compensation will be disabled and value set to 0
  *         1 -> 16393  Gain compensation will be enabled with specified value
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetGainCompensation(ADC_TypeDef *ADCx, uint32_t GainCompensation)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b083      	sub	sp, #12
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
 80024ac:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMPCOEFF, GainCompensation);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024b2:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80024b6:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80024ba:	683a      	ldr	r2, [r7, #0]
 80024bc:	431a      	orrs	r2, r3
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	671a      	str	r2, [r3, #112]	@ 0x70
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMP, ((GainCompensation == 0UL) ? 0UL : 1UL) << ADC_GCOMP_GCOMP_Pos);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024c6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80024ca:	683a      	ldr	r2, [r7, #0]
 80024cc:	2a00      	cmp	r2, #0
 80024ce:	d002      	beq.n	80024d6 <LL_ADC_SetGainCompensation+0x32>
 80024d0:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80024d4:	e000      	b.n	80024d8 <LL_ADC_SetGainCompensation+0x34>
 80024d6:	2200      	movs	r2, #0
 80024d8:	431a      	orrs	r2, r3
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	671a      	str	r2, [r3, #112]	@ 0x70
}
 80024de:	bf00      	nop
 80024e0:	370c      	adds	r7, #12
 80024e2:	46bd      	mov	sp, r7
 80024e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e8:	4770      	bx	lr

080024ea <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC4_SAMPLINGTIME_814CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 80024ea:	b480      	push	{r7}
 80024ec:	b085      	sub	sp, #20
 80024ee:	af00      	add	r7, sp, #0
 80024f0:	60f8      	str	r0, [r7, #12]
 80024f2:	60b9      	str	r1, [r7, #8]
 80024f4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR1,
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	695a      	ldr	r2, [r3, #20]
 80024fa:	68bb      	ldr	r3, [r7, #8]
 80024fc:	f003 0304 	and.w	r3, r3, #4
 8002500:	2107      	movs	r1, #7
 8002502:	fa01 f303 	lsl.w	r3, r1, r3
 8002506:	43db      	mvns	r3, r3
 8002508:	401a      	ands	r2, r3
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	f003 0304 	and.w	r3, r3, #4
 8002510:	6879      	ldr	r1, [r7, #4]
 8002512:	fa01 f303 	lsl.w	r3, r1, r3
 8002516:	431a      	orrs	r2, r3
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	615a      	str	r2, [r3, #20]
             ADC4_SMPR_SMP1 << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC4_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 800251c:	bf00      	nop
 800251e:	3714      	adds	r7, #20
 8002520:	46bd      	mov	sp, r7
 8002522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002526:	4770      	bx	lr

08002528 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002528:	b480      	push	{r7}
 800252a:	b083      	sub	sp, #12
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002538:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800253c:	687a      	ldr	r2, [r7, #4]
 800253e:	6093      	str	r3, [r2, #8]
}
 8002540:	bf00      	nop
 8002542:	370c      	adds	r7, #12
 8002544:	46bd      	mov	sp, r7
 8002546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254a:	4770      	bx	lr

0800254c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800254c:	b480      	push	{r7}
 800254e:	b083      	sub	sp, #12
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800255c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002560:	d101      	bne.n	8002566 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002562:	2301      	movs	r3, #1
 8002564:	e000      	b.n	8002568 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002566:	2300      	movs	r3, #0
}
 8002568:	4618      	mov	r0, r3
 800256a:	370c      	adds	r7, #12
 800256c:	46bd      	mov	sp, r7
 800256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002572:	4770      	bx	lr

08002574 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002574:	b480      	push	{r7}
 8002576:	b083      	sub	sp, #12
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR, ADC_CR_BITS_PROPERTY_RS, ADC_CR_ADVREGEN);
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002584:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002588:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	609a      	str	r2, [r3, #8]
}
 8002590:	bf00      	nop
 8002592:	370c      	adds	r7, #12
 8002594:	46bd      	mov	sp, r7
 8002596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259a:	4770      	bx	lr

0800259c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 800259c:	b480      	push	{r7}
 800259e:	b083      	sub	sp, #12
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025ac:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80025b0:	d101      	bne.n	80025b6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80025b2:	2301      	movs	r3, #1
 80025b4:	e000      	b.n	80025b8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80025b6:	2300      	movs	r3, #0
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	370c      	adds	r7, #12
 80025bc:	46bd      	mov	sp, r7
 80025be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c2:	4770      	bx	lr

080025c4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b083      	sub	sp, #12
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	689b      	ldr	r3, [r3, #8]
 80025d0:	f003 0301 	and.w	r3, r3, #1
 80025d4:	2b01      	cmp	r3, #1
 80025d6:	d101      	bne.n	80025dc <LL_ADC_IsEnabled+0x18>
 80025d8:	2301      	movs	r3, #1
 80025da:	e000      	b.n	80025de <LL_ADC_IsEnabled+0x1a>
 80025dc:	2300      	movs	r3, #0
}
 80025de:	4618      	mov	r0, r3
 80025e0:	370c      	adds	r7, #12
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr

080025ea <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80025ea:	b480      	push	{r7}
 80025ec:	b083      	sub	sp, #12
 80025ee:	af00      	add	r7, sp, #0
 80025f0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	689b      	ldr	r3, [r3, #8]
 80025f6:	f003 0304 	and.w	r3, r3, #4
 80025fa:	2b04      	cmp	r3, #4
 80025fc:	d101      	bne.n	8002602 <LL_ADC_REG_IsConversionOngoing+0x18>
 80025fe:	2301      	movs	r3, #1
 8002600:	e000      	b.n	8002604 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002602:	2300      	movs	r3, #0
}
 8002604:	4618      	mov	r0, r3
 8002606:	370c      	adds	r7, #12
 8002608:	46bd      	mov	sp, r7
 800260a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260e:	4770      	bx	lr

08002610 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002610:	b480      	push	{r7}
 8002612:	b083      	sub	sp, #12
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	f003 0308 	and.w	r3, r3, #8
 8002620:	2b08      	cmp	r3, #8
 8002622:	d101      	bne.n	8002628 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002624:	2301      	movs	r3, #1
 8002626:	e000      	b.n	800262a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002628:	2300      	movs	r3, #0
}
 800262a:	4618      	mov	r0, r3
 800262c:	370c      	adds	r7, #12
 800262e:	46bd      	mov	sp, r7
 8002630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002634:	4770      	bx	lr
	...

08002638 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b08a      	sub	sp, #40	@ 0x28
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002640:	2300      	movs	r3, #0
 8002642:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t tmpCFGR1 = 0UL;
 8002646:	2300      	movs	r3, #0
 8002648:	623b      	str	r3, [r7, #32]
  uint32_t tmpCFGR2 = 0UL;
 800264a:	2300      	movs	r3, #0
 800264c:	61fb      	str	r3, [r7, #28]
  __IO uint32_t wait_loop_index;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d101      	bne.n	8002658 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8002654:	2301      	movs	r3, #1
 8002656:	e2b3      	b.n	8002bc0 <HAL_ADC_Init+0x588>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	691b      	ldr	r3, [r3, #16]
 800265c:	2b00      	cmp	r3, #0
 800265e:	d003      	beq.n	8002668 <HAL_ADC_Init+0x30>
  {
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a8b      	ldr	r2, [pc, #556]	@ (8002894 <HAL_ADC_Init+0x25c>)
 8002666:	4293      	cmp	r3, r2
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800266c:	2b00      	cmp	r3, #0
 800266e:	d109      	bne.n	8002684 <HAL_ADC_Init+0x4c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002670:	6878      	ldr	r0, [r7, #4]
 8002672:	f7fd ffd1 	bl	8000618 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2200      	movs	r2, #0
 800267a:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2200      	movs	r2, #0
 8002680:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4618      	mov	r0, r3
 800268a:	f7ff ff5f 	bl	800254c <LL_ADC_IsDeepPowerDownEnabled>
 800268e:	4603      	mov	r3, r0
 8002690:	2b00      	cmp	r3, #0
 8002692:	d004      	beq.n	800269e <HAL_ADC_Init+0x66>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4618      	mov	r0, r3
 800269a:	f7ff ff45 	bl	8002528 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4618      	mov	r0, r3
 80026a4:	f7ff ff7a 	bl	800259c <LL_ADC_IsInternalRegulatorEnabled>
 80026a8:	4603      	mov	r3, r0
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d115      	bne.n	80026da <HAL_ADC_Init+0xa2>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4618      	mov	r0, r3
 80026b4:	f7ff ff5e 	bl	8002574 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80026b8:	4b77      	ldr	r3, [pc, #476]	@ (8002898 <HAL_ADC_Init+0x260>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	099b      	lsrs	r3, r3, #6
 80026be:	4a77      	ldr	r2, [pc, #476]	@ (800289c <HAL_ADC_Init+0x264>)
 80026c0:	fba2 2303 	umull	r2, r3, r2, r3
 80026c4:	099b      	lsrs	r3, r3, #6
 80026c6:	3301      	adds	r3, #1
 80026c8:	005b      	lsls	r3, r3, #1
 80026ca:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80026cc:	e002      	b.n	80026d4 <HAL_ADC_Init+0x9c>
    {
      wait_loop_index--;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	3b01      	subs	r3, #1
 80026d2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d1f9      	bne.n	80026ce <HAL_ADC_Init+0x96>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4618      	mov	r0, r3
 80026e0:	f7ff ff5c 	bl	800259c <LL_ADC_IsInternalRegulatorEnabled>
 80026e4:	4603      	mov	r3, r0
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d10e      	bne.n	8002708 <HAL_ADC_Init+0xd0>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80026ee:	f043 0210 	orr.w	r2, r3, #16
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80026fa:	f043 0201 	orr.w	r2, r3, #1
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	67da      	str	r2, [r3, #124]	@ 0x7c

    tmp_hal_status = HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4618      	mov	r0, r3
 800270e:	f7ff ff6c 	bl	80025ea <LL_ADC_REG_IsConversionOngoing>
 8002712:	61b8      	str	r0, [r7, #24]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002718:	f003 0310 	and.w	r3, r3, #16
 800271c:	2b00      	cmp	r3, #0
 800271e:	f040 8244 	bne.w	8002baa <HAL_ADC_Init+0x572>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002722:	69bb      	ldr	r3, [r7, #24]
 8002724:	2b00      	cmp	r3, #0
 8002726:	f040 8240 	bne.w	8002baa <HAL_ADC_Init+0x572>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800272e:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002732:	f043 0202 	orr.w	r2, r3, #2
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	679a      	str	r2, [r3, #120]	@ 0x78
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4618      	mov	r0, r3
 8002740:	f7ff ff40 	bl	80025c4 <LL_ADC_IsEnabled>
 8002744:	4603      	mov	r3, r0
 8002746:	2b00      	cmp	r3, #0
 8002748:	d140      	bne.n	80027cc <HAL_ADC_Init+0x194>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	4a51      	ldr	r2, [pc, #324]	@ (8002894 <HAL_ADC_Init+0x25c>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d028      	beq.n	80027a6 <HAL_ADC_Init+0x16e>
      {
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a51      	ldr	r2, [pc, #324]	@ (80028a0 <HAL_ADC_Init+0x268>)
 800275a:	4293      	cmp	r3, r2
 800275c:	d109      	bne.n	8002772 <HAL_ADC_Init+0x13a>
 800275e:	4850      	ldr	r0, [pc, #320]	@ (80028a0 <HAL_ADC_Init+0x268>)
 8002760:	f7ff ff30 	bl	80025c4 <LL_ADC_IsEnabled>
 8002764:	4603      	mov	r3, r0
 8002766:	2b00      	cmp	r3, #0
 8002768:	bf0c      	ite	eq
 800276a:	2301      	moveq	r3, #1
 800276c:	2300      	movne	r3, #0
 800276e:	b2db      	uxtb	r3, r3
 8002770:	e008      	b.n	8002784 <HAL_ADC_Init+0x14c>
 8002772:	4848      	ldr	r0, [pc, #288]	@ (8002894 <HAL_ADC_Init+0x25c>)
 8002774:	f7ff ff26 	bl	80025c4 <LL_ADC_IsEnabled>
 8002778:	4603      	mov	r3, r0
 800277a:	2b00      	cmp	r3, #0
 800277c:	bf0c      	ite	eq
 800277e:	2301      	moveq	r3, #1
 8002780:	2300      	movne	r3, #0
 8002782:	b2db      	uxtb	r3, r3
 8002784:	2b00      	cmp	r3, #0
 8002786:	d021      	beq.n	80027cc <HAL_ADC_Init+0x194>
          /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
          /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
          /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
          /*     (set into HAL_ADC_ConfigChannel() or                             */
          /*     HAL_ADCEx_InjectedConfigChannel() )                              */
          LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a44      	ldr	r2, [pc, #272]	@ (80028a0 <HAL_ADC_Init+0x268>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d101      	bne.n	8002796 <HAL_ADC_Init+0x15e>
 8002792:	4a44      	ldr	r2, [pc, #272]	@ (80028a4 <HAL_ADC_Init+0x26c>)
 8002794:	e000      	b.n	8002798 <HAL_ADC_Init+0x160>
 8002796:	4a44      	ldr	r2, [pc, #272]	@ (80028a8 <HAL_ADC_Init+0x270>)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	4619      	mov	r1, r3
 800279e:	4610      	mov	r0, r2
 80027a0:	f7ff fe4c 	bl	800243c <LL_ADC_SetCommonClock>
 80027a4:	e012      	b.n	80027cc <HAL_ADC_Init+0x194>
        /* parameters):                                                         */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() )                              */

        /* Configuration of ADC resolution                                      */
        LL_ADC_SetResolution(hadc->Instance, hadc->Init.Resolution);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	4619      	mov	r1, r3
 80027b0:	4610      	mov	r0, r2
 80027b2:	f7ff fe57 	bl	8002464 <LL_ADC_SetResolution>

        /* Configuration of ADC clock mode: clock source AHB or HSI with        */
        /* selectable prescaler.                                                */
        MODIFY_REG(ADC4_COMMON->CCR,
 80027b6:	4b3c      	ldr	r3, [pc, #240]	@ (80028a8 <HAL_ADC_Init+0x270>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f423 1270 	bic.w	r2, r3, #3932160	@ 0x3c0000
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	f403 1370 	and.w	r3, r3, #3932160	@ 0x3c0000
 80027c6:	4938      	ldr	r1, [pc, #224]	@ (80028a8 <HAL_ADC_Init+0x270>)
 80027c8:	4313      	orrs	r3, r2
 80027ca:	600b      	str	r3, [r1, #0]
                   ADC_CCR_PRESC,
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a30      	ldr	r2, [pc, #192]	@ (8002894 <HAL_ADC_Init+0x25c>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d010      	beq.n	80027f8 <HAL_ADC_Init+0x1c0>
      /*  - overrun                                  Init.Overrun               */
      /*  - discontinuous mode                       Init.DiscontinuousConvMode */
      /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */

      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80027dc:	035a      	lsls	r2, r3, #13
                    hadc->Init.Overrun                                                    |
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
                    ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)         |
 80027e2:	431a      	orrs	r2, r3
                    hadc->Init.Resolution                                                 |
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	689b      	ldr	r3, [r3, #8]
                    hadc->Init.Overrun                                                    |
 80027e8:	431a      	orrs	r2, r3
                    ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80027f0:	041b      	lsls	r3, r3, #16
      tmpCFGR1  = (/*ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)             |*/
 80027f2:	4313      	orrs	r3, r2
 80027f4:	623b      	str	r3, [r7, #32]
 80027f6:	e030      	b.n	800285a <HAL_ADC_Init+0x222>
      /*  - external trigger polarity                                           */
      /*  - data alignment                                                      */
      /*  - resolution                                                          */
      /*  - scan direction                                                      */
      /*  - DMA continuous request                                              */
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	7f1b      	ldrb	r3, [r3, #28]
 80027fc:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002804:	035b      	lsls	r3, r3, #13
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002806:	4313      	orrs	r3, r2
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 8002808:	687a      	ldr	r2, [r7, #4]
 800280a:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 800280c:	2a00      	cmp	r2, #0
 800280e:	d002      	beq.n	8002816 <HAL_ADC_Init+0x1de>
 8002810:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002814:	e000      	b.n	8002818 <HAL_ADC_Init+0x1e0>
 8002816:	2200      	movs	r2, #0
                   ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002818:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                            |
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	695b      	ldr	r3, [r3, #20]
                   ADC_CFGR_OVERRUN(hadc->Init.Overrun)                            |
 800281e:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	691b      	ldr	r3, [r3, #16]
 8002824:	2b00      	cmp	r3, #0
 8002826:	da04      	bge.n	8002832 <HAL_ADC_Init+0x1fa>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	691b      	ldr	r3, [r3, #16]
 800282c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002830:	e001      	b.n	8002836 <HAL_ADC_Init+0x1fe>
 8002832:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
                   hadc->Init.DataAlign                                            |
 8002836:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.DMAContinuousRequests));
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4918      	ldr	r1, [pc, #96]	@ (80028a0 <HAL_ADC_Init+0x268>)
 800283e:	428b      	cmp	r3, r1
 8002840:	d103      	bne.n	800284a <HAL_ADC_Init+0x212>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002848:	e003      	b.n	8002852 <HAL_ADC_Init+0x21a>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002850:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                      |
 8002852:	4313      	orrs	r3, r2
      tmpCFGR1 |= (ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002854:	6a3a      	ldr	r2, [r7, #32]
 8002856:	4313      	orrs	r3, r2
 8002858:	623b      	str	r3, [r7, #32]
    }

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8002860:	2b01      	cmp	r3, #1
 8002862:	d12f      	bne.n	80028c4 <HAL_ADC_Init+0x28c>
    {
      if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a0a      	ldr	r2, [pc, #40]	@ (8002894 <HAL_ADC_Init+0x25c>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d007      	beq.n	800287e <HAL_ADC_Init+0x246>
      {
        tmpCFGR1 |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002872:	3b01      	subs	r3, #1
 8002874:	045b      	lsls	r3, r3, #17
 8002876:	6a3a      	ldr	r2, [r7, #32]
 8002878:	4313      	orrs	r3, r2
 800287a:	623b      	str	r3, [r7, #32]
 800287c:	e022      	b.n	80028c4 <HAL_ADC_Init+0x28c>
      }
      else
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002884:	2b00      	cmp	r3, #0
 8002886:	d111      	bne.n	80028ac <HAL_ADC_Init+0x274>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002888:	6a3b      	ldr	r3, [r7, #32]
 800288a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800288e:	623b      	str	r3, [r7, #32]
 8002890:	e018      	b.n	80028c4 <HAL_ADC_Init+0x28c>
 8002892:	bf00      	nop
 8002894:	46021000 	.word	0x46021000
 8002898:	20000000 	.word	0x20000000
 800289c:	053e2d63 	.word	0x053e2d63
 80028a0:	42028000 	.word	0x42028000
 80028a4:	42028308 	.word	0x42028308
 80028a8:	46021308 	.word	0x46021308
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80028b0:	f043 0220 	orr.w	r2, r3, #32
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	679a      	str	r2, [r3, #120]	@ 0x78

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80028bc:	f043 0201 	orr.w	r2, r3, #1
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	67da      	str	r2, [r3, #124]	@ 0x7c
        }
      }
    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a92      	ldr	r2, [pc, #584]	@ (8002b14 <HAL_ADC_Init+0x4dc>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d018      	beq.n	8002900 <HAL_ADC_Init+0x2c8>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d009      	beq.n	80028ea <HAL_ADC_Init+0x2b2>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80028da:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028e2:	4313      	orrs	r3, r2
 80028e4:	6a3a      	ldr	r2, [r7, #32]
 80028e6:	4313      	orrs	r3, r2
 80028e8:	623b      	str	r3, [r7, #32]
      }
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR_FIELDS_1, tmpCFGR1);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	68da      	ldr	r2, [r3, #12]
 80028f0:	4b89      	ldr	r3, [pc, #548]	@ (8002b18 <HAL_ADC_Init+0x4e0>)
 80028f2:	4013      	ands	r3, r2
 80028f4:	687a      	ldr	r2, [r7, #4]
 80028f6:	6812      	ldr	r2, [r2, #0]
 80028f8:	6a39      	ldr	r1, [r7, #32]
 80028fa:	430b      	orrs	r3, r1
 80028fc:	60d3      	str	r3, [r2, #12]
 80028fe:	e031      	b.n	8002964 <HAL_ADC_Init+0x32c>
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002904:	2b00      	cmp	r3, #0
 8002906:	d009      	beq.n	800291c <HAL_ADC_Init+0x2e4>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC4_CFGR1_EXTSEL) | hadc->Init.ExternalTrigConvEdge);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800290c:	f403 72e0 	and.w	r2, r3, #448	@ 0x1c0
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002914:	4313      	orrs	r3, r2
 8002916:	6a3a      	ldr	r2, [r7, #32]
 8002918:	4313      	orrs	r3, r2
 800291a:	623b      	str	r3, [r7, #32]
      }
      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	68da      	ldr	r2, [r3, #12]
 8002922:	4b7e      	ldr	r3, [pc, #504]	@ (8002b1c <HAL_ADC_Init+0x4e4>)
 8002924:	4013      	ands	r3, r2
 8002926:	687a      	ldr	r2, [r7, #4]
 8002928:	6812      	ldr	r2, [r2, #0]
 800292a:	6a39      	ldr	r1, [r7, #32]
 800292c:	430b      	orrs	r3, r1
 800292e:	60d3      	str	r3, [r2, #12]
                 ADC4_CFGR1_ALIGN     |
                 ADC4_CFGR1_SCANDIR   |
                 ADC4_CFGR1_DMACFG,
                 tmpCFGR1);

      if (hadc->Init.LowPowerAutoPowerOff != ADC_LOW_POWER_NONE)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6a1b      	ldr	r3, [r3, #32]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d008      	beq.n	800294a <HAL_ADC_Init+0x312>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.LowPowerAutoPowerOff);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6a1a      	ldr	r2, [r3, #32]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	430a      	orrs	r2, r1
 8002948:	645a      	str	r2, [r3, #68]	@ 0x44
      }

      if (hadc->Init.VrefProtection != ADC_VREF_PPROT_NONE)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800294e:	2b00      	cmp	r3, #0
 8002950:	d008      	beq.n	8002964 <HAL_ADC_Init+0x32c>
      {
        SET_BIT(hadc->Instance->PWRR, hadc->Init.VrefProtection);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	430a      	orrs	r2, r1
 8002962:	645a      	str	r2, [r3, #68]	@ 0x44
      }

    }

    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a6a      	ldr	r2, [pc, #424]	@ (8002b14 <HAL_ADC_Init+0x4dc>)
 800296a:	4293      	cmp	r3, r2
 800296c:	f000 8093 	beq.w	8002a96 <HAL_ADC_Init+0x45e>
      /* Parameters that can be updated when ADC is disabled or enabled without */
      /* conversion on going on regular and injected groups:                    */
      /*  - Conversion data management      Init.ConversionDataManagement       */
      /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
      /*  - Oversampling parameters         Init.Oversampling                   */
      tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4618      	mov	r0, r3
 8002976:	f7ff fe38 	bl	80025ea <LL_ADC_REG_IsConversionOngoing>
 800297a:	6178      	str	r0, [r7, #20]
      tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4618      	mov	r0, r3
 8002982:	f7ff fe45 	bl	8002610 <LL_ADC_INJ_IsConversionOngoing>
 8002986:	6138      	str	r0, [r7, #16]
      if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d161      	bne.n	8002a52 <HAL_ADC_Init+0x41a>
          && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d15e      	bne.n	8002a52 <HAL_ADC_Init+0x41a>
         )
      {
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	7f1b      	ldrb	r3, [r3, #28]
 8002998:	039a      	lsls	r2, r3, #14
                    ADC_CFGR_DMACONTREQ(hadc, (uint32_t)hadc->Init.ConversionDataManagement));
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4960      	ldr	r1, [pc, #384]	@ (8002b20 <HAL_ADC_Init+0x4e8>)
 80029a0:	428b      	cmp	r3, r1
 80029a2:	d102      	bne.n	80029aa <HAL_ADC_Init+0x372>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029a8:	e002      	b.n	80029b0 <HAL_ADC_Init+0x378>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80029ae:	005b      	lsls	r3, r3, #1
        tmpCFGR1 = (ADC_CFGR_AUTODELAY((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80029b0:	4313      	orrs	r3, r2
 80029b2:	623b      	str	r3, [r7, #32]

        MODIFY_REG(hadc->Instance->CFGR1, ADC_CFGR1_AUTDLY | ADC_CFGR1_DMNGT, tmpCFGR1);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	68db      	ldr	r3, [r3, #12]
 80029ba:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80029be:	f023 0303 	bic.w	r3, r3, #3
 80029c2:	687a      	ldr	r2, [r7, #4]
 80029c4:	6812      	ldr	r2, [r2, #0]
 80029c6:	6a39      	ldr	r1, [r7, #32]
 80029c8:	430b      	orrs	r3, r1
 80029ca:	60d3      	str	r3, [r2, #12]
        if (hadc->Init.GainCompensation != 0UL)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	68db      	ldr	r3, [r3, #12]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d007      	beq.n	80029e4 <HAL_ADC_Init+0x3ac>
        {
          LL_ADC_SetGainCompensation(hadc->Instance, hadc->Init.GainCompensation);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681a      	ldr	r2, [r3, #0]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	68db      	ldr	r3, [r3, #12]
 80029dc:	4619      	mov	r1, r3
 80029de:	4610      	mov	r0, r2
 80029e0:	f7ff fd60 	bl	80024a4 <LL_ADC_SetGainCompensation>
        }

        if (hadc->Init.OversamplingMode == ENABLE)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80029ea:	2b01      	cmp	r3, #1
 80029ec:	d11e      	bne.n	8002a2c <HAL_ADC_Init+0x3f4>
          assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
          assert_param(IS_ADC12_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
          assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
          assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

          if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029f2:	2b00      	cmp	r3, #0
          /*  - Right bit shift                                                  */
          /*  - Left bit shift                                                   */
          /*  - Triggered mode                                                   */
          /*  - Oversampling mode (continued/resumed)                            */
          /*  - trigger frequency mode                                           */
          MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	691a      	ldr	r2, [r3, #16]
 80029fa:	4b4a      	ldr	r3, [pc, #296]	@ (8002b24 <HAL_ADC_Init+0x4ec>)
 80029fc:	4013      	ands	r3, r2
 80029fe:	687a      	ldr	r2, [r7, #4]
 8002a00:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8002a02:	0411      	lsls	r1, r2, #16
 8002a04:	687a      	ldr	r2, [r7, #4]
 8002a06:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002a08:	4311      	orrs	r1, r2
 8002a0a:	687a      	ldr	r2, [r7, #4]
 8002a0c:	6e12      	ldr	r2, [r2, #96]	@ 0x60
 8002a0e:	4311      	orrs	r1, r2
 8002a10:	687a      	ldr	r2, [r7, #4]
 8002a12:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 8002a14:	4311      	orrs	r1, r2
 8002a16:	687a      	ldr	r2, [r7, #4]
 8002a18:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002a1a:	0892      	lsrs	r2, r2, #2
 8002a1c:	430a      	orrs	r2, r1
 8002a1e:	431a      	orrs	r2, r3
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f042 0201 	orr.w	r2, r2, #1
 8002a28:	611a      	str	r2, [r3, #16]
 8002a2a:	e007      	b.n	8002a3c <HAL_ADC_Init+0x404>
                     (hadc->Init.TriggerFrequencyMode >> 2UL));
        }
        else
        {
          /* Disable ADC oversampling scope on ADC group regular */
          CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	691a      	ldr	r2, [r3, #16]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f022 0201 	bic.w	r2, r2, #1
 8002a3a:	611a      	str	r2, [r3, #16]
        }

        /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	691b      	ldr	r3, [r3, #16]
 8002a42:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	430a      	orrs	r2, r1
 8002a50:	611a      	str	r2, [r3, #16]
      /*   Parameter "NbrOfConversion" is discarded.                            */
      /*   Note: Scan mode is not present by hardware on this device, but       */
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	691b      	ldr	r3, [r3, #16]
 8002a56:	2b01      	cmp	r3, #1
 8002a58:	d10c      	bne.n	8002a74 <HAL_ADC_Init+0x43c>
      {
        /* Set number of ranks in regular group sequencer */
        MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a60:	f023 010f 	bic.w	r1, r3, #15
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a68:	1e5a      	subs	r2, r3, #1
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	430a      	orrs	r2, r1
 8002a70:	631a      	str	r2, [r3, #48]	@ 0x30
 8002a72:	e007      	b.n	8002a84 <HAL_ADC_Init+0x44c>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f022 020f 	bic.w	r2, r2, #15
 8002a82:	631a      	str	r2, [r3, #48]	@ 0x30
      }

      /* Initialize the ADC state */
      /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002a88:	f023 0303 	bic.w	r3, r3, #3
 8002a8c:	f043 0201 	orr.w	r2, r3, #1
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	679a      	str	r2, [r3, #120]	@ 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002a94:	e092      	b.n	8002bbc <HAL_ADC_Init+0x584>

    }
    else
    {
      if (hadc->Init.OversamplingMode == ENABLE)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002a9c:	2b01      	cmp	r3, #1
 8002a9e:	d111      	bne.n	8002ac4 <HAL_ADC_Init+0x48c>
        /*  - oversampling enable                                                 */
        /*  - oversampling ratio                                                  */
        /*  - oversampling shift                                                  */
        /*  - oversampling discontinuous mode (triggered mode)                    */
        /*  - trigger frequency mode                                              */
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
                     hadc->Init.Oversampling.RightBitShift |
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8002aa8:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode |
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                     hadc->Init.Oversampling.RightBitShift |
 8002aae:	431a      	orrs	r2, r3
                     hadc->Init.TriggerFrequencyMode
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
                     hadc->Init.Oversampling.TriggeredMode |
 8002ab4:	4313      	orrs	r3, r2
        tmpCFGR2 |= (hadc->Init.Oversampling.Ratio         |
 8002ab6:	69fa      	ldr	r2, [r7, #28]
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	61fb      	str	r3, [r7, #28]
                    );

        SET_BIT(tmpCFGR2, ADC_CFGR2_ROVSE);
 8002abc:	69fb      	ldr	r3, [r7, #28]
 8002abe:	f043 0301 	orr.w	r3, r3, #1
 8002ac2:	61fb      	str	r3, [r7, #28]
      }
      MODIFY_REG(hadc->Instance->CFGR2,
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	691a      	ldr	r2, [r3, #16]
 8002aca:	4b17      	ldr	r3, [pc, #92]	@ (8002b28 <HAL_ADC_Init+0x4f0>)
 8002acc:	4013      	ands	r3, r2
 8002ace:	687a      	ldr	r2, [r7, #4]
 8002ad0:	6812      	ldr	r2, [r2, #0]
 8002ad2:	69f9      	ldr	r1, [r7, #28]
 8002ad4:	430b      	orrs	r3, r1
 8002ad6:	6113      	str	r3, [r2, #16]
                 ADC_CFGR2_LFTRIG | ADC_CFGR2_ROVSE | ADC4_CFGR2_OVSR | ADC_CFGR2_OVSS | ADC_CFGR2_TROVS,
                 tmpCFGR2);


      /* Channel sampling time configuration */
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1,                   \
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6818      	ldr	r0, [r3, #0]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ae0:	461a      	mov	r2, r3
 8002ae2:	2100      	movs	r1, #0
 8002ae4:	f7ff fd01 	bl	80024ea <LL_ADC_SetSamplingTimeCommonChannels>
                                           hadc->Init.SamplingTimeCommon1);
      LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2,                   \
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6818      	ldr	r0, [r3, #0]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002af0:	461a      	mov	r2, r3
 8002af2:	f06f 01fb 	mvn.w	r1, #251	@ 0xfb
 8002af6:	f7ff fcf8 	bl	80024ea <LL_ADC_SetSamplingTimeCommonChannels>
      /*   emulated by software for alignment over all STM32 devices.           */
      /* - if scan mode is enabled, regular channels sequence length is set to  */
      /*   parameter "NbrOfConversion".                                         */
      /*   Channels must be configured into each rank using function            */
      /*   "HAL_ADC_ConfigChannel()".                                           */
      if (hadc->Init.ScanConvMode == ADC4_SCAN_DISABLE)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	691b      	ldr	r3, [r3, #16]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d114      	bne.n	8002b2c <HAL_ADC_Init+0x4f4>
      {
        /* Set sequencer scan length by clearing ranks above rank 1             */
        /* and do not modify rank 1 value.                                      */
        SET_BIT(hadc->Instance->CHSELR, ADC_CHSELR_SQ2_TO_SQ8);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f062 020f 	orn	r2, r2, #15
 8002b10:	629a      	str	r2, [r3, #40]	@ 0x28
 8002b12:	e024      	b.n	8002b5e <HAL_ADC_Init+0x526>
 8002b14:	46021000 	.word	0x46021000
 8002b18:	fff0c013 	.word	0xfff0c013
 8002b1c:	ffde800d 	.word	0xffde800d
 8002b20:	42028000 	.word	0x42028000
 8002b24:	fc00f81e 	.word	0xfc00f81e
 8002b28:	f7fffc02 	.word	0xf7fffc02

      }
      else if (hadc->Init.ScanConvMode == ADC4_SCAN_ENABLE)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	691b      	ldr	r3, [r3, #16]
 8002b30:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002b34:	d113      	bne.n	8002b5e <HAL_ADC_Init+0x526>
        /*          therefore after the first call of "HAL_ADC_Init()",        */
        /*          each rank corresponding to parameter "NbrOfConversion"    */
        /*          must be set using "HAL_ADC_ConfigChannel()".              */
        /*  - Set sequencer scan length by clearing ranks above maximum rank  */
        /*    and do not modify other ranks value.                            */
        MODIFY_REG(hadc->Instance->CHSELR,
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b40:	3b01      	subs	r3, #1
 8002b42:	009b      	lsls	r3, r3, #2
 8002b44:	f003 031c 	and.w	r3, r3, #28
 8002b48:	f06f 020f 	mvn.w	r2, #15
 8002b4c:	fa02 f103 	lsl.w	r1, r2, r3
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	430a      	orrs	r2, r1
 8002b5c:	629a      	str	r2, [r3, #40]	@ 0x28
      /* Check back that ADC registers have effectively been configured to      */
      /* ensure of no potential problem of ADC core IP clocking.                */
      /* Check through register CFGR1 (excluding analog watchdog configuration: */
      /* set into separate dedicated function, and bits of ADC resolution set   */
      /* out of temporary variable 'tmpCFGR1').                                 */
      if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWD1CH | ADC_CFGR1_AWD1EN | ADC_CFGR1_AWD1SGL | ADC_CFGR1_RES))
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	68da      	ldr	r2, [r3, #12]
 8002b64:	4b18      	ldr	r3, [pc, #96]	@ (8002bc8 <HAL_ADC_Init+0x590>)
 8002b66:	4013      	ands	r3, r2
 8002b68:	6a3a      	ldr	r2, [r7, #32]
 8002b6a:	429a      	cmp	r2, r3
 8002b6c:	d10b      	bne.n	8002b86 <HAL_ADC_Init+0x54e>
          == tmpCFGR1)
      {
        /* Set ADC error code to none */
        ADC_CLEAR_ERRORCODE(hadc);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2200      	movs	r2, #0
 8002b72:	67da      	str	r2, [r3, #124]	@ 0x7c

        /* Set the ADC state */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002b78:	f023 0303 	bic.w	r3, r3, #3
 8002b7c:	f043 0201 	orr.w	r2, r3, #1
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	679a      	str	r2, [r3, #120]	@ 0x78
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002b84:	e01a      	b.n	8002bbc <HAL_ADC_Init+0x584>
      }
      else
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002b8a:	f023 0312 	bic.w	r3, r3, #18
 8002b8e:	f043 0210 	orr.w	r2, r3, #16
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	679a      	str	r2, [r3, #120]	@ 0x78

        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002b9a:	f043 0201 	orr.w	r2, r3, #1
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	67da      	str	r2, [r3, #124]	@ 0x7c

        tmp_hal_status = HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (hadc->Instance != ADC4) /* ADC1 or ADC2 */
 8002ba8:	e008      	b.n	8002bbc <HAL_ADC_Init+0x584>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002bae:	f043 0210 	orr.w	r2, r3, #16
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	679a      	str	r2, [r3, #120]	@ 0x78

    tmp_hal_status = HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  return tmp_hal_status;
 8002bbc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	3728      	adds	r7, #40	@ 0x28
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd80      	pop	{r7, pc}
 8002bc8:	833ffff3 	.word	0x833ffff3

08002bcc <__NVIC_SetPriorityGrouping>:
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b085      	sub	sp, #20
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	f003 0307 	and.w	r3, r3, #7
 8002bda:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002bdc:	4b0c      	ldr	r3, [pc, #48]	@ (8002c10 <__NVIC_SetPriorityGrouping+0x44>)
 8002bde:	68db      	ldr	r3, [r3, #12]
 8002be0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002be2:	68ba      	ldr	r2, [r7, #8]
 8002be4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002be8:	4013      	ands	r3, r2
 8002bea:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002bf0:	68bb      	ldr	r3, [r7, #8]
 8002bf2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002bf4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002bf8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002bfc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002bfe:	4a04      	ldr	r2, [pc, #16]	@ (8002c10 <__NVIC_SetPriorityGrouping+0x44>)
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	60d3      	str	r3, [r2, #12]
}
 8002c04:	bf00      	nop
 8002c06:	3714      	adds	r7, #20
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0e:	4770      	bx	lr
 8002c10:	e000ed00 	.word	0xe000ed00

08002c14 <__NVIC_GetPriorityGrouping>:
{
 8002c14:	b480      	push	{r7}
 8002c16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c18:	4b04      	ldr	r3, [pc, #16]	@ (8002c2c <__NVIC_GetPriorityGrouping+0x18>)
 8002c1a:	68db      	ldr	r3, [r3, #12]
 8002c1c:	0a1b      	lsrs	r3, r3, #8
 8002c1e:	f003 0307 	and.w	r3, r3, #7
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	46bd      	mov	sp, r7
 8002c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2a:	4770      	bx	lr
 8002c2c:	e000ed00 	.word	0xe000ed00

08002c30 <__NVIC_EnableIRQ>:
{
 8002c30:	b480      	push	{r7}
 8002c32:	b083      	sub	sp, #12
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	4603      	mov	r3, r0
 8002c38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	db0b      	blt.n	8002c5a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c42:	79fb      	ldrb	r3, [r7, #7]
 8002c44:	f003 021f 	and.w	r2, r3, #31
 8002c48:	4907      	ldr	r1, [pc, #28]	@ (8002c68 <__NVIC_EnableIRQ+0x38>)
 8002c4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c4e:	095b      	lsrs	r3, r3, #5
 8002c50:	2001      	movs	r0, #1
 8002c52:	fa00 f202 	lsl.w	r2, r0, r2
 8002c56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002c5a:	bf00      	nop
 8002c5c:	370c      	adds	r7, #12
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr
 8002c66:	bf00      	nop
 8002c68:	e000e100 	.word	0xe000e100

08002c6c <__NVIC_SetPriority>:
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b083      	sub	sp, #12
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	4603      	mov	r3, r0
 8002c74:	6039      	str	r1, [r7, #0]
 8002c76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	db0a      	blt.n	8002c96 <__NVIC_SetPriority+0x2a>
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	b2da      	uxtb	r2, r3
 8002c84:	490c      	ldr	r1, [pc, #48]	@ (8002cb8 <__NVIC_SetPriority+0x4c>)
 8002c86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c8a:	0112      	lsls	r2, r2, #4
 8002c8c:	b2d2      	uxtb	r2, r2
 8002c8e:	440b      	add	r3, r1
 8002c90:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002c94:	e00a      	b.n	8002cac <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	b2da      	uxtb	r2, r3
 8002c9a:	4908      	ldr	r1, [pc, #32]	@ (8002cbc <__NVIC_SetPriority+0x50>)
 8002c9c:	79fb      	ldrb	r3, [r7, #7]
 8002c9e:	f003 030f 	and.w	r3, r3, #15
 8002ca2:	3b04      	subs	r3, #4
 8002ca4:	0112      	lsls	r2, r2, #4
 8002ca6:	b2d2      	uxtb	r2, r2
 8002ca8:	440b      	add	r3, r1
 8002caa:	761a      	strb	r2, [r3, #24]
}
 8002cac:	bf00      	nop
 8002cae:	370c      	adds	r7, #12
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb6:	4770      	bx	lr
 8002cb8:	e000e100 	.word	0xe000e100
 8002cbc:	e000ed00 	.word	0xe000ed00

08002cc0 <NVIC_EncodePriority>:
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	b089      	sub	sp, #36	@ 0x24
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	60f8      	str	r0, [r7, #12]
 8002cc8:	60b9      	str	r1, [r7, #8]
 8002cca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	f003 0307 	and.w	r3, r3, #7
 8002cd2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002cd4:	69fb      	ldr	r3, [r7, #28]
 8002cd6:	f1c3 0307 	rsb	r3, r3, #7
 8002cda:	2b04      	cmp	r3, #4
 8002cdc:	bf28      	it	cs
 8002cde:	2304      	movcs	r3, #4
 8002ce0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ce2:	69fb      	ldr	r3, [r7, #28]
 8002ce4:	3304      	adds	r3, #4
 8002ce6:	2b06      	cmp	r3, #6
 8002ce8:	d902      	bls.n	8002cf0 <NVIC_EncodePriority+0x30>
 8002cea:	69fb      	ldr	r3, [r7, #28]
 8002cec:	3b03      	subs	r3, #3
 8002cee:	e000      	b.n	8002cf2 <NVIC_EncodePriority+0x32>
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cf4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002cf8:	69bb      	ldr	r3, [r7, #24]
 8002cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8002cfe:	43da      	mvns	r2, r3
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	401a      	ands	r2, r3
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d08:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	fa01 f303 	lsl.w	r3, r1, r3
 8002d12:	43d9      	mvns	r1, r3
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d18:	4313      	orrs	r3, r2
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	3724      	adds	r7, #36	@ 0x24
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d24:	4770      	bx	lr

08002d26 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d26:	b580      	push	{r7, lr}
 8002d28:	b082      	sub	sp, #8
 8002d2a:	af00      	add	r7, sp, #0
 8002d2c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d2e:	6878      	ldr	r0, [r7, #4]
 8002d30:	f7ff ff4c 	bl	8002bcc <__NVIC_SetPriorityGrouping>
}
 8002d34:	bf00      	nop
 8002d36:	3708      	adds	r7, #8
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd80      	pop	{r7, pc}

08002d3c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b086      	sub	sp, #24
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	4603      	mov	r3, r0
 8002d44:	60b9      	str	r1, [r7, #8]
 8002d46:	607a      	str	r2, [r7, #4]
 8002d48:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002d4a:	f7ff ff63 	bl	8002c14 <__NVIC_GetPriorityGrouping>
 8002d4e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d50:	687a      	ldr	r2, [r7, #4]
 8002d52:	68b9      	ldr	r1, [r7, #8]
 8002d54:	6978      	ldr	r0, [r7, #20]
 8002d56:	f7ff ffb3 	bl	8002cc0 <NVIC_EncodePriority>
 8002d5a:	4602      	mov	r2, r0
 8002d5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d60:	4611      	mov	r1, r2
 8002d62:	4618      	mov	r0, r3
 8002d64:	f7ff ff82 	bl	8002c6c <__NVIC_SetPriority>
}
 8002d68:	bf00      	nop
 8002d6a:	3718      	adds	r7, #24
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd80      	pop	{r7, pc}

08002d70 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b082      	sub	sp, #8
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	4603      	mov	r3, r0
 8002d78:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f7ff ff56 	bl	8002c30 <__NVIC_EnableIRQ>
}
 8002d84:	bf00      	nop
 8002d86:	3708      	adds	r7, #8
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}

08002d8c <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b083      	sub	sp, #12
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  switch (CLKSource)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2b04      	cmp	r3, #4
 8002d98:	d844      	bhi.n	8002e24 <HAL_SYSTICK_CLKSourceConfig+0x98>
 8002d9a:	a201      	add	r2, pc, #4	@ (adr r2, 8002da0 <HAL_SYSTICK_CLKSourceConfig+0x14>)
 8002d9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002da0:	08002dc3 	.word	0x08002dc3
 8002da4:	08002de1 	.word	0x08002de1
 8002da8:	08002e03 	.word	0x08002e03
 8002dac:	08002e25 	.word	0x08002e25
 8002db0:	08002db5 	.word	0x08002db5
  {
    /* Select HCLK as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK:
      SET_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8002db4:	4b1f      	ldr	r3, [pc, #124]	@ (8002e34 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a1e      	ldr	r2, [pc, #120]	@ (8002e34 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002dba:	f043 0304 	orr.w	r3, r3, #4
 8002dbe:	6013      	str	r3, [r2, #0]
      break;
 8002dc0:	e031      	b.n	8002e26 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select HCLK_DIV8 as Systick clock source */
    case SYSTICK_CLKSOURCE_HCLK_DIV8:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8002dc2:	4b1c      	ldr	r3, [pc, #112]	@ (8002e34 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a1b      	ldr	r2, [pc, #108]	@ (8002e34 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002dc8:	f023 0304 	bic.w	r3, r3, #4
 8002dcc:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, (0x00000000U));
 8002dce:	4b1a      	ldr	r3, [pc, #104]	@ (8002e38 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002dd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002dd4:	4a18      	ldr	r2, [pc, #96]	@ (8002e38 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002dd6:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8002dda:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8002dde:	e022      	b.n	8002e26 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSI as Systick clock source */
    case SYSTICK_CLKSOURCE_LSI:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8002de0:	4b14      	ldr	r3, [pc, #80]	@ (8002e34 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a13      	ldr	r2, [pc, #76]	@ (8002e34 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002de6:	f023 0304 	bic.w	r3, r3, #4
 8002dea:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_0);
 8002dec:	4b12      	ldr	r3, [pc, #72]	@ (8002e38 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002dee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002df2:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8002df6:	4a10      	ldr	r2, [pc, #64]	@ (8002e38 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002df8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002dfc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8002e00:	e011      	b.n	8002e26 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    /* Select LSE as Systick clock source */
    case SYSTICK_CLKSOURCE_LSE:
      CLEAR_BIT(SysTick->CTRL, SysTick_CTRL_CLKSOURCE_Msk);
 8002e02:	4b0c      	ldr	r3, [pc, #48]	@ (8002e34 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a0b      	ldr	r2, [pc, #44]	@ (8002e34 <HAL_SYSTICK_CLKSourceConfig+0xa8>)
 8002e08:	f023 0304 	bic.w	r3, r3, #4
 8002e0c:	6013      	str	r3, [r2, #0]
      MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_SYSTICKSEL, RCC_CCIPR1_SYSTICKSEL_1);
 8002e0e:	4b0a      	ldr	r3, [pc, #40]	@ (8002e38 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002e10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002e14:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8002e18:	4a07      	ldr	r2, [pc, #28]	@ (8002e38 <HAL_SYSTICK_CLKSourceConfig+0xac>)
 8002e1a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002e1e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
      break;
 8002e22:	e000      	b.n	8002e26 <HAL_SYSTICK_CLKSourceConfig+0x9a>
    default:
      /* Nothing to do */
      break;
 8002e24:	bf00      	nop
  }
}
 8002e26:	bf00      	nop
 8002e28:	370c      	adds	r7, #12
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e30:	4770      	bx	lr
 8002e32:	bf00      	nop
 8002e34:	e000e010 	.word	0xe000e010
 8002e38:	46020c00 	.word	0x46020c00

08002e3c <HAL_DMA_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *const hdma)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b084      	sub	sp, #16
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 8002e44:	f7ff faca 	bl	80023dc <HAL_GetTick>
 8002e48:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d101      	bne.n	8002e54 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002e50:	2301      	movs	r3, #1
 8002e52:	e0db      	b.n	800300c <HAL_DMA_Init+0x1d0>
  assert_param(IS_DMA_DESTINATION_DATA_WIDTH(hdma->Init.DestDataWidth));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  assert_param(IS_DMA_TCEM_EVENT_MODE(hdma->Init.TransferEventMode));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a6e      	ldr	r2, [pc, #440]	@ (8003014 <HAL_DMA_Init+0x1d8>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	f000 809f 	beq.w	8002f9e <HAL_DMA_Init+0x162>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a6c      	ldr	r2, [pc, #432]	@ (8003018 <HAL_DMA_Init+0x1dc>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	f000 8099 	beq.w	8002f9e <HAL_DMA_Init+0x162>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a6a      	ldr	r2, [pc, #424]	@ (800301c <HAL_DMA_Init+0x1e0>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	f000 8093 	beq.w	8002f9e <HAL_DMA_Init+0x162>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a68      	ldr	r2, [pc, #416]	@ (8003020 <HAL_DMA_Init+0x1e4>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	f000 808d 	beq.w	8002f9e <HAL_DMA_Init+0x162>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a66      	ldr	r2, [pc, #408]	@ (8003024 <HAL_DMA_Init+0x1e8>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	f000 8087 	beq.w	8002f9e <HAL_DMA_Init+0x162>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a64      	ldr	r2, [pc, #400]	@ (8003028 <HAL_DMA_Init+0x1ec>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	f000 8081 	beq.w	8002f9e <HAL_DMA_Init+0x162>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a62      	ldr	r2, [pc, #392]	@ (800302c <HAL_DMA_Init+0x1f0>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d07b      	beq.n	8002f9e <HAL_DMA_Init+0x162>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a61      	ldr	r2, [pc, #388]	@ (8003030 <HAL_DMA_Init+0x1f4>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d076      	beq.n	8002f9e <HAL_DMA_Init+0x162>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a5f      	ldr	r2, [pc, #380]	@ (8003034 <HAL_DMA_Init+0x1f8>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d071      	beq.n	8002f9e <HAL_DMA_Init+0x162>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a5e      	ldr	r2, [pc, #376]	@ (8003038 <HAL_DMA_Init+0x1fc>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d06c      	beq.n	8002f9e <HAL_DMA_Init+0x162>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a5c      	ldr	r2, [pc, #368]	@ (800303c <HAL_DMA_Init+0x200>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d067      	beq.n	8002f9e <HAL_DMA_Init+0x162>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a5b      	ldr	r2, [pc, #364]	@ (8003040 <HAL_DMA_Init+0x204>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d062      	beq.n	8002f9e <HAL_DMA_Init+0x162>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a59      	ldr	r2, [pc, #356]	@ (8003044 <HAL_DMA_Init+0x208>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d05d      	beq.n	8002f9e <HAL_DMA_Init+0x162>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a58      	ldr	r2, [pc, #352]	@ (8003048 <HAL_DMA_Init+0x20c>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d058      	beq.n	8002f9e <HAL_DMA_Init+0x162>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a56      	ldr	r2, [pc, #344]	@ (800304c <HAL_DMA_Init+0x210>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d053      	beq.n	8002f9e <HAL_DMA_Init+0x162>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a55      	ldr	r2, [pc, #340]	@ (8003050 <HAL_DMA_Init+0x214>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d04e      	beq.n	8002f9e <HAL_DMA_Init+0x162>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a53      	ldr	r2, [pc, #332]	@ (8003054 <HAL_DMA_Init+0x218>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d049      	beq.n	8002f9e <HAL_DMA_Init+0x162>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a52      	ldr	r2, [pc, #328]	@ (8003058 <HAL_DMA_Init+0x21c>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d044      	beq.n	8002f9e <HAL_DMA_Init+0x162>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a50      	ldr	r2, [pc, #320]	@ (800305c <HAL_DMA_Init+0x220>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d03f      	beq.n	8002f9e <HAL_DMA_Init+0x162>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a4f      	ldr	r2, [pc, #316]	@ (8003060 <HAL_DMA_Init+0x224>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d03a      	beq.n	8002f9e <HAL_DMA_Init+0x162>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a4d      	ldr	r2, [pc, #308]	@ (8003064 <HAL_DMA_Init+0x228>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d035      	beq.n	8002f9e <HAL_DMA_Init+0x162>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a4c      	ldr	r2, [pc, #304]	@ (8003068 <HAL_DMA_Init+0x22c>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d030      	beq.n	8002f9e <HAL_DMA_Init+0x162>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a4a      	ldr	r2, [pc, #296]	@ (800306c <HAL_DMA_Init+0x230>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d02b      	beq.n	8002f9e <HAL_DMA_Init+0x162>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a49      	ldr	r2, [pc, #292]	@ (8003070 <HAL_DMA_Init+0x234>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d026      	beq.n	8002f9e <HAL_DMA_Init+0x162>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a47      	ldr	r2, [pc, #284]	@ (8003074 <HAL_DMA_Init+0x238>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d021      	beq.n	8002f9e <HAL_DMA_Init+0x162>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a46      	ldr	r2, [pc, #280]	@ (8003078 <HAL_DMA_Init+0x23c>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d01c      	beq.n	8002f9e <HAL_DMA_Init+0x162>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a44      	ldr	r2, [pc, #272]	@ (800307c <HAL_DMA_Init+0x240>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d017      	beq.n	8002f9e <HAL_DMA_Init+0x162>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a43      	ldr	r2, [pc, #268]	@ (8003080 <HAL_DMA_Init+0x244>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d012      	beq.n	8002f9e <HAL_DMA_Init+0x162>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a41      	ldr	r2, [pc, #260]	@ (8003084 <HAL_DMA_Init+0x248>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d00d      	beq.n	8002f9e <HAL_DMA_Init+0x162>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a40      	ldr	r2, [pc, #256]	@ (8003088 <HAL_DMA_Init+0x24c>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d008      	beq.n	8002f9e <HAL_DMA_Init+0x162>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a3e      	ldr	r2, [pc, #248]	@ (800308c <HAL_DMA_Init+0x250>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d003      	beq.n	8002f9e <HAL_DMA_Init+0x162>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a3d      	ldr	r2, [pc, #244]	@ (8003090 <HAL_DMA_Init+0x254>)
 8002f9c:	4293      	cmp	r3, r2
    assert_param(IS_DMA_BURST_LENGTH(hdma->Init.DestBurstLength));
    assert_param(IS_DMA_TRANSFER_ALLOCATED_PORT(hdma->Init.TransferAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2202      	movs	r2, #2
 8002faa:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	695a      	ldr	r2, [r3, #20]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f042 0206 	orr.w	r2, r2, #6
 8002fbc:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8002fbe:	e00f      	b.n	8002fe0 <HAL_DMA_Init+0x1a4>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8002fc0:	f7ff fa0c 	bl	80023dc <HAL_GetTick>
 8002fc4:	4602      	mov	r2, r0
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	1ad3      	subs	r3, r2, r3
 8002fca:	2b05      	cmp	r3, #5
 8002fcc:	d908      	bls.n	8002fe0 <HAL_DMA_Init+0x1a4>
    {
      /* Update the DMA channel error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2210      	movs	r2, #16
 8002fd2:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_ERROR;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2203      	movs	r2, #3
 8002fd8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      return HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	e015      	b.n	800300c <HAL_DMA_Init+0x1d0>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	695b      	ldr	r3, [r3, #20]
 8002fe6:	f003 0301 	and.w	r3, r3, #1
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d1e8      	bne.n	8002fc0 <HAL_DMA_Init+0x184>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_Init(hdma);
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	f000 fa16 	bl	8003420 <DMA_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->Init.Mode;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2200      	movs	r2, #0
 8003000:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2201      	movs	r2, #1
 8003006:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  return HAL_OK;
 800300a:	2300      	movs	r3, #0
}
 800300c:	4618      	mov	r0, r3
 800300e:	3710      	adds	r7, #16
 8003010:	46bd      	mov	sp, r7
 8003012:	bd80      	pop	{r7, pc}
 8003014:	40020050 	.word	0x40020050
 8003018:	50020050 	.word	0x50020050
 800301c:	400200d0 	.word	0x400200d0
 8003020:	500200d0 	.word	0x500200d0
 8003024:	40020150 	.word	0x40020150
 8003028:	50020150 	.word	0x50020150
 800302c:	400201d0 	.word	0x400201d0
 8003030:	500201d0 	.word	0x500201d0
 8003034:	40020250 	.word	0x40020250
 8003038:	50020250 	.word	0x50020250
 800303c:	400202d0 	.word	0x400202d0
 8003040:	500202d0 	.word	0x500202d0
 8003044:	40020350 	.word	0x40020350
 8003048:	50020350 	.word	0x50020350
 800304c:	400203d0 	.word	0x400203d0
 8003050:	500203d0 	.word	0x500203d0
 8003054:	40020450 	.word	0x40020450
 8003058:	50020450 	.word	0x50020450
 800305c:	400204d0 	.word	0x400204d0
 8003060:	500204d0 	.word	0x500204d0
 8003064:	40020550 	.word	0x40020550
 8003068:	50020550 	.word	0x50020550
 800306c:	400205d0 	.word	0x400205d0
 8003070:	500205d0 	.word	0x500205d0
 8003074:	40020650 	.word	0x40020650
 8003078:	50020650 	.word	0x50020650
 800307c:	400206d0 	.word	0x400206d0
 8003080:	500206d0 	.word	0x500206d0
 8003084:	40020750 	.word	0x40020750
 8003088:	50020750 	.word	0x50020750
 800308c:	400207d0 	.word	0x400207d0
 8003090:	500207d0 	.word	0x500207d0

08003094 <HAL_DMA_Abort_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *const hdma)
{
 8003094:	b480      	push	{r7}
 8003096:	b083      	sub	sp, #12
 8003098:	af00      	add	r7, sp, #0
 800309a:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d101      	bne.n	80030a6 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	e019      	b.n	80030da <HAL_DMA_Abort_IT+0x46>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	2b02      	cmp	r3, #2
 80030b0:	d004      	beq.n	80030bc <HAL_DMA_Abort_IT+0x28>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2220      	movs	r2, #32
 80030b6:	659a      	str	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 80030b8:	2301      	movs	r3, #1
 80030ba:	e00e      	b.n	80030da <HAL_DMA_Abort_IT+0x46>
  }
  else
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2204      	movs	r2, #4
 80030c0:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Suspend the channel and activate suspend interrupt */
    hdma->Instance->CCR |= (DMA_CCR_SUSP | DMA_CCR_SUSPIE);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	695b      	ldr	r3, [r3, #20]
 80030ca:	687a      	ldr	r2, [r7, #4]
 80030cc:	6812      	ldr	r2, [r2, #0]
 80030ce:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80030d2:	f043 0304 	orr.w	r3, r3, #4
 80030d6:	6153      	str	r3, [r2, #20]
  }

  return HAL_OK;
 80030d8:	2300      	movs	r3, #0
}
 80030da:	4618      	mov	r0, r3
 80030dc:	370c      	adds	r7, #12
 80030de:	46bd      	mov	sp, r7
 80030e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e4:	4770      	bx	lr

080030e6 <HAL_DMA_IRQHandler>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *const hdma)
{
 80030e6:	b580      	push	{r7, lr}
 80030e8:	b086      	sub	sp, #24
 80030ea:	af00      	add	r7, sp, #0
 80030ec:	6078      	str	r0, [r7, #4]
  const DMA_TypeDef *p_dma_instance = GET_DMA_INSTANCE(hdma);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80030f6:	f023 030f 	bic.w	r3, r3, #15
 80030fa:	617b      	str	r3, [r7, #20]
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003104:	3b50      	subs	r3, #80	@ 0x50
 8003106:	09db      	lsrs	r3, r3, #7
 8003108:	f003 031f 	and.w	r3, r3, #31
 800310c:	2201      	movs	r2, #1
 800310e:	fa02 f303 	lsl.w	r3, r2, r3
 8003112:	613b      	str	r3, [r7, #16]
  uint32_t global_active_flag_ns = IS_DMA_GLOBAL_ACTIVE_FLAG_NS(p_dma_instance, global_it_flag);
 8003114:	697b      	ldr	r3, [r7, #20]
 8003116:	68db      	ldr	r3, [r3, #12]
 8003118:	693a      	ldr	r2, [r7, #16]
 800311a:	4013      	ands	r3, r2
 800311c:	60fb      	str	r3, [r7, #12]

  /* Global Interrupt Flag management *********************************************************************************/
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  if ((global_active_flag_s == 0U) && (global_active_flag_ns == 0U))
#else
  if (global_active_flag_ns == 0U)
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	2b00      	cmp	r3, #0
 8003122:	f000 813b 	beq.w	800339c <HAL_DMA_IRQHandler+0x2b6>
  {
    return; /* the global interrupt flag for the current channel is down , nothing to do */
  }

  /* Data Transfer Error Interrupt management *************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_DTE) != 0U))
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	691b      	ldr	r3, [r3, #16]
 800312c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003130:	2b00      	cmp	r3, #0
 8003132:	d011      	beq.n	8003158 <HAL_DMA_IRQHandler+0x72>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DTE) != 0U)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	695b      	ldr	r3, [r3, #20]
 800313a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800313e:	2b00      	cmp	r3, #0
 8003140:	d00a      	beq.n	8003158 <HAL_DMA_IRQHandler+0x72>
    {
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_DTE);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800314a:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DTE;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003150:	f043 0201 	orr.w	r2, r3, #1
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Update Linked-list Error Interrupt management ********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_ULE) != 0U))
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	691b      	ldr	r3, [r3, #16]
 800315e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003162:	2b00      	cmp	r3, #0
 8003164:	d011      	beq.n	800318a <HAL_DMA_IRQHandler+0xa4>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_ULE) != 0U)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	695b      	ldr	r3, [r3, #20]
 800316c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003170:	2b00      	cmp	r3, #0
 8003172:	d00a      	beq.n	800318a <HAL_DMA_IRQHandler+0xa4>
    {
      /* Clear the update linked-list error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_ULE);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800317c:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_ULE;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003182:	f043 0202 	orr.w	r2, r3, #2
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* User Setting Error Interrupt management **************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_USE) != 0U))
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	691b      	ldr	r3, [r3, #16]
 8003190:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003194:	2b00      	cmp	r3, #0
 8003196:	d011      	beq.n	80031bc <HAL_DMA_IRQHandler+0xd6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_USE) != 0U)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	695b      	ldr	r3, [r3, #20]
 800319e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d00a      	beq.n	80031bc <HAL_DMA_IRQHandler+0xd6>
    {
      /* Clear the user setting error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_USE);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80031ae:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_USE;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031b4:	f043 0204 	orr.w	r2, r3, #4
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Trigger Overrun Interrupt management *****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TO) != 0U))
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	691b      	ldr	r3, [r3, #16]
 80031c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d011      	beq.n	80031ee <HAL_DMA_IRQHandler+0x108>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TO) != 0U)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	695b      	ldr	r3, [r3, #20]
 80031d0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d00a      	beq.n	80031ee <HAL_DMA_IRQHandler+0x108>
    {
      /* Clear the trigger overrun flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TO);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80031e0:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TO;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031e6:	f043 0208 	orr.w	r2, r3, #8
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  /* Half Transfer Complete Interrupt management **********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_HT) != 0U))
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	691b      	ldr	r3, [r3, #16]
 80031f4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d013      	beq.n	8003224 <HAL_DMA_IRQHandler+0x13e>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	695b      	ldr	r3, [r3, #20]
 8003202:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003206:	2b00      	cmp	r3, #0
 8003208:	d00c      	beq.n	8003224 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Clear the half transfer flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_HT);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003212:	60da      	str	r2, [r3, #12]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003218:	2b00      	cmp	r3, #0
 800321a:	d003      	beq.n	8003224 <HAL_DMA_IRQHandler+0x13e>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003220:	6878      	ldr	r0, [r7, #4]
 8003222:	4798      	blx	r3
      }
    }
  }

  /* Suspend Transfer Interrupt management ****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_SUSP) != 0U))
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	691b      	ldr	r3, [r3, #16]
 800322a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800322e:	2b00      	cmp	r3, #0
 8003230:	d04c      	beq.n	80032cc <HAL_DMA_IRQHandler+0x1e6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_SUSP) != 0U)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	695b      	ldr	r3, [r3, #20]
 8003238:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800323c:	2b00      	cmp	r3, #0
 800323e:	d045      	beq.n	80032cc <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Clear the block transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_SUSP);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003248:	60da      	str	r2, [r3, #12]

      /* Check DMA channel state */
      if (hdma->State == HAL_DMA_STATE_ABORT)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8003250:	b2db      	uxtb	r3, r3
 8003252:	2b04      	cmp	r3, #4
 8003254:	d12e      	bne.n	80032b4 <HAL_DMA_IRQHandler+0x1ce>
      {
        /* Disable the suspend transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_SUSP);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	695a      	ldr	r2, [r3, #20]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003264:	615a      	str	r2, [r3, #20]

        /* Reset the channel internal state and reset the FIFO */
        hdma->Instance->CCR |= DMA_CCR_RESET;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	695a      	ldr	r2, [r3, #20]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f042 0202 	orr.w	r2, r2, #2
 8003274:	615a      	str	r2, [r3, #20]

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_READY;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2201      	movs	r2, #1
 800327a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003282:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003286:	2b00      	cmp	r3, #0
 8003288:	d007      	beq.n	800329a <HAL_DMA_IRQHandler+0x1b4>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800328e:	2201      	movs	r2, #1
 8003290:	731a      	strb	r2, [r3, #12]

          /* Clear remaining data size to ensure loading linked-list from memory next start */
          hdma->Instance->CBR1 = 0U;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	2200      	movs	r2, #0
 8003298:	649a      	str	r2, [r3, #72]	@ 0x48
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2200      	movs	r2, #0
 800329e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        /* Check transfer abort callback */
        if (hdma->XferAbortCallback != NULL)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d07a      	beq.n	80033a0 <HAL_DMA_IRQHandler+0x2ba>
        {
          /* Transfer abort callback */
          hdma->XferAbortCallback(hdma);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80032ae:	6878      	ldr	r0, [r7, #4]
 80032b0:	4798      	blx	r3
        }

        return;
 80032b2:	e075      	b.n	80033a0 <HAL_DMA_IRQHandler+0x2ba>
      }
      else
      {
        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_SUSPEND;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2205      	movs	r2, #5
 80032b8:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

        /* Check transfer suspend callback */
        if (hdma->XferSuspendCallback != NULL)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d003      	beq.n	80032cc <HAL_DMA_IRQHandler+0x1e6>
        {
          /* Transfer suspend callback */
          hdma->XferSuspendCallback(hdma);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032c8:	6878      	ldr	r0, [r7, #4]
 80032ca:	4798      	blx	r3
      }
    }
  }

  /* Transfer Complete Interrupt management ***************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TC) != 0U))
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	691b      	ldr	r3, [r3, #16]
 80032d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d039      	beq.n	800334e <HAL_DMA_IRQHandler+0x268>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	695b      	ldr	r3, [r3, #20]
 80032e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d032      	beq.n	800334e <HAL_DMA_IRQHandler+0x268>
    {
      /* Check DMA channel transfer mode */
      if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80032ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d012      	beq.n	800331a <HAL_DMA_IRQHandler+0x234>
      {
        /* If linked-list transfer */
        if (hdma->Instance->CLLR == 0U)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d116      	bne.n	800332c <HAL_DMA_IRQHandler+0x246>
        {
          if (hdma->Instance->CBR1 == 0U)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003304:	2b00      	cmp	r3, #0
 8003306:	d111      	bne.n	800332c <HAL_DMA_IRQHandler+0x246>
          {
            /* Update the DMA channel state */
            hdma->State = HAL_DMA_STATE_READY;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2201      	movs	r2, #1
 800330c:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

            /* Update the linked-list queue state */
            hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003314:	2201      	movs	r2, #1
 8003316:	731a      	strb	r2, [r3, #12]
 8003318:	e008      	b.n	800332c <HAL_DMA_IRQHandler+0x246>
        }
      }
      else
      {
        /* If normal transfer */
        if (hdma->Instance->CBR1 == 0U)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003320:	2b00      	cmp	r3, #0
 8003322:	d103      	bne.n	800332c <HAL_DMA_IRQHandler+0x246>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2201      	movs	r2, #1
 8003328:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
        }
      }

      /* Clear TC and HT transfer flags */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT));
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8003334:	60da      	str	r2, [r3, #12]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2200      	movs	r2, #0
 800333a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

      /* Check transfer complete callback */
      if (hdma->XferCpltCallback != NULL)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003342:	2b00      	cmp	r3, #0
 8003344:	d003      	beq.n	800334e <HAL_DMA_IRQHandler+0x268>
      {
        /* Channel Transfer Complete callback */
        hdma->XferCpltCallback(hdma);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800334a:	6878      	ldr	r0, [r7, #4]
 800334c:	4798      	blx	r3
      }
    }
  }

  /* Manage error case ************************************************************************************************/
  if (hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003352:	2b00      	cmp	r3, #0
 8003354:	d025      	beq.n	80033a2 <HAL_DMA_IRQHandler+0x2bc>
  {
    /* Reset the channel internal state and reset the FIFO */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	695a      	ldr	r2, [r3, #20]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f042 0202 	orr.w	r2, r2, #2
 8003364:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2201      	movs	r2, #1
 800336a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003372:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003376:	2b00      	cmp	r3, #0
 8003378:	d003      	beq.n	8003382 <HAL_DMA_IRQHandler+0x29c>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800337e:	2201      	movs	r2, #1
 8003380:	731a      	strb	r2, [r3, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2200      	movs	r2, #0
 8003386:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

    /* Check transfer error callback */
    if (hdma->XferErrorCallback != NULL)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800338e:	2b00      	cmp	r3, #0
 8003390:	d007      	beq.n	80033a2 <HAL_DMA_IRQHandler+0x2bc>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003396:	6878      	ldr	r0, [r7, #4]
 8003398:	4798      	blx	r3
 800339a:	e002      	b.n	80033a2 <HAL_DMA_IRQHandler+0x2bc>
    return; /* the global interrupt flag for the current channel is down , nothing to do */
 800339c:	bf00      	nop
 800339e:	e000      	b.n	80033a2 <HAL_DMA_IRQHandler+0x2bc>
        return;
 80033a0:	bf00      	nop
    }
  }
}
 80033a2:	3718      	adds	r7, #24
 80033a4:	46bd      	mov	sp, r7
 80033a6:	bd80      	pop	{r7, pc}

080033a8 <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes : Specifies the DMA channel secure/privilege attributes.
  *                             This parameter can be a one or a combination of @ref DMA_Channel_Attributes.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *const hdma, uint32_t ChannelAttributes)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b085      	sub	sp, #20
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
 80033b0:	6039      	str	r1, [r7, #0]
  DMA_TypeDef *p_dma_instance;
  uint32_t channel_idx;

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d101      	bne.n	80033bc <HAL_DMA_ConfigChannelAttributes+0x14>
  {
    return HAL_ERROR;
 80033b8:	2301      	movs	r3, #1
 80033ba:	e02b      	b.n	8003414 <HAL_DMA_ConfigChannelAttributes+0x6c>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Get DMA instance */
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 80033c4:	f023 030f 	bic.w	r3, r3, #15
 80033c8:	60fb      	str	r3, [r7, #12]

  /* Get channel index */
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033d2:	3b50      	subs	r3, #80	@ 0x50
 80033d4:	09db      	lsrs	r3, r3, #7
 80033d6:	f003 031f 	and.w	r3, r3, #31
 80033da:	2201      	movs	r2, #1
 80033dc:	fa02 f303 	lsl.w	r3, r2, r3
 80033e0:	60bb      	str	r3, [r7, #8]

  /* Check DMA channel privilege attribute management */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) == DMA_CHANNEL_ATTR_PRIV_MASK)
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	f003 0310 	and.w	r3, r3, #16
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d012      	beq.n	8003412 <HAL_DMA_ConfigChannelAttributes+0x6a>
  {
    /* Configure DMA channel privilege attribute */
    if ((ChannelAttributes & DMA_CHANNEL_PRIV) == DMA_CHANNEL_PRIV)
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	f003 0311 	and.w	r3, r3, #17
 80033f2:	2b11      	cmp	r3, #17
 80033f4:	d106      	bne.n	8003404 <HAL_DMA_ConfigChannelAttributes+0x5c>
    {
      p_dma_instance->PRIVCFGR |= channel_idx;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	685a      	ldr	r2, [r3, #4]
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	431a      	orrs	r2, r3
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	605a      	str	r2, [r3, #4]
 8003402:	e006      	b.n	8003412 <HAL_DMA_ConfigChannelAttributes+0x6a>
    }
    else
    {
      p_dma_instance->PRIVCFGR &= (~channel_idx);
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	685a      	ldr	r2, [r3, #4]
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	43db      	mvns	r3, r3
 800340c:	401a      	ands	r2, r3
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	605a      	str	r2, [r3, #4]
      hdma->Instance->CTR1 &= (~DMA_CTR1_DSEC);
    }
  }
#endif /* (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  return HAL_OK;
 8003412:	2300      	movs	r3, #0
}
 8003414:	4618      	mov	r0, r3
 8003416:	3714      	adds	r7, #20
 8003418:	46bd      	mov	sp, r7
 800341a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341e:	4770      	bx	lr

08003420 <DMA_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_Init(DMA_HandleTypeDef const *const hdma)
{
 8003420:	b480      	push	{r7}
 8003422:	b085      	sub	sp, #20
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value *****************************************************************/
  tmpreg = hdma->Init.Priority;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6a1b      	ldr	r3, [r3, #32]
 800342c:	60fb      	str	r3, [r7, #12]

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	695b      	ldr	r3, [r3, #20]
 8003434:	f423 0143 	bic.w	r1, r3, #12779520	@ 0xc30000
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	68fa      	ldr	r2, [r7, #12]
 800343e:	430a      	orrs	r2, r1
 8003440:	615a      	str	r2, [r3, #20]

  /* Prepare DMA Channel Transfer Register (CTR1) value ***************************************************************/
  tmpreg = hdma->Init.DestInc | hdma->Init.DestDataWidth | hdma->Init.SrcInc | hdma->Init.SrcDataWidth;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	695a      	ldr	r2, [r3, #20]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	69db      	ldr	r3, [r3, #28]
 800344a:	431a      	orrs	r2, r3
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	691b      	ldr	r3, [r3, #16]
 8003450:	431a      	orrs	r2, r3
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	699b      	ldr	r3, [r3, #24]
 8003456:	4313      	orrs	r3, r2
 8003458:	60fb      	str	r3, [r7, #12]

  /* Add parameters specific to GPDMA */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a53      	ldr	r2, [pc, #332]	@ (80035ac <DMA_Init+0x18c>)
 8003460:	4293      	cmp	r3, r2
 8003462:	f000 80a0 	beq.w	80035a6 <DMA_Init+0x186>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a51      	ldr	r2, [pc, #324]	@ (80035b0 <DMA_Init+0x190>)
 800346c:	4293      	cmp	r3, r2
 800346e:	f000 809a 	beq.w	80035a6 <DMA_Init+0x186>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a4f      	ldr	r2, [pc, #316]	@ (80035b4 <DMA_Init+0x194>)
 8003478:	4293      	cmp	r3, r2
 800347a:	f000 8094 	beq.w	80035a6 <DMA_Init+0x186>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a4d      	ldr	r2, [pc, #308]	@ (80035b8 <DMA_Init+0x198>)
 8003484:	4293      	cmp	r3, r2
 8003486:	f000 808e 	beq.w	80035a6 <DMA_Init+0x186>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a4b      	ldr	r2, [pc, #300]	@ (80035bc <DMA_Init+0x19c>)
 8003490:	4293      	cmp	r3, r2
 8003492:	f000 8088 	beq.w	80035a6 <DMA_Init+0x186>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a49      	ldr	r2, [pc, #292]	@ (80035c0 <DMA_Init+0x1a0>)
 800349c:	4293      	cmp	r3, r2
 800349e:	f000 8082 	beq.w	80035a6 <DMA_Init+0x186>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a47      	ldr	r2, [pc, #284]	@ (80035c4 <DMA_Init+0x1a4>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d07c      	beq.n	80035a6 <DMA_Init+0x186>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a45      	ldr	r2, [pc, #276]	@ (80035c8 <DMA_Init+0x1a8>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d077      	beq.n	80035a6 <DMA_Init+0x186>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a44      	ldr	r2, [pc, #272]	@ (80035cc <DMA_Init+0x1ac>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d072      	beq.n	80035a6 <DMA_Init+0x186>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a42      	ldr	r2, [pc, #264]	@ (80035d0 <DMA_Init+0x1b0>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d06d      	beq.n	80035a6 <DMA_Init+0x186>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a41      	ldr	r2, [pc, #260]	@ (80035d4 <DMA_Init+0x1b4>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d068      	beq.n	80035a6 <DMA_Init+0x186>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a3f      	ldr	r2, [pc, #252]	@ (80035d8 <DMA_Init+0x1b8>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d063      	beq.n	80035a6 <DMA_Init+0x186>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a3e      	ldr	r2, [pc, #248]	@ (80035dc <DMA_Init+0x1bc>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d05e      	beq.n	80035a6 <DMA_Init+0x186>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a3c      	ldr	r2, [pc, #240]	@ (80035e0 <DMA_Init+0x1c0>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d059      	beq.n	80035a6 <DMA_Init+0x186>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a3b      	ldr	r2, [pc, #236]	@ (80035e4 <DMA_Init+0x1c4>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d054      	beq.n	80035a6 <DMA_Init+0x186>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a39      	ldr	r2, [pc, #228]	@ (80035e8 <DMA_Init+0x1c8>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d04f      	beq.n	80035a6 <DMA_Init+0x186>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a38      	ldr	r2, [pc, #224]	@ (80035ec <DMA_Init+0x1cc>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d04a      	beq.n	80035a6 <DMA_Init+0x186>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a36      	ldr	r2, [pc, #216]	@ (80035f0 <DMA_Init+0x1d0>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d045      	beq.n	80035a6 <DMA_Init+0x186>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a35      	ldr	r2, [pc, #212]	@ (80035f4 <DMA_Init+0x1d4>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d040      	beq.n	80035a6 <DMA_Init+0x186>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a33      	ldr	r2, [pc, #204]	@ (80035f8 <DMA_Init+0x1d8>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d03b      	beq.n	80035a6 <DMA_Init+0x186>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a32      	ldr	r2, [pc, #200]	@ (80035fc <DMA_Init+0x1dc>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d036      	beq.n	80035a6 <DMA_Init+0x186>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a30      	ldr	r2, [pc, #192]	@ (8003600 <DMA_Init+0x1e0>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d031      	beq.n	80035a6 <DMA_Init+0x186>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a2f      	ldr	r2, [pc, #188]	@ (8003604 <DMA_Init+0x1e4>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d02c      	beq.n	80035a6 <DMA_Init+0x186>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a2d      	ldr	r2, [pc, #180]	@ (8003608 <DMA_Init+0x1e8>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d027      	beq.n	80035a6 <DMA_Init+0x186>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a2c      	ldr	r2, [pc, #176]	@ (800360c <DMA_Init+0x1ec>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d022      	beq.n	80035a6 <DMA_Init+0x186>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a2a      	ldr	r2, [pc, #168]	@ (8003610 <DMA_Init+0x1f0>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d01d      	beq.n	80035a6 <DMA_Init+0x186>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a29      	ldr	r2, [pc, #164]	@ (8003614 <DMA_Init+0x1f4>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d018      	beq.n	80035a6 <DMA_Init+0x186>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a27      	ldr	r2, [pc, #156]	@ (8003618 <DMA_Init+0x1f8>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d013      	beq.n	80035a6 <DMA_Init+0x186>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a26      	ldr	r2, [pc, #152]	@ (800361c <DMA_Init+0x1fc>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d00e      	beq.n	80035a6 <DMA_Init+0x186>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a24      	ldr	r2, [pc, #144]	@ (8003620 <DMA_Init+0x200>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d009      	beq.n	80035a6 <DMA_Init+0x186>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a23      	ldr	r2, [pc, #140]	@ (8003624 <DMA_Init+0x204>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d004      	beq.n	80035a6 <DMA_Init+0x186>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a21      	ldr	r2, [pc, #132]	@ (8003628 <DMA_Init+0x208>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d142      	bne.n	800362c <DMA_Init+0x20c>
 80035a6:	2301      	movs	r3, #1
 80035a8:	e041      	b.n	800362e <DMA_Init+0x20e>
 80035aa:	bf00      	nop
 80035ac:	40020050 	.word	0x40020050
 80035b0:	50020050 	.word	0x50020050
 80035b4:	400200d0 	.word	0x400200d0
 80035b8:	500200d0 	.word	0x500200d0
 80035bc:	40020150 	.word	0x40020150
 80035c0:	50020150 	.word	0x50020150
 80035c4:	400201d0 	.word	0x400201d0
 80035c8:	500201d0 	.word	0x500201d0
 80035cc:	40020250 	.word	0x40020250
 80035d0:	50020250 	.word	0x50020250
 80035d4:	400202d0 	.word	0x400202d0
 80035d8:	500202d0 	.word	0x500202d0
 80035dc:	40020350 	.word	0x40020350
 80035e0:	50020350 	.word	0x50020350
 80035e4:	400203d0 	.word	0x400203d0
 80035e8:	500203d0 	.word	0x500203d0
 80035ec:	40020450 	.word	0x40020450
 80035f0:	50020450 	.word	0x50020450
 80035f4:	400204d0 	.word	0x400204d0
 80035f8:	500204d0 	.word	0x500204d0
 80035fc:	40020550 	.word	0x40020550
 8003600:	50020550 	.word	0x50020550
 8003604:	400205d0 	.word	0x400205d0
 8003608:	500205d0 	.word	0x500205d0
 800360c:	40020650 	.word	0x40020650
 8003610:	50020650 	.word	0x50020650
 8003614:	400206d0 	.word	0x400206d0
 8003618:	500206d0 	.word	0x500206d0
 800361c:	40020750 	.word	0x40020750
 8003620:	50020750 	.word	0x50020750
 8003624:	400207d0 	.word	0x400207d0
 8003628:	500207d0 	.word	0x500207d0
 800362c:	2300      	movs	r3, #0
 800362e:	2b00      	cmp	r3, #0
 8003630:	d012      	beq.n	8003658 <DMA_Init+0x238>
  {
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800363a:	3b01      	subs	r3, #1
 800363c:	051b      	lsls	r3, r3, #20
 800363e:	f003 737c 	and.w	r3, r3, #66060288	@ 0x3f00000
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8003642:	431a      	orrs	r2, r3
               (((hdma->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003648:	3b01      	subs	r3, #1
 800364a:	011b      	lsls	r3, r3, #4
 800364c:	f403 737c 	and.w	r3, r3, #1008	@ 0x3f0
               (((hdma->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1) |
 8003650:	4313      	orrs	r3, r2
    tmpreg |= (hdma->Init.TransferAllocatedPort                                             |
 8003652:	68fa      	ldr	r2, [r7, #12]
 8003654:	4313      	orrs	r3, r2
 8003656:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Transfer Register 1 (CTR1) */
  MODIFY_REG(hdma->Instance->CTR1, ~(DMA_CTR1_SSEC | DMA_CTR1_DSEC), tmpreg);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800365e:	f003 2180 	and.w	r1, r3, #2147516416	@ 0x80008000
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	68fa      	ldr	r2, [r7, #12]
 8003668:	430a      	orrs	r2, r1
 800366a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Prepare DMA Channel Transfer Register 2 (CTR2) value *************************************************************/
  tmpreg = hdma->Init.BlkHWRequest | (hdma->Init.Request & DMA_CTR2_REQSEL) | hdma->Init.TransferEventMode;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	689a      	ldr	r2, [r3, #8]
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003678:	431a      	orrs	r2, r3
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800367e:	4313      	orrs	r3, r2
 8003680:	60fb      	str	r3, [r7, #12]

  /* Memory to Peripheral Transfer */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	68db      	ldr	r3, [r3, #12]
 8003686:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800368a:	f040 80b0 	bne.w	80037ee <DMA_Init+0x3ce>
  {
    if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a82      	ldr	r2, [pc, #520]	@ (800389c <DMA_Init+0x47c>)
 8003694:	4293      	cmp	r3, r2
 8003696:	f000 80a0 	beq.w	80037da <DMA_Init+0x3ba>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a80      	ldr	r2, [pc, #512]	@ (80038a0 <DMA_Init+0x480>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	f000 809a 	beq.w	80037da <DMA_Init+0x3ba>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a7e      	ldr	r2, [pc, #504]	@ (80038a4 <DMA_Init+0x484>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	f000 8094 	beq.w	80037da <DMA_Init+0x3ba>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	4a7c      	ldr	r2, [pc, #496]	@ (80038a8 <DMA_Init+0x488>)
 80036b8:	4293      	cmp	r3, r2
 80036ba:	f000 808e 	beq.w	80037da <DMA_Init+0x3ba>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a7a      	ldr	r2, [pc, #488]	@ (80038ac <DMA_Init+0x48c>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	f000 8088 	beq.w	80037da <DMA_Init+0x3ba>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a78      	ldr	r2, [pc, #480]	@ (80038b0 <DMA_Init+0x490>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	f000 8082 	beq.w	80037da <DMA_Init+0x3ba>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a76      	ldr	r2, [pc, #472]	@ (80038b4 <DMA_Init+0x494>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d07c      	beq.n	80037da <DMA_Init+0x3ba>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a74      	ldr	r2, [pc, #464]	@ (80038b8 <DMA_Init+0x498>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d077      	beq.n	80037da <DMA_Init+0x3ba>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4a73      	ldr	r2, [pc, #460]	@ (80038bc <DMA_Init+0x49c>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d072      	beq.n	80037da <DMA_Init+0x3ba>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4a71      	ldr	r2, [pc, #452]	@ (80038c0 <DMA_Init+0x4a0>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d06d      	beq.n	80037da <DMA_Init+0x3ba>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a70      	ldr	r2, [pc, #448]	@ (80038c4 <DMA_Init+0x4a4>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d068      	beq.n	80037da <DMA_Init+0x3ba>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	4a6e      	ldr	r2, [pc, #440]	@ (80038c8 <DMA_Init+0x4a8>)
 800370e:	4293      	cmp	r3, r2
 8003710:	d063      	beq.n	80037da <DMA_Init+0x3ba>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4a6d      	ldr	r2, [pc, #436]	@ (80038cc <DMA_Init+0x4ac>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d05e      	beq.n	80037da <DMA_Init+0x3ba>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a6b      	ldr	r2, [pc, #428]	@ (80038d0 <DMA_Init+0x4b0>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d059      	beq.n	80037da <DMA_Init+0x3ba>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a6a      	ldr	r2, [pc, #424]	@ (80038d4 <DMA_Init+0x4b4>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d054      	beq.n	80037da <DMA_Init+0x3ba>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a68      	ldr	r2, [pc, #416]	@ (80038d8 <DMA_Init+0x4b8>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d04f      	beq.n	80037da <DMA_Init+0x3ba>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	4a67      	ldr	r2, [pc, #412]	@ (80038dc <DMA_Init+0x4bc>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d04a      	beq.n	80037da <DMA_Init+0x3ba>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4a65      	ldr	r2, [pc, #404]	@ (80038e0 <DMA_Init+0x4c0>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d045      	beq.n	80037da <DMA_Init+0x3ba>
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a64      	ldr	r2, [pc, #400]	@ (80038e4 <DMA_Init+0x4c4>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d040      	beq.n	80037da <DMA_Init+0x3ba>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a62      	ldr	r2, [pc, #392]	@ (80038e8 <DMA_Init+0x4c8>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d03b      	beq.n	80037da <DMA_Init+0x3ba>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a61      	ldr	r2, [pc, #388]	@ (80038ec <DMA_Init+0x4cc>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d036      	beq.n	80037da <DMA_Init+0x3ba>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a5f      	ldr	r2, [pc, #380]	@ (80038f0 <DMA_Init+0x4d0>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d031      	beq.n	80037da <DMA_Init+0x3ba>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4a5e      	ldr	r2, [pc, #376]	@ (80038f4 <DMA_Init+0x4d4>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d02c      	beq.n	80037da <DMA_Init+0x3ba>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a5c      	ldr	r2, [pc, #368]	@ (80038f8 <DMA_Init+0x4d8>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d027      	beq.n	80037da <DMA_Init+0x3ba>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a5b      	ldr	r2, [pc, #364]	@ (80038fc <DMA_Init+0x4dc>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d022      	beq.n	80037da <DMA_Init+0x3ba>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a59      	ldr	r2, [pc, #356]	@ (8003900 <DMA_Init+0x4e0>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d01d      	beq.n	80037da <DMA_Init+0x3ba>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a58      	ldr	r2, [pc, #352]	@ (8003904 <DMA_Init+0x4e4>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d018      	beq.n	80037da <DMA_Init+0x3ba>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a56      	ldr	r2, [pc, #344]	@ (8003908 <DMA_Init+0x4e8>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d013      	beq.n	80037da <DMA_Init+0x3ba>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a55      	ldr	r2, [pc, #340]	@ (800390c <DMA_Init+0x4ec>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d00e      	beq.n	80037da <DMA_Init+0x3ba>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a53      	ldr	r2, [pc, #332]	@ (8003910 <DMA_Init+0x4f0>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d009      	beq.n	80037da <DMA_Init+0x3ba>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a52      	ldr	r2, [pc, #328]	@ (8003914 <DMA_Init+0x4f4>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d004      	beq.n	80037da <DMA_Init+0x3ba>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a50      	ldr	r2, [pc, #320]	@ (8003918 <DMA_Init+0x4f8>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d101      	bne.n	80037de <DMA_Init+0x3be>
 80037da:	2301      	movs	r3, #1
 80037dc:	e000      	b.n	80037e0 <DMA_Init+0x3c0>
 80037de:	2300      	movs	r3, #0
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d00d      	beq.n	8003800 <DMA_Init+0x3e0>
    {
      tmpreg |= DMA_CTR2_DREQ;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80037ea:	60fb      	str	r3, [r7, #12]
 80037ec:	e008      	b.n	8003800 <DMA_Init+0x3e0>
    }
  }
  /* Memory to Memory Transfer */
  else if ((hdma->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	68db      	ldr	r3, [r3, #12]
 80037f2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80037f6:	d103      	bne.n	8003800 <DMA_Init+0x3e0>
  {
    tmpreg |= DMA_CTR2_SWREQ;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80037fe:	60fb      	str	r3, [r7, #12]
  {
    /* Nothing to do */
  }

  /* Write DMA Channel Transfer Register 2 (CTR2) */
  MODIFY_REG(hdma->Instance->CTR2, (DMA_CTR2_TCEM  | DMA_CTR2_TRIGPOL | DMA_CTR2_TRIGSEL | DMA_CTR2_TRIGM |
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003806:	4b45      	ldr	r3, [pc, #276]	@ (800391c <DMA_Init+0x4fc>)
 8003808:	4013      	ands	r3, r2
 800380a:	687a      	ldr	r2, [r7, #4]
 800380c:	6812      	ldr	r2, [r2, #0]
 800380e:	68f9      	ldr	r1, [r7, #12]
 8003810:	430b      	orrs	r3, r1
 8003812:	6453      	str	r3, [r2, #68]	@ 0x44
                                    DMA_CTR2_BREQ  | DMA_CTR2_DREQ    | DMA_CTR2_SWREQ   | DMA_CTR2_REQSEL), tmpreg);


  /* Write DMA Channel Block Register 1 (CBR1) ************************************************************************/
  WRITE_REG(hdma->Instance->CBR1, 0U);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	2200      	movs	r2, #0
 800381a:	649a      	str	r2, [r3, #72]	@ 0x48

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4a36      	ldr	r2, [pc, #216]	@ (80038fc <DMA_Init+0x4dc>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d022      	beq.n	800386c <DMA_Init+0x44c>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4a35      	ldr	r2, [pc, #212]	@ (8003900 <DMA_Init+0x4e0>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d01d      	beq.n	800386c <DMA_Init+0x44c>
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a33      	ldr	r2, [pc, #204]	@ (8003904 <DMA_Init+0x4e4>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d018      	beq.n	800386c <DMA_Init+0x44c>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a32      	ldr	r2, [pc, #200]	@ (8003908 <DMA_Init+0x4e8>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d013      	beq.n	800386c <DMA_Init+0x44c>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a30      	ldr	r2, [pc, #192]	@ (800390c <DMA_Init+0x4ec>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d00e      	beq.n	800386c <DMA_Init+0x44c>
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4a2f      	ldr	r2, [pc, #188]	@ (8003910 <DMA_Init+0x4f0>)
 8003854:	4293      	cmp	r3, r2
 8003856:	d009      	beq.n	800386c <DMA_Init+0x44c>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a2d      	ldr	r2, [pc, #180]	@ (8003914 <DMA_Init+0x4f4>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d004      	beq.n	800386c <DMA_Init+0x44c>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	4a2c      	ldr	r2, [pc, #176]	@ (8003918 <DMA_Init+0x4f8>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d101      	bne.n	8003870 <DMA_Init+0x450>
 800386c:	2301      	movs	r3, #1
 800386e:	e000      	b.n	8003872 <DMA_Init+0x452>
 8003870:	2300      	movs	r3, #0
 8003872:	2b00      	cmp	r3, #0
 8003874:	d007      	beq.n	8003886 <DMA_Init+0x466>
  {
    /* Write DMA Channel Transfer Register 3 (CTR3) *******************************************************************/
    WRITE_REG(hdma->Instance->CTR3, 0U);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	2200      	movs	r2, #0
 800387c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Write DMA Channel Block Register 2 (CBR2) **********************************************************************/
    WRITE_REG(hdma->Instance->CBR2, 0U);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	2200      	movs	r2, #0
 8003884:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) ************************************************************/
  WRITE_REG(hdma->Instance->CLLR, 0U);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	2200      	movs	r2, #0
 800388c:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 800388e:	bf00      	nop
 8003890:	3714      	adds	r7, #20
 8003892:	46bd      	mov	sp, r7
 8003894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003898:	4770      	bx	lr
 800389a:	bf00      	nop
 800389c:	40020050 	.word	0x40020050
 80038a0:	50020050 	.word	0x50020050
 80038a4:	400200d0 	.word	0x400200d0
 80038a8:	500200d0 	.word	0x500200d0
 80038ac:	40020150 	.word	0x40020150
 80038b0:	50020150 	.word	0x50020150
 80038b4:	400201d0 	.word	0x400201d0
 80038b8:	500201d0 	.word	0x500201d0
 80038bc:	40020250 	.word	0x40020250
 80038c0:	50020250 	.word	0x50020250
 80038c4:	400202d0 	.word	0x400202d0
 80038c8:	500202d0 	.word	0x500202d0
 80038cc:	40020350 	.word	0x40020350
 80038d0:	50020350 	.word	0x50020350
 80038d4:	400203d0 	.word	0x400203d0
 80038d8:	500203d0 	.word	0x500203d0
 80038dc:	40020450 	.word	0x40020450
 80038e0:	50020450 	.word	0x50020450
 80038e4:	400204d0 	.word	0x400204d0
 80038e8:	500204d0 	.word	0x500204d0
 80038ec:	40020550 	.word	0x40020550
 80038f0:	50020550 	.word	0x50020550
 80038f4:	400205d0 	.word	0x400205d0
 80038f8:	500205d0 	.word	0x500205d0
 80038fc:	40020650 	.word	0x40020650
 8003900:	50020650 	.word	0x50020650
 8003904:	400206d0 	.word	0x400206d0
 8003908:	500206d0 	.word	0x500206d0
 800390c:	40020750 	.word	0x40020750
 8003910:	50020750 	.word	0x50020750
 8003914:	400207d0 	.word	0x400207d0
 8003918:	500207d0 	.word	0x500207d0
 800391c:	3cc03180 	.word	0x3cc03180

08003920 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8003920:	b480      	push	{r7}
 8003922:	b089      	sub	sp, #36	@ 0x24
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
 8003928:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 800392a:	2300      	movs	r3, #0
 800392c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8003932:	e1ba      	b.n	8003caa <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	681a      	ldr	r2, [r3, #0]
 8003938:	2101      	movs	r1, #1
 800393a:	697b      	ldr	r3, [r7, #20]
 800393c:	fa01 f303 	lsl.w	r3, r1, r3
 8003940:	4013      	ands	r3, r2
 8003942:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	2b00      	cmp	r3, #0
 800394c:	f000 81aa 	beq.w	8003ca4 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	4a55      	ldr	r2, [pc, #340]	@ (8003aa8 <HAL_GPIO_Init+0x188>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d15d      	bne.n	8003a14 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 800395e:	2201      	movs	r2, #1
 8003960:	697b      	ldr	r3, [r7, #20]
 8003962:	fa02 f303 	lsl.w	r3, r2, r3
 8003966:	43db      	mvns	r3, r3
 8003968:	69fa      	ldr	r2, [r7, #28]
 800396a:	4013      	ands	r3, r2
 800396c:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	f003 0201 	and.w	r2, r3, #1
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	fa02 f303 	lsl.w	r3, r2, r3
 800397c:	69fa      	ldr	r2, [r7, #28]
 800397e:	4313      	orrs	r3, r2
 8003980:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	69fa      	ldr	r2, [r7, #28]
 8003986:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 8003988:	4a48      	ldr	r2, [pc, #288]	@ (8003aac <HAL_GPIO_Init+0x18c>)
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003990:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8003992:	4a46      	ldr	r2, [pc, #280]	@ (8003aac <HAL_GPIO_Init+0x18c>)
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	00db      	lsls	r3, r3, #3
 8003998:	4413      	add	r3, r2
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 800399e:	69bb      	ldr	r3, [r7, #24]
 80039a0:	08da      	lsrs	r2, r3, #3
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	3208      	adds	r2, #8
 80039a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039aa:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 80039ac:	69bb      	ldr	r3, [r7, #24]
 80039ae:	f003 0307 	and.w	r3, r3, #7
 80039b2:	009b      	lsls	r3, r3, #2
 80039b4:	220f      	movs	r2, #15
 80039b6:	fa02 f303 	lsl.w	r3, r2, r3
 80039ba:	43db      	mvns	r3, r3
 80039bc:	69fa      	ldr	r2, [r7, #28]
 80039be:	4013      	ands	r3, r2
 80039c0:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 80039c2:	69bb      	ldr	r3, [r7, #24]
 80039c4:	f003 0307 	and.w	r3, r3, #7
 80039c8:	009b      	lsls	r3, r3, #2
 80039ca:	220b      	movs	r2, #11
 80039cc:	fa02 f303 	lsl.w	r3, r2, r3
 80039d0:	69fa      	ldr	r2, [r7, #28]
 80039d2:	4313      	orrs	r3, r2
 80039d4:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 80039d6:	69bb      	ldr	r3, [r7, #24]
 80039d8:	08da      	lsrs	r2, r3, #3
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	3208      	adds	r2, #8
 80039de:	69f9      	ldr	r1, [r7, #28]
 80039e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 80039e4:	693b      	ldr	r3, [r7, #16]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 80039ea:	69bb      	ldr	r3, [r7, #24]
 80039ec:	005b      	lsls	r3, r3, #1
 80039ee:	2203      	movs	r2, #3
 80039f0:	fa02 f303 	lsl.w	r3, r2, r3
 80039f4:	43db      	mvns	r3, r3
 80039f6:	69fa      	ldr	r2, [r7, #28]
 80039f8:	4013      	ands	r3, r2
 80039fa:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * GPIO_MODER_MODE1_Pos));
 80039fc:	69bb      	ldr	r3, [r7, #24]
 80039fe:	005b      	lsls	r3, r3, #1
 8003a00:	2202      	movs	r2, #2
 8003a02:	fa02 f303 	lsl.w	r3, r2, r3
 8003a06:	69fa      	ldr	r2, [r7, #28]
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	69fa      	ldr	r2, [r7, #28]
 8003a10:	601a      	str	r2, [r3, #0]
 8003a12:	e067      	b.n	8003ae4 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	2b02      	cmp	r3, #2
 8003a1a:	d003      	beq.n	8003a24 <HAL_GPIO_Init+0x104>
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	2b12      	cmp	r3, #18
 8003a22:	d145      	bne.n	8003ab0 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	08da      	lsrs	r2, r3, #3
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	3208      	adds	r2, #8
 8003a2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a30:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8003a32:	697b      	ldr	r3, [r7, #20]
 8003a34:	f003 0307 	and.w	r3, r3, #7
 8003a38:	009b      	lsls	r3, r3, #2
 8003a3a:	220f      	movs	r2, #15
 8003a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a40:	43db      	mvns	r3, r3
 8003a42:	69fa      	ldr	r2, [r7, #28]
 8003a44:	4013      	ands	r3, r2
 8003a46:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	691b      	ldr	r3, [r3, #16]
 8003a4c:	f003 020f 	and.w	r2, r3, #15
 8003a50:	697b      	ldr	r3, [r7, #20]
 8003a52:	f003 0307 	and.w	r3, r3, #7
 8003a56:	009b      	lsls	r3, r3, #2
 8003a58:	fa02 f303 	lsl.w	r3, r2, r3
 8003a5c:	69fa      	ldr	r2, [r7, #28]
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	08da      	lsrs	r2, r3, #3
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	3208      	adds	r2, #8
 8003a6a:	69f9      	ldr	r1, [r7, #28]
 8003a6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8003a70:	693b      	ldr	r3, [r7, #16]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8003a76:	69bb      	ldr	r3, [r7, #24]
 8003a78:	005b      	lsls	r3, r3, #1
 8003a7a:	2203      	movs	r2, #3
 8003a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a80:	43db      	mvns	r3, r3
 8003a82:	69fa      	ldr	r2, [r7, #28]
 8003a84:	4013      	ands	r3, r2
 8003a86:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	f003 0203 	and.w	r2, r3, #3
 8003a90:	69bb      	ldr	r3, [r7, #24]
 8003a92:	005b      	lsls	r3, r3, #1
 8003a94:	fa02 f303 	lsl.w	r3, r2, r3
 8003a98:	69fa      	ldr	r2, [r7, #28]
 8003a9a:	4313      	orrs	r3, r2
 8003a9c:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	69fa      	ldr	r2, [r7, #28]
 8003aa2:	601a      	str	r2, [r3, #0]
 8003aa4:	e01e      	b.n	8003ae4 <HAL_GPIO_Init+0x1c4>
 8003aa6:	bf00      	nop
 8003aa8:	46020000 	.word	0x46020000
 8003aac:	080092dc 	.word	0x080092dc
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 8003ab0:	693b      	ldr	r3, [r7, #16]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * GPIO_MODER_MODE1_Pos));
 8003ab6:	69bb      	ldr	r3, [r7, #24]
 8003ab8:	005b      	lsls	r3, r3, #1
 8003aba:	2203      	movs	r2, #3
 8003abc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac0:	43db      	mvns	r3, r3
 8003ac2:	69fa      	ldr	r2, [r7, #28]
 8003ac4:	4013      	ands	r3, r2
 8003ac6:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * GPIO_MODER_MODE1_Pos));
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	f003 0203 	and.w	r2, r3, #3
 8003ad0:	69bb      	ldr	r3, [r7, #24]
 8003ad2:	005b      	lsls	r3, r3, #1
 8003ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad8:	69fa      	ldr	r2, [r7, #28]
 8003ada:	4313      	orrs	r3, r2
 8003adc:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	69fa      	ldr	r2, [r7, #28]
 8003ae2:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	2b01      	cmp	r3, #1
 8003aea:	d00b      	beq.n	8003b04 <HAL_GPIO_Init+0x1e4>
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	2b02      	cmp	r3, #2
 8003af2:	d007      	beq.n	8003b04 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003af8:	2b11      	cmp	r3, #17
 8003afa:	d003      	beq.n	8003b04 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	2b12      	cmp	r3, #18
 8003b02:	d130      	bne.n	8003b66 <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	689b      	ldr	r3, [r3, #8]
 8003b08:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8003b0a:	69bb      	ldr	r3, [r7, #24]
 8003b0c:	005b      	lsls	r3, r3, #1
 8003b0e:	2203      	movs	r2, #3
 8003b10:	fa02 f303 	lsl.w	r3, r2, r3
 8003b14:	43db      	mvns	r3, r3
 8003b16:	69fa      	ldr	r2, [r7, #28]
 8003b18:	4013      	ands	r3, r2
 8003b1a:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * GPIO_OSPEEDR_OSPEED1_Pos));
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	68da      	ldr	r2, [r3, #12]
 8003b20:	69bb      	ldr	r3, [r7, #24]
 8003b22:	005b      	lsls	r3, r3, #1
 8003b24:	fa02 f303 	lsl.w	r3, r2, r3
 8003b28:	69fa      	ldr	r2, [r7, #28]
 8003b2a:	4313      	orrs	r3, r2
 8003b2c:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	69fa      	ldr	r2, [r7, #28]
 8003b32:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8003b34:	693b      	ldr	r3, [r7, #16]
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	69bb      	ldr	r3, [r7, #24]
 8003b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b42:	43db      	mvns	r3, r3
 8003b44:	69fa      	ldr	r2, [r7, #28]
 8003b46:	4013      	ands	r3, r2
 8003b48:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	091b      	lsrs	r3, r3, #4
 8003b50:	f003 0201 	and.w	r2, r3, #1
 8003b54:	69bb      	ldr	r3, [r7, #24]
 8003b56:	fa02 f303 	lsl.w	r3, r2, r3
 8003b5a:	69fa      	ldr	r2, [r7, #28]
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8003b60:	693b      	ldr	r3, [r7, #16]
 8003b62:	69fa      	ldr	r2, [r7, #28]
 8003b64:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	2b03      	cmp	r3, #3
 8003b6c:	d017      	beq.n	8003b9e <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8003b6e:	693b      	ldr	r3, [r7, #16]
 8003b70:	68db      	ldr	r3, [r3, #12]
 8003b72:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8003b74:	69bb      	ldr	r3, [r7, #24]
 8003b76:	005b      	lsls	r3, r3, #1
 8003b78:	2203      	movs	r2, #3
 8003b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b7e:	43db      	mvns	r3, r3
 8003b80:	69fa      	ldr	r2, [r7, #28]
 8003b82:	4013      	ands	r3, r2
 8003b84:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * GPIO_PUPDR_PUPD1_Pos));
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	689a      	ldr	r2, [r3, #8]
 8003b8a:	69bb      	ldr	r3, [r7, #24]
 8003b8c:	005b      	lsls	r3, r3, #1
 8003b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b92:	69fa      	ldr	r2, [r7, #28]
 8003b94:	4313      	orrs	r3, r2
 8003b96:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 8003b98:	693b      	ldr	r3, [r7, #16]
 8003b9a:	69fa      	ldr	r2, [r7, #28]
 8003b9c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d07c      	beq.n	8003ca4 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8003baa:	4a47      	ldr	r2, [pc, #284]	@ (8003cc8 <HAL_GPIO_Init+0x3a8>)
 8003bac:	697b      	ldr	r3, [r7, #20]
 8003bae:	089b      	lsrs	r3, r3, #2
 8003bb0:	3318      	adds	r3, #24
 8003bb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bb6:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8003bb8:	697b      	ldr	r3, [r7, #20]
 8003bba:	f003 0303 	and.w	r3, r3, #3
 8003bbe:	00db      	lsls	r3, r3, #3
 8003bc0:	220f      	movs	r2, #15
 8003bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc6:	43db      	mvns	r3, r3
 8003bc8:	69fa      	ldr	r2, [r7, #28]
 8003bca:	4013      	ands	r3, r2
 8003bcc:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (EXTI_EXTICR1_EXTI1_Pos * (position & 0x03U)));
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	0a9a      	lsrs	r2, r3, #10
 8003bd2:	4b3e      	ldr	r3, [pc, #248]	@ (8003ccc <HAL_GPIO_Init+0x3ac>)
 8003bd4:	4013      	ands	r3, r2
 8003bd6:	697a      	ldr	r2, [r7, #20]
 8003bd8:	f002 0203 	and.w	r2, r2, #3
 8003bdc:	00d2      	lsls	r2, r2, #3
 8003bde:	4093      	lsls	r3, r2
 8003be0:	69fa      	ldr	r2, [r7, #28]
 8003be2:	4313      	orrs	r3, r2
 8003be4:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 8003be6:	4938      	ldr	r1, [pc, #224]	@ (8003cc8 <HAL_GPIO_Init+0x3a8>)
 8003be8:	697b      	ldr	r3, [r7, #20]
 8003bea:	089b      	lsrs	r3, r3, #2
 8003bec:	3318      	adds	r3, #24
 8003bee:	69fa      	ldr	r2, [r7, #28]
 8003bf0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8003bf4:	4b34      	ldr	r3, [pc, #208]	@ (8003cc8 <HAL_GPIO_Init+0x3a8>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	43db      	mvns	r3, r3
 8003bfe:	69fa      	ldr	r2, [r7, #28]
 8003c00:	4013      	ands	r3, r2
 8003c02:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d003      	beq.n	8003c18 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8003c10:	69fa      	ldr	r2, [r7, #28]
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	4313      	orrs	r3, r2
 8003c16:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8003c18:	4a2b      	ldr	r2, [pc, #172]	@ (8003cc8 <HAL_GPIO_Init+0x3a8>)
 8003c1a:	69fb      	ldr	r3, [r7, #28]
 8003c1c:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8003c1e:	4b2a      	ldr	r3, [pc, #168]	@ (8003cc8 <HAL_GPIO_Init+0x3a8>)
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	43db      	mvns	r3, r3
 8003c28:	69fa      	ldr	r2, [r7, #28]
 8003c2a:	4013      	ands	r3, r2
 8003c2c:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d003      	beq.n	8003c42 <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 8003c3a:	69fa      	ldr	r2, [r7, #28]
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 8003c42:	4a21      	ldr	r2, [pc, #132]	@ (8003cc8 <HAL_GPIO_Init+0x3a8>)
 8003c44:	69fb      	ldr	r3, [r7, #28]
 8003c46:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8003c48:	4b1f      	ldr	r3, [pc, #124]	@ (8003cc8 <HAL_GPIO_Init+0x3a8>)
 8003c4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003c4e:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	43db      	mvns	r3, r3
 8003c54:	69fa      	ldr	r2, [r7, #28]
 8003c56:	4013      	ands	r3, r2
 8003c58:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d003      	beq.n	8003c6e <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 8003c66:	69fa      	ldr	r2, [r7, #28]
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8003c6e:	4a16      	ldr	r2, [pc, #88]	@ (8003cc8 <HAL_GPIO_Init+0x3a8>)
 8003c70:	69fb      	ldr	r3, [r7, #28]
 8003c72:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84

        tmp = EXTI->IMR1;
 8003c76:	4b14      	ldr	r3, [pc, #80]	@ (8003cc8 <HAL_GPIO_Init+0x3a8>)
 8003c78:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003c7c:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	43db      	mvns	r3, r3
 8003c82:	69fa      	ldr	r2, [r7, #28]
 8003c84:	4013      	ands	r3, r2
 8003c86:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d003      	beq.n	8003c9c <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8003c94:	69fa      	ldr	r2, [r7, #28]
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8003c9c:	4a0a      	ldr	r2, [pc, #40]	@ (8003cc8 <HAL_GPIO_Init+0x3a8>)
 8003c9e:	69fb      	ldr	r3, [r7, #28]
 8003ca0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
      }
    }
    position++;
 8003ca4:	697b      	ldr	r3, [r7, #20]
 8003ca6:	3301      	adds	r3, #1
 8003ca8:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	681a      	ldr	r2, [r3, #0]
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	fa22 f303 	lsr.w	r3, r2, r3
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	f47f ae3d 	bne.w	8003934 <HAL_GPIO_Init+0x14>
  }
}
 8003cba:	bf00      	nop
 8003cbc:	bf00      	nop
 8003cbe:	3724      	adds	r7, #36	@ 0x24
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc6:	4770      	bx	lr
 8003cc8:	46022000 	.word	0x46022000
 8003ccc:	002f7f7f 	.word	0x002f7f7f

08003cd0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b082      	sub	sp, #8
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d101      	bne.n	8003ce2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	e08d      	b.n	8003dfe <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ce8:	b2db      	uxtb	r3, r3
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d106      	bne.n	8003cfc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003cf6:	6878      	ldr	r0, [r7, #4]
 8003cf8:	f7fc ffc6 	bl	8000c88 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2224      	movs	r2, #36	@ 0x24
 8003d00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	681a      	ldr	r2, [r3, #0]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f022 0201 	bic.w	r2, r2, #1
 8003d12:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	685a      	ldr	r2, [r3, #4]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003d20:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	689a      	ldr	r2, [r3, #8]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003d30:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	68db      	ldr	r3, [r3, #12]
 8003d36:	2b01      	cmp	r3, #1
 8003d38:	d107      	bne.n	8003d4a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	689a      	ldr	r2, [r3, #8]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003d46:	609a      	str	r2, [r3, #8]
 8003d48:	e006      	b.n	8003d58 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	689a      	ldr	r2, [r3, #8]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003d56:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	68db      	ldr	r3, [r3, #12]
 8003d5c:	2b02      	cmp	r3, #2
 8003d5e:	d108      	bne.n	8003d72 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	685a      	ldr	r2, [r3, #4]
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003d6e:	605a      	str	r2, [r3, #4]
 8003d70:	e007      	b.n	8003d82 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	685a      	ldr	r2, [r3, #4]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003d80:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	687a      	ldr	r2, [r7, #4]
 8003d8a:	6812      	ldr	r2, [r2, #0]
 8003d8c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003d90:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003d94:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	68da      	ldr	r2, [r3, #12]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003da4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	691a      	ldr	r2, [r3, #16]
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	695b      	ldr	r3, [r3, #20]
 8003dae:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	699b      	ldr	r3, [r3, #24]
 8003db6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	430a      	orrs	r2, r1
 8003dbe:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	69d9      	ldr	r1, [r3, #28]
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6a1a      	ldr	r2, [r3, #32]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	430a      	orrs	r2, r1
 8003dce:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	681a      	ldr	r2, [r3, #0]
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f042 0201 	orr.w	r2, r2, #1
 8003dde:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2200      	movs	r2, #0
 8003de4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2220      	movs	r2, #32
 8003dea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2200      	movs	r2, #0
 8003df2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2200      	movs	r2, #0
 8003df8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003dfc:	2300      	movs	r3, #0
}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	3708      	adds	r7, #8
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bd80      	pop	{r7, pc}

08003e06 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003e06:	b480      	push	{r7}
 8003e08:	b083      	sub	sp, #12
 8003e0a:	af00      	add	r7, sp, #0
 8003e0c:	6078      	str	r0, [r7, #4]
 8003e0e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e16:	b2db      	uxtb	r3, r3
 8003e18:	2b20      	cmp	r3, #32
 8003e1a:	d138      	bne.n	8003e8e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003e22:	2b01      	cmp	r3, #1
 8003e24:	d101      	bne.n	8003e2a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003e26:	2302      	movs	r3, #2
 8003e28:	e032      	b.n	8003e90 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2201      	movs	r2, #1
 8003e2e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2224      	movs	r2, #36	@ 0x24
 8003e36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	681a      	ldr	r2, [r3, #0]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f022 0201 	bic.w	r2, r2, #1
 8003e48:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	681a      	ldr	r2, [r3, #0]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003e58:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	6819      	ldr	r1, [r3, #0]
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	683a      	ldr	r2, [r7, #0]
 8003e66:	430a      	orrs	r2, r1
 8003e68:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	681a      	ldr	r2, [r3, #0]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f042 0201 	orr.w	r2, r2, #1
 8003e78:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2220      	movs	r2, #32
 8003e7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2200      	movs	r2, #0
 8003e86:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	e000      	b.n	8003e90 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003e8e:	2302      	movs	r3, #2
  }
}
 8003e90:	4618      	mov	r0, r3
 8003e92:	370c      	adds	r7, #12
 8003e94:	46bd      	mov	sp, r7
 8003e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9a:	4770      	bx	lr

08003e9c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b085      	sub	sp, #20
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
 8003ea4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003eac:	b2db      	uxtb	r3, r3
 8003eae:	2b20      	cmp	r3, #32
 8003eb0:	d139      	bne.n	8003f26 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003eb8:	2b01      	cmp	r3, #1
 8003eba:	d101      	bne.n	8003ec0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003ebc:	2302      	movs	r3, #2
 8003ebe:	e033      	b.n	8003f28 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2224      	movs	r2, #36	@ 0x24
 8003ecc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	681a      	ldr	r2, [r3, #0]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f022 0201 	bic.w	r2, r2, #1
 8003ede:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003eee:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	021b      	lsls	r3, r3, #8
 8003ef4:	68fa      	ldr	r2, [r7, #12]
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	68fa      	ldr	r2, [r7, #12]
 8003f00:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	681a      	ldr	r2, [r3, #0]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f042 0201 	orr.w	r2, r2, #1
 8003f10:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2220      	movs	r2, #32
 8003f16:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003f22:	2300      	movs	r3, #0
 8003f24:	e000      	b.n	8003f28 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003f26:	2302      	movs	r3, #2
  }
}
 8003f28:	4618      	mov	r0, r3
 8003f2a:	3714      	adds	r7, #20
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f32:	4770      	bx	lr

08003f34 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 8003f34:	b480      	push	{r7}
 8003f36:	b085      	sub	sp, #20
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 8003f40:	4b0b      	ldr	r3, [pc, #44]	@ (8003f70 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f003 0301 	and.w	r3, r3, #1
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d002      	beq.n	8003f52 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	73fb      	strb	r3, [r7, #15]
 8003f50:	e007      	b.n	8003f62 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 8003f52:	4b07      	ldr	r3, [pc, #28]	@ (8003f70 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f023 0204 	bic.w	r2, r3, #4
 8003f5a:	4905      	ldr	r1, [pc, #20]	@ (8003f70 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	600b      	str	r3, [r1, #0]
  }

  return status;
 8003f62:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f64:	4618      	mov	r0, r3
 8003f66:	3714      	adds	r7, #20
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6e:	4770      	bx	lr
 8003f70:	40030400 	.word	0x40030400

08003f74 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 8003f74:	b480      	push	{r7}
 8003f76:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 8003f78:	4b05      	ldr	r3, [pc, #20]	@ (8003f90 <HAL_ICACHE_Enable+0x1c>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a04      	ldr	r2, [pc, #16]	@ (8003f90 <HAL_ICACHE_Enable+0x1c>)
 8003f7e:	f043 0301 	orr.w	r3, r3, #1
 8003f82:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8003f84:	2300      	movs	r3, #0
}
 8003f86:	4618      	mov	r0, r3
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8e:	4770      	bx	lr
 8003f90:	40030400 	.word	0x40030400

08003f94 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b086      	sub	sp, #24
 8003f98:	af02      	add	r7, sp, #8
 8003f9a:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d101      	bne.n	8003fa6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	e108      	b.n	80041b8 <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8003fb2:	b2db      	uxtb	r3, r3
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d106      	bne.n	8003fc6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003fc0:	6878      	ldr	r0, [r7, #4]
 8003fc2:	f7fe f911 	bl	80021e8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2203      	movs	r2, #3
 8003fca:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	4a7b      	ldr	r2, [pc, #492]	@ (80041c0 <HAL_PCD_Init+0x22c>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d102      	bne.n	8003fdc <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	f004 fe94 	bl	8008d0e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6818      	ldr	r0, [r3, #0]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	7c1a      	ldrb	r2, [r3, #16]
 8003fee:	f88d 2000 	strb.w	r2, [sp]
 8003ff2:	3304      	adds	r3, #4
 8003ff4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003ff6:	f004 fe5d 	bl	8008cb4 <USB_CoreInit>
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d005      	beq.n	800400c <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2202      	movs	r2, #2
 8004004:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004008:	2301      	movs	r3, #1
 800400a:	e0d5      	b.n	80041b8 <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	2100      	movs	r1, #0
 8004012:	4618      	mov	r0, r3
 8004014:	f004 fe8c 	bl	8008d30 <USB_SetCurrentMode>
 8004018:	4603      	mov	r3, r0
 800401a:	2b00      	cmp	r3, #0
 800401c:	d005      	beq.n	800402a <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2202      	movs	r2, #2
 8004022:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004026:	2301      	movs	r3, #1
 8004028:	e0c6      	b.n	80041b8 <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800402a:	2300      	movs	r3, #0
 800402c:	73fb      	strb	r3, [r7, #15]
 800402e:	e04a      	b.n	80040c6 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004030:	7bfa      	ldrb	r2, [r7, #15]
 8004032:	6879      	ldr	r1, [r7, #4]
 8004034:	4613      	mov	r3, r2
 8004036:	00db      	lsls	r3, r3, #3
 8004038:	4413      	add	r3, r2
 800403a:	009b      	lsls	r3, r3, #2
 800403c:	440b      	add	r3, r1
 800403e:	3315      	adds	r3, #21
 8004040:	2201      	movs	r2, #1
 8004042:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004044:	7bfa      	ldrb	r2, [r7, #15]
 8004046:	6879      	ldr	r1, [r7, #4]
 8004048:	4613      	mov	r3, r2
 800404a:	00db      	lsls	r3, r3, #3
 800404c:	4413      	add	r3, r2
 800404e:	009b      	lsls	r3, r3, #2
 8004050:	440b      	add	r3, r1
 8004052:	3314      	adds	r3, #20
 8004054:	7bfa      	ldrb	r2, [r7, #15]
 8004056:	701a      	strb	r2, [r3, #0]
#if defined (USB_OTG_FS) || defined (USB_OTG_HS)
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004058:	7bfa      	ldrb	r2, [r7, #15]
 800405a:	7bfb      	ldrb	r3, [r7, #15]
 800405c:	b298      	uxth	r0, r3
 800405e:	6879      	ldr	r1, [r7, #4]
 8004060:	4613      	mov	r3, r2
 8004062:	00db      	lsls	r3, r3, #3
 8004064:	4413      	add	r3, r2
 8004066:	009b      	lsls	r3, r3, #2
 8004068:	440b      	add	r3, r1
 800406a:	332e      	adds	r3, #46	@ 0x2e
 800406c:	4602      	mov	r2, r0
 800406e:	801a      	strh	r2, [r3, #0]
#endif /* defined (USB_OTG_FS) || defined (USB_OTG_HS) */
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004070:	7bfa      	ldrb	r2, [r7, #15]
 8004072:	6879      	ldr	r1, [r7, #4]
 8004074:	4613      	mov	r3, r2
 8004076:	00db      	lsls	r3, r3, #3
 8004078:	4413      	add	r3, r2
 800407a:	009b      	lsls	r3, r3, #2
 800407c:	440b      	add	r3, r1
 800407e:	3318      	adds	r3, #24
 8004080:	2200      	movs	r2, #0
 8004082:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004084:	7bfa      	ldrb	r2, [r7, #15]
 8004086:	6879      	ldr	r1, [r7, #4]
 8004088:	4613      	mov	r3, r2
 800408a:	00db      	lsls	r3, r3, #3
 800408c:	4413      	add	r3, r2
 800408e:	009b      	lsls	r3, r3, #2
 8004090:	440b      	add	r3, r1
 8004092:	331c      	adds	r3, #28
 8004094:	2200      	movs	r2, #0
 8004096:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004098:	7bfa      	ldrb	r2, [r7, #15]
 800409a:	6879      	ldr	r1, [r7, #4]
 800409c:	4613      	mov	r3, r2
 800409e:	00db      	lsls	r3, r3, #3
 80040a0:	4413      	add	r3, r2
 80040a2:	009b      	lsls	r3, r3, #2
 80040a4:	440b      	add	r3, r1
 80040a6:	3320      	adds	r3, #32
 80040a8:	2200      	movs	r2, #0
 80040aa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80040ac:	7bfa      	ldrb	r2, [r7, #15]
 80040ae:	6879      	ldr	r1, [r7, #4]
 80040b0:	4613      	mov	r3, r2
 80040b2:	00db      	lsls	r3, r3, #3
 80040b4:	4413      	add	r3, r2
 80040b6:	009b      	lsls	r3, r3, #2
 80040b8:	440b      	add	r3, r1
 80040ba:	3324      	adds	r3, #36	@ 0x24
 80040bc:	2200      	movs	r2, #0
 80040be:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80040c0:	7bfb      	ldrb	r3, [r7, #15]
 80040c2:	3301      	adds	r3, #1
 80040c4:	73fb      	strb	r3, [r7, #15]
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	791b      	ldrb	r3, [r3, #4]
 80040ca:	7bfa      	ldrb	r2, [r7, #15]
 80040cc:	429a      	cmp	r2, r3
 80040ce:	d3af      	bcc.n	8004030 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80040d0:	2300      	movs	r3, #0
 80040d2:	73fb      	strb	r3, [r7, #15]
 80040d4:	e044      	b.n	8004160 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80040d6:	7bfa      	ldrb	r2, [r7, #15]
 80040d8:	6879      	ldr	r1, [r7, #4]
 80040da:	4613      	mov	r3, r2
 80040dc:	00db      	lsls	r3, r3, #3
 80040de:	4413      	add	r3, r2
 80040e0:	009b      	lsls	r3, r3, #2
 80040e2:	440b      	add	r3, r1
 80040e4:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80040e8:	2200      	movs	r2, #0
 80040ea:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80040ec:	7bfa      	ldrb	r2, [r7, #15]
 80040ee:	6879      	ldr	r1, [r7, #4]
 80040f0:	4613      	mov	r3, r2
 80040f2:	00db      	lsls	r3, r3, #3
 80040f4:	4413      	add	r3, r2
 80040f6:	009b      	lsls	r3, r3, #2
 80040f8:	440b      	add	r3, r1
 80040fa:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80040fe:	7bfa      	ldrb	r2, [r7, #15]
 8004100:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004102:	7bfa      	ldrb	r2, [r7, #15]
 8004104:	6879      	ldr	r1, [r7, #4]
 8004106:	4613      	mov	r3, r2
 8004108:	00db      	lsls	r3, r3, #3
 800410a:	4413      	add	r3, r2
 800410c:	009b      	lsls	r3, r3, #2
 800410e:	440b      	add	r3, r1
 8004110:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8004114:	2200      	movs	r2, #0
 8004116:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004118:	7bfa      	ldrb	r2, [r7, #15]
 800411a:	6879      	ldr	r1, [r7, #4]
 800411c:	4613      	mov	r3, r2
 800411e:	00db      	lsls	r3, r3, #3
 8004120:	4413      	add	r3, r2
 8004122:	009b      	lsls	r3, r3, #2
 8004124:	440b      	add	r3, r1
 8004126:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800412a:	2200      	movs	r2, #0
 800412c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800412e:	7bfa      	ldrb	r2, [r7, #15]
 8004130:	6879      	ldr	r1, [r7, #4]
 8004132:	4613      	mov	r3, r2
 8004134:	00db      	lsls	r3, r3, #3
 8004136:	4413      	add	r3, r2
 8004138:	009b      	lsls	r3, r3, #2
 800413a:	440b      	add	r3, r1
 800413c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8004140:	2200      	movs	r2, #0
 8004142:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004144:	7bfa      	ldrb	r2, [r7, #15]
 8004146:	6879      	ldr	r1, [r7, #4]
 8004148:	4613      	mov	r3, r2
 800414a:	00db      	lsls	r3, r3, #3
 800414c:	4413      	add	r3, r2
 800414e:	009b      	lsls	r3, r3, #2
 8004150:	440b      	add	r3, r1
 8004152:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004156:	2200      	movs	r2, #0
 8004158:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800415a:	7bfb      	ldrb	r3, [r7, #15]
 800415c:	3301      	adds	r3, #1
 800415e:	73fb      	strb	r3, [r7, #15]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	791b      	ldrb	r3, [r3, #4]
 8004164:	7bfa      	ldrb	r2, [r7, #15]
 8004166:	429a      	cmp	r2, r3
 8004168:	d3b5      	bcc.n	80040d6 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6818      	ldr	r0, [r3, #0]
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	7c1a      	ldrb	r2, [r3, #16]
 8004172:	f88d 2000 	strb.w	r2, [sp]
 8004176:	3304      	adds	r3, #4
 8004178:	cb0e      	ldmia	r3, {r1, r2, r3}
 800417a:	f004 fe25 	bl	8008dc8 <USB_DevInit>
 800417e:	4603      	mov	r3, r0
 8004180:	2b00      	cmp	r3, #0
 8004182:	d005      	beq.n	8004190 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2202      	movs	r2, #2
 8004188:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800418c:	2301      	movs	r3, #1
 800418e:	e013      	b.n	80041b8 <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2200      	movs	r2, #0
 8004194:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2201      	movs	r2, #1
 800419a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	7b1b      	ldrb	r3, [r3, #12]
 80041a2:	2b01      	cmp	r3, #1
 80041a4:	d102      	bne.n	80041ac <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80041a6:	6878      	ldr	r0, [r7, #4]
 80041a8:	f000 f80c 	bl	80041c4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4618      	mov	r0, r3
 80041b2:	f004 ffce 	bl	8009152 <USB_DevDisconnect>

  return HAL_OK;
 80041b6:	2300      	movs	r3, #0
}
 80041b8:	4618      	mov	r0, r3
 80041ba:	3710      	adds	r7, #16
 80041bc:	46bd      	mov	sp, r7
 80041be:	bd80      	pop	{r7, pc}
 80041c0:	42040000 	.word	0x42040000

080041c4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80041c4:	b480      	push	{r7}
 80041c6:	b085      	sub	sp, #20
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2201      	movs	r2, #1
 80041d6:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2200      	movs	r2, #0
 80041de:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	699b      	ldr	r3, [r3, #24]
 80041e6:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80041f6:	f043 0303 	orr.w	r3, r3, #3
 80041fa:	68fa      	ldr	r2, [r7, #12]
 80041fc:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80041fe:	2300      	movs	r3, #0
}
 8004200:	4618      	mov	r0, r3
 8004202:	3714      	adds	r7, #20
 8004204:	46bd      	mov	sp, r7
 8004206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420a:	4770      	bx	lr

0800420c <HAL_PWR_EnableBkUpAccess>:
  * @note   After a system reset, the backup domain is protected against
  *         possible unwanted write accesses.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800420c:	b480      	push	{r7}
 800420e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8004210:	4b05      	ldr	r3, [pc, #20]	@ (8004228 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004212:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004214:	4a04      	ldr	r2, [pc, #16]	@ (8004228 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004216:	f043 0301 	orr.w	r3, r3, #1
 800421a:	6293      	str	r3, [r2, #40]	@ 0x28
}
 800421c:	bf00      	nop
 800421e:	46bd      	mov	sp, r7
 8004220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004224:	4770      	bx	lr
 8004226:	bf00      	nop
 8004228:	46020800 	.word	0x46020800

0800422c <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800422c:	b480      	push	{r7}
 800422e:	b085      	sub	sp, #20
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8004234:	4b39      	ldr	r3, [pc, #228]	@ (800431c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004236:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004238:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800423c:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 800423e:	68ba      	ldr	r2, [r7, #8]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	429a      	cmp	r2, r3
 8004244:	d10b      	bne.n	800425e <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800424c:	d905      	bls.n	800425a <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800424e:	4b33      	ldr	r3, [pc, #204]	@ (800431c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004250:	68db      	ldr	r3, [r3, #12]
 8004252:	4a32      	ldr	r2, [pc, #200]	@ (800431c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004254:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004258:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 800425a:	2300      	movs	r3, #0
 800425c:	e057      	b.n	800430e <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004264:	d90a      	bls.n	800427c <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8004266:	4b2d      	ldr	r3, [pc, #180]	@ (800431c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004268:	68db      	ldr	r3, [r3, #12]
 800426a:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	4313      	orrs	r3, r2
 8004272:	4a2a      	ldr	r2, [pc, #168]	@ (800431c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004274:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004278:	60d3      	str	r3, [r2, #12]
 800427a:	e007      	b.n	800428c <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 800427c:	4b27      	ldr	r3, [pc, #156]	@ (800431c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800427e:	68db      	ldr	r3, [r3, #12]
 8004280:	f423 22e0 	bic.w	r2, r3, #458752	@ 0x70000
 8004284:	4925      	ldr	r1, [pc, #148]	@ (800431c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	4313      	orrs	r3, r2
 800428a:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800428c:	4b24      	ldr	r3, [pc, #144]	@ (8004320 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a24      	ldr	r2, [pc, #144]	@ (8004324 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8004292:	fba2 2303 	umull	r2, r3, r2, r3
 8004296:	099b      	lsrs	r3, r3, #6
 8004298:	2232      	movs	r2, #50	@ 0x32
 800429a:	fb02 f303 	mul.w	r3, r2, r3
 800429e:	4a21      	ldr	r2, [pc, #132]	@ (8004324 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80042a0:	fba2 2303 	umull	r2, r3, r2, r3
 80042a4:	099b      	lsrs	r3, r3, #6
 80042a6:	3301      	adds	r3, #1
 80042a8:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 80042aa:	e002      	b.n	80042b2 <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	3b01      	subs	r3, #1
 80042b0:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 80042b2:	4b1a      	ldr	r3, [pc, #104]	@ (800431c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80042b4:	68db      	ldr	r3, [r3, #12]
 80042b6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d102      	bne.n	80042c4 <HAL_PWREx_ControlVoltageScaling+0x98>
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d1f3      	bne.n	80042ac <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d01b      	beq.n	8004302 <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80042ca:	4b15      	ldr	r3, [pc, #84]	@ (8004320 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4a15      	ldr	r2, [pc, #84]	@ (8004324 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80042d0:	fba2 2303 	umull	r2, r3, r2, r3
 80042d4:	099b      	lsrs	r3, r3, #6
 80042d6:	2232      	movs	r2, #50	@ 0x32
 80042d8:	fb02 f303 	mul.w	r3, r2, r3
 80042dc:	4a11      	ldr	r2, [pc, #68]	@ (8004324 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80042de:	fba2 2303 	umull	r2, r3, r2, r3
 80042e2:	099b      	lsrs	r3, r3, #6
 80042e4:	3301      	adds	r3, #1
 80042e6:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 80042e8:	e002      	b.n	80042f0 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	3b01      	subs	r3, #1
 80042ee:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 80042f0:	4b0a      	ldr	r3, [pc, #40]	@ (800431c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80042f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042f4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d102      	bne.n	8004302 <HAL_PWREx_ControlVoltageScaling+0xd6>
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d1f3      	bne.n	80042ea <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d101      	bne.n	800430c <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 8004308:	2303      	movs	r3, #3
 800430a:	e000      	b.n	800430e <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 800430c:	2300      	movs	r3, #0
}
 800430e:	4618      	mov	r0, r3
 8004310:	3714      	adds	r7, #20
 8004312:	46bd      	mov	sp, r7
 8004314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004318:	4770      	bx	lr
 800431a:	bf00      	nop
 800431c:	46020800 	.word	0x46020800
 8004320:	20000000 	.word	0x20000000
 8004324:	10624dd3 	.word	0x10624dd3

08004328 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004328:	b480      	push	{r7}
 800432a:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 800432c:	4b04      	ldr	r3, [pc, #16]	@ (8004340 <HAL_PWREx_GetVoltageRange+0x18>)
 800432e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004330:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
}
 8004334:	4618      	mov	r0, r3
 8004336:	46bd      	mov	sp, r7
 8004338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433c:	4770      	bx	lr
 800433e:	bf00      	nop
 8004340:	46020800 	.word	0x46020800

08004344 <HAL_PWREx_ConfigSupply>:
  *                        @arg PWR_LDO_SUPPLY  : The LDO regulator supplies the Vcore Power Domains.
  *                        @arg PWR_SMPS_SUPPLY : The SMPS regulator supplies the Vcore Power Domains.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
 8004344:	b480      	push	{r7}
 8004346:	b085      	sub	sp, #20
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_SUPPLY(SupplySource));

  /* Set maximum time out */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800434c:	4b22      	ldr	r3, [pc, #136]	@ (80043d8 <HAL_PWREx_ConfigSupply+0x94>)
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a22      	ldr	r2, [pc, #136]	@ (80043dc <HAL_PWREx_ConfigSupply+0x98>)
 8004352:	fba2 2303 	umull	r2, r3, r2, r3
 8004356:	099b      	lsrs	r3, r3, #6
 8004358:	2232      	movs	r2, #50	@ 0x32
 800435a:	fb02 f303 	mul.w	r3, r2, r3
 800435e:	4a1f      	ldr	r2, [pc, #124]	@ (80043dc <HAL_PWREx_ConfigSupply+0x98>)
 8004360:	fba2 2303 	umull	r2, r3, r2, r3
 8004364:	099b      	lsrs	r3, r3, #6
 8004366:	3301      	adds	r3, #1
 8004368:	60fb      	str	r3, [r7, #12]

  /* Configure the LDO as system regulator supply */
  if (SupplySource == PWR_LDO_SUPPLY)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d113      	bne.n	8004398 <HAL_PWREx_ConfigSupply+0x54>
  {
    /* Set the power supply configuration */
    CLEAR_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8004370:	4b1b      	ldr	r3, [pc, #108]	@ (80043e0 <HAL_PWREx_ConfigSupply+0x9c>)
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	4a1a      	ldr	r2, [pc, #104]	@ (80043e0 <HAL_PWREx_ConfigSupply+0x9c>)
 8004376:	f023 0302 	bic.w	r3, r3, #2
 800437a:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 800437c:	e002      	b.n	8004384 <HAL_PWREx_ConfigSupply+0x40>
    {
      timeout--;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	3b01      	subs	r3, #1
 8004382:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_SET(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 8004384:	4b16      	ldr	r3, [pc, #88]	@ (80043e0 <HAL_PWREx_ConfigSupply+0x9c>)
 8004386:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004388:	f003 0302 	and.w	r3, r3, #2
 800438c:	2b02      	cmp	r3, #2
 800438e:	d116      	bne.n	80043be <HAL_PWREx_ConfigSupply+0x7a>
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d1f3      	bne.n	800437e <HAL_PWREx_ConfigSupply+0x3a>
 8004396:	e012      	b.n	80043be <HAL_PWREx_ConfigSupply+0x7a>
  }
  /* Configure the SMPS as system regulator supply */
  else
  {
    /* Set the power supply configuration */
    SET_BIT(PWR->CR3, PWR_CR3_REGSEL);
 8004398:	4b11      	ldr	r3, [pc, #68]	@ (80043e0 <HAL_PWREx_ConfigSupply+0x9c>)
 800439a:	689b      	ldr	r3, [r3, #8]
 800439c:	4a10      	ldr	r2, [pc, #64]	@ (80043e0 <HAL_PWREx_ConfigSupply+0x9c>)
 800439e:	f043 0302 	orr.w	r3, r3, #2
 80043a2:	6093      	str	r3, [r2, #8]

    /* Wait until system switch on new regulator */
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80043a4:	e002      	b.n	80043ac <HAL_PWREx_ConfigSupply+0x68>
    {
      timeout--;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	3b01      	subs	r3, #1
 80043aa:	60fb      	str	r3, [r7, #12]
    while (HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_REGS) && (timeout != 0U))
 80043ac:	4b0c      	ldr	r3, [pc, #48]	@ (80043e0 <HAL_PWREx_ConfigSupply+0x9c>)
 80043ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043b0:	f003 0302 	and.w	r3, r3, #2
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d102      	bne.n	80043be <HAL_PWREx_ConfigSupply+0x7a>
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d1f3      	bne.n	80043a6 <HAL_PWREx_ConfigSupply+0x62>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d101      	bne.n	80043c8 <HAL_PWREx_ConfigSupply+0x84>
  {
    return HAL_TIMEOUT;
 80043c4:	2303      	movs	r3, #3
 80043c6:	e000      	b.n	80043ca <HAL_PWREx_ConfigSupply+0x86>
  }

  return HAL_OK;
 80043c8:	2300      	movs	r3, #0
}
 80043ca:	4618      	mov	r0, r3
 80043cc:	3714      	adds	r7, #20
 80043ce:	46bd      	mov	sp, r7
 80043d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d4:	4770      	bx	lr
 80043d6:	bf00      	nop
 80043d8:	20000000 	.word	0x20000000
 80043dc:	10624dd3 	.word	0x10624dd3
 80043e0:	46020800 	.word	0x46020800

080043e4 <HAL_PWREx_EnableVddUSB>:
  * @note   Remove VDDUSB electrical and logical isolation, once VDDUSB supply
  *         is present for consumption saving.
  * @retval None.
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80043e4:	b480      	push	{r7}
 80043e6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->SVMCR, PWR_SVMCR_USV);
 80043e8:	4b05      	ldr	r3, [pc, #20]	@ (8004400 <HAL_PWREx_EnableVddUSB+0x1c>)
 80043ea:	691b      	ldr	r3, [r3, #16]
 80043ec:	4a04      	ldr	r2, [pc, #16]	@ (8004400 <HAL_PWREx_EnableVddUSB+0x1c>)
 80043ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80043f2:	6113      	str	r3, [r2, #16]
}
 80043f4:	bf00      	nop
 80043f6:	46bd      	mov	sp, r7
 80043f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fc:	4770      	bx	lr
 80043fe:	bf00      	nop
 8004400:	46020800 	.word	0x46020800

08004404 <HAL_PWREx_DisableUCPDDeadBattery>:
  *         pull-down or to handover control to the UCPD (the UCPD must be
  *         initialized before doing the disable).
  * @retval None.
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004404:	b480      	push	{r7}
 8004406:	af00      	add	r7, sp, #0
  SET_BIT(PWR->UCPDR, PWR_UCPDR_UCPD_DBDIS);
 8004408:	4b05      	ldr	r3, [pc, #20]	@ (8004420 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800440a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800440c:	4a04      	ldr	r2, [pc, #16]	@ (8004420 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800440e:	f043 0301 	orr.w	r3, r3, #1
 8004412:	62d3      	str	r3, [r2, #44]	@ 0x2c
}
 8004414:	bf00      	nop
 8004416:	46bd      	mov	sp, r7
 8004418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441c:	4770      	bx	lr
 800441e:	bf00      	nop
 8004420:	46020800 	.word	0x46020800

08004424 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b08e      	sub	sp, #56	@ 0x38
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 800442c:	2300      	movs	r3, #0
 800442e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d102      	bne.n	800443e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8004438:	2301      	movs	r3, #1
 800443a:	f000 bec8 	b.w	80051ce <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800443e:	4b99      	ldr	r3, [pc, #612]	@ (80046a4 <HAL_RCC_OscConfig+0x280>)
 8004440:	69db      	ldr	r3, [r3, #28]
 8004442:	f003 030c 	and.w	r3, r3, #12
 8004446:	633b      	str	r3, [r7, #48]	@ 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004448:	4b96      	ldr	r3, [pc, #600]	@ (80046a4 <HAL_RCC_OscConfig+0x280>)
 800444a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800444c:	f003 0303 	and.w	r3, r3, #3
 8004450:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f003 0310 	and.w	r3, r3, #16
 800445a:	2b00      	cmp	r3, #0
 800445c:	f000 816c 	beq.w	8004738 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8004460:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004462:	2b00      	cmp	r3, #0
 8004464:	d007      	beq.n	8004476 <HAL_RCC_OscConfig+0x52>
 8004466:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004468:	2b0c      	cmp	r3, #12
 800446a:	f040 80de 	bne.w	800462a <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 800446e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004470:	2b01      	cmp	r3, #1
 8004472:	f040 80da 	bne.w	800462a <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	69db      	ldr	r3, [r3, #28]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d102      	bne.n	8004484 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 800447e:	2301      	movs	r3, #1
 8004480:	f000 bea5 	b.w	80051ce <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004488:	4b86      	ldr	r3, [pc, #536]	@ (80046a4 <HAL_RCC_OscConfig+0x280>)
 800448a:	689b      	ldr	r3, [r3, #8]
 800448c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004490:	2b00      	cmp	r3, #0
 8004492:	d004      	beq.n	800449e <HAL_RCC_OscConfig+0x7a>
 8004494:	4b83      	ldr	r3, [pc, #524]	@ (80046a4 <HAL_RCC_OscConfig+0x280>)
 8004496:	689b      	ldr	r3, [r3, #8]
 8004498:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800449c:	e005      	b.n	80044aa <HAL_RCC_OscConfig+0x86>
 800449e:	4b81      	ldr	r3, [pc, #516]	@ (80046a4 <HAL_RCC_OscConfig+0x280>)
 80044a0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80044a4:	041b      	lsls	r3, r3, #16
 80044a6:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d255      	bcs.n	800455a <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80044ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d10a      	bne.n	80044ca <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044b8:	4618      	mov	r0, r3
 80044ba:	f001 f9e9 	bl	8005890 <RCC_SetFlashLatencyFromMSIRange>
 80044be:	4603      	mov	r3, r0
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d002      	beq.n	80044ca <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 80044c4:	2301      	movs	r3, #1
 80044c6:	f000 be82 	b.w	80051ce <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80044ca:	4b76      	ldr	r3, [pc, #472]	@ (80046a4 <HAL_RCC_OscConfig+0x280>)
 80044cc:	689b      	ldr	r3, [r3, #8]
 80044ce:	4a75      	ldr	r2, [pc, #468]	@ (80046a4 <HAL_RCC_OscConfig+0x280>)
 80044d0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80044d4:	6093      	str	r3, [r2, #8]
 80044d6:	4b73      	ldr	r3, [pc, #460]	@ (80046a4 <HAL_RCC_OscConfig+0x280>)
 80044d8:	689b      	ldr	r3, [r3, #8]
 80044da:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044e2:	4970      	ldr	r1, [pc, #448]	@ (80046a4 <HAL_RCC_OscConfig+0x280>)
 80044e4:	4313      	orrs	r3, r2
 80044e6:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044ec:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 80044f0:	d309      	bcc.n	8004506 <HAL_RCC_OscConfig+0xe2>
 80044f2:	4b6c      	ldr	r3, [pc, #432]	@ (80046a4 <HAL_RCC_OscConfig+0x280>)
 80044f4:	68db      	ldr	r3, [r3, #12]
 80044f6:	f023 021f 	bic.w	r2, r3, #31
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6a1b      	ldr	r3, [r3, #32]
 80044fe:	4969      	ldr	r1, [pc, #420]	@ (80046a4 <HAL_RCC_OscConfig+0x280>)
 8004500:	4313      	orrs	r3, r2
 8004502:	60cb      	str	r3, [r1, #12]
 8004504:	e07e      	b.n	8004604 <HAL_RCC_OscConfig+0x1e0>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800450a:	2b00      	cmp	r3, #0
 800450c:	da0a      	bge.n	8004524 <HAL_RCC_OscConfig+0x100>
 800450e:	4b65      	ldr	r3, [pc, #404]	@ (80046a4 <HAL_RCC_OscConfig+0x280>)
 8004510:	68db      	ldr	r3, [r3, #12]
 8004512:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6a1b      	ldr	r3, [r3, #32]
 800451a:	015b      	lsls	r3, r3, #5
 800451c:	4961      	ldr	r1, [pc, #388]	@ (80046a4 <HAL_RCC_OscConfig+0x280>)
 800451e:	4313      	orrs	r3, r2
 8004520:	60cb      	str	r3, [r1, #12]
 8004522:	e06f      	b.n	8004604 <HAL_RCC_OscConfig+0x1e0>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004528:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800452c:	d30a      	bcc.n	8004544 <HAL_RCC_OscConfig+0x120>
 800452e:	4b5d      	ldr	r3, [pc, #372]	@ (80046a4 <HAL_RCC_OscConfig+0x280>)
 8004530:	68db      	ldr	r3, [r3, #12]
 8004532:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6a1b      	ldr	r3, [r3, #32]
 800453a:	029b      	lsls	r3, r3, #10
 800453c:	4959      	ldr	r1, [pc, #356]	@ (80046a4 <HAL_RCC_OscConfig+0x280>)
 800453e:	4313      	orrs	r3, r2
 8004540:	60cb      	str	r3, [r1, #12]
 8004542:	e05f      	b.n	8004604 <HAL_RCC_OscConfig+0x1e0>
 8004544:	4b57      	ldr	r3, [pc, #348]	@ (80046a4 <HAL_RCC_OscConfig+0x280>)
 8004546:	68db      	ldr	r3, [r3, #12]
 8004548:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6a1b      	ldr	r3, [r3, #32]
 8004550:	03db      	lsls	r3, r3, #15
 8004552:	4954      	ldr	r1, [pc, #336]	@ (80046a4 <HAL_RCC_OscConfig+0x280>)
 8004554:	4313      	orrs	r3, r2
 8004556:	60cb      	str	r3, [r1, #12]
 8004558:	e054      	b.n	8004604 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800455a:	4b52      	ldr	r3, [pc, #328]	@ (80046a4 <HAL_RCC_OscConfig+0x280>)
 800455c:	689b      	ldr	r3, [r3, #8]
 800455e:	4a51      	ldr	r2, [pc, #324]	@ (80046a4 <HAL_RCC_OscConfig+0x280>)
 8004560:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004564:	6093      	str	r3, [r2, #8]
 8004566:	4b4f      	ldr	r3, [pc, #316]	@ (80046a4 <HAL_RCC_OscConfig+0x280>)
 8004568:	689b      	ldr	r3, [r3, #8]
 800456a:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004572:	494c      	ldr	r1, [pc, #304]	@ (80046a4 <HAL_RCC_OscConfig+0x280>)
 8004574:	4313      	orrs	r3, r2
 8004576:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800457c:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8004580:	d309      	bcc.n	8004596 <HAL_RCC_OscConfig+0x172>
 8004582:	4b48      	ldr	r3, [pc, #288]	@ (80046a4 <HAL_RCC_OscConfig+0x280>)
 8004584:	68db      	ldr	r3, [r3, #12]
 8004586:	f023 021f 	bic.w	r2, r3, #31
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6a1b      	ldr	r3, [r3, #32]
 800458e:	4945      	ldr	r1, [pc, #276]	@ (80046a4 <HAL_RCC_OscConfig+0x280>)
 8004590:	4313      	orrs	r3, r2
 8004592:	60cb      	str	r3, [r1, #12]
 8004594:	e028      	b.n	80045e8 <HAL_RCC_OscConfig+0x1c4>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800459a:	2b00      	cmp	r3, #0
 800459c:	da0a      	bge.n	80045b4 <HAL_RCC_OscConfig+0x190>
 800459e:	4b41      	ldr	r3, [pc, #260]	@ (80046a4 <HAL_RCC_OscConfig+0x280>)
 80045a0:	68db      	ldr	r3, [r3, #12]
 80045a2:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6a1b      	ldr	r3, [r3, #32]
 80045aa:	015b      	lsls	r3, r3, #5
 80045ac:	493d      	ldr	r1, [pc, #244]	@ (80046a4 <HAL_RCC_OscConfig+0x280>)
 80045ae:	4313      	orrs	r3, r2
 80045b0:	60cb      	str	r3, [r1, #12]
 80045b2:	e019      	b.n	80045e8 <HAL_RCC_OscConfig+0x1c4>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045bc:	d30a      	bcc.n	80045d4 <HAL_RCC_OscConfig+0x1b0>
 80045be:	4b39      	ldr	r3, [pc, #228]	@ (80046a4 <HAL_RCC_OscConfig+0x280>)
 80045c0:	68db      	ldr	r3, [r3, #12]
 80045c2:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6a1b      	ldr	r3, [r3, #32]
 80045ca:	029b      	lsls	r3, r3, #10
 80045cc:	4935      	ldr	r1, [pc, #212]	@ (80046a4 <HAL_RCC_OscConfig+0x280>)
 80045ce:	4313      	orrs	r3, r2
 80045d0:	60cb      	str	r3, [r1, #12]
 80045d2:	e009      	b.n	80045e8 <HAL_RCC_OscConfig+0x1c4>
 80045d4:	4b33      	ldr	r3, [pc, #204]	@ (80046a4 <HAL_RCC_OscConfig+0x280>)
 80045d6:	68db      	ldr	r3, [r3, #12]
 80045d8:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6a1b      	ldr	r3, [r3, #32]
 80045e0:	03db      	lsls	r3, r3, #15
 80045e2:	4930      	ldr	r1, [pc, #192]	@ (80046a4 <HAL_RCC_OscConfig+0x280>)
 80045e4:	4313      	orrs	r3, r2
 80045e6:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80045e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d10a      	bne.n	8004604 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045f2:	4618      	mov	r0, r3
 80045f4:	f001 f94c 	bl	8005890 <RCC_SetFlashLatencyFromMSIRange>
 80045f8:	4603      	mov	r3, r0
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d002      	beq.n	8004604 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 80045fe:	2301      	movs	r3, #1
 8004600:	f000 bde5 	b.w	80051ce <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8004604:	f001 f8de 	bl	80057c4 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004608:	4b27      	ldr	r3, [pc, #156]	@ (80046a8 <HAL_RCC_OscConfig+0x284>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4618      	mov	r0, r3
 800460e:	f7fd f94f 	bl	80018b0 <HAL_InitTick>
 8004612:	4603      	mov	r3, r0
 8004614:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (status != HAL_OK)
 8004618:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800461c:	2b00      	cmp	r3, #0
 800461e:	f000 808a 	beq.w	8004736 <HAL_RCC_OscConfig+0x312>
        {
          return status;
 8004622:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004626:	f000 bdd2 	b.w	80051ce <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	69db      	ldr	r3, [r3, #28]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d066      	beq.n	8004700 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8004632:	4b1c      	ldr	r3, [pc, #112]	@ (80046a4 <HAL_RCC_OscConfig+0x280>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4a1b      	ldr	r2, [pc, #108]	@ (80046a4 <HAL_RCC_OscConfig+0x280>)
 8004638:	f043 0301 	orr.w	r3, r3, #1
 800463c:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800463e:	f7fd fecd 	bl	80023dc <HAL_GetTick>
 8004642:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8004644:	e009      	b.n	800465a <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004646:	f7fd fec9 	bl	80023dc <HAL_GetTick>
 800464a:	4602      	mov	r2, r0
 800464c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800464e:	1ad3      	subs	r3, r2, r3
 8004650:	2b02      	cmp	r3, #2
 8004652:	d902      	bls.n	800465a <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 8004654:	2303      	movs	r3, #3
 8004656:	f000 bdba 	b.w	80051ce <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800465a:	4b12      	ldr	r3, [pc, #72]	@ (80046a4 <HAL_RCC_OscConfig+0x280>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f003 0304 	and.w	r3, r3, #4
 8004662:	2b00      	cmp	r3, #0
 8004664:	d0ef      	beq.n	8004646 <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8004666:	4b0f      	ldr	r3, [pc, #60]	@ (80046a4 <HAL_RCC_OscConfig+0x280>)
 8004668:	689b      	ldr	r3, [r3, #8]
 800466a:	4a0e      	ldr	r2, [pc, #56]	@ (80046a4 <HAL_RCC_OscConfig+0x280>)
 800466c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004670:	6093      	str	r3, [r2, #8]
 8004672:	4b0c      	ldr	r3, [pc, #48]	@ (80046a4 <HAL_RCC_OscConfig+0x280>)
 8004674:	689b      	ldr	r3, [r3, #8]
 8004676:	f023 4270 	bic.w	r2, r3, #4026531840	@ 0xf0000000
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800467e:	4909      	ldr	r1, [pc, #36]	@ (80046a4 <HAL_RCC_OscConfig+0x280>)
 8004680:	4313      	orrs	r3, r2
 8004682:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004688:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 800468c:	d30e      	bcc.n	80046ac <HAL_RCC_OscConfig+0x288>
 800468e:	4b05      	ldr	r3, [pc, #20]	@ (80046a4 <HAL_RCC_OscConfig+0x280>)
 8004690:	68db      	ldr	r3, [r3, #12]
 8004692:	f023 021f 	bic.w	r2, r3, #31
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6a1b      	ldr	r3, [r3, #32]
 800469a:	4902      	ldr	r1, [pc, #8]	@ (80046a4 <HAL_RCC_OscConfig+0x280>)
 800469c:	4313      	orrs	r3, r2
 800469e:	60cb      	str	r3, [r1, #12]
 80046a0:	e04a      	b.n	8004738 <HAL_RCC_OscConfig+0x314>
 80046a2:	bf00      	nop
 80046a4:	46020c00 	.word	0x46020c00
 80046a8:	20000004 	.word	0x20000004
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	da0a      	bge.n	80046ca <HAL_RCC_OscConfig+0x2a6>
 80046b4:	4b98      	ldr	r3, [pc, #608]	@ (8004918 <HAL_RCC_OscConfig+0x4f4>)
 80046b6:	68db      	ldr	r3, [r3, #12]
 80046b8:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6a1b      	ldr	r3, [r3, #32]
 80046c0:	015b      	lsls	r3, r3, #5
 80046c2:	4995      	ldr	r1, [pc, #596]	@ (8004918 <HAL_RCC_OscConfig+0x4f4>)
 80046c4:	4313      	orrs	r3, r2
 80046c6:	60cb      	str	r3, [r1, #12]
 80046c8:	e036      	b.n	8004738 <HAL_RCC_OscConfig+0x314>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80046d2:	d30a      	bcc.n	80046ea <HAL_RCC_OscConfig+0x2c6>
 80046d4:	4b90      	ldr	r3, [pc, #576]	@ (8004918 <HAL_RCC_OscConfig+0x4f4>)
 80046d6:	68db      	ldr	r3, [r3, #12]
 80046d8:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6a1b      	ldr	r3, [r3, #32]
 80046e0:	029b      	lsls	r3, r3, #10
 80046e2:	498d      	ldr	r1, [pc, #564]	@ (8004918 <HAL_RCC_OscConfig+0x4f4>)
 80046e4:	4313      	orrs	r3, r2
 80046e6:	60cb      	str	r3, [r1, #12]
 80046e8:	e026      	b.n	8004738 <HAL_RCC_OscConfig+0x314>
 80046ea:	4b8b      	ldr	r3, [pc, #556]	@ (8004918 <HAL_RCC_OscConfig+0x4f4>)
 80046ec:	68db      	ldr	r3, [r3, #12]
 80046ee:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6a1b      	ldr	r3, [r3, #32]
 80046f6:	03db      	lsls	r3, r3, #15
 80046f8:	4987      	ldr	r1, [pc, #540]	@ (8004918 <HAL_RCC_OscConfig+0x4f4>)
 80046fa:	4313      	orrs	r3, r2
 80046fc:	60cb      	str	r3, [r1, #12]
 80046fe:	e01b      	b.n	8004738 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8004700:	4b85      	ldr	r3, [pc, #532]	@ (8004918 <HAL_RCC_OscConfig+0x4f4>)
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a84      	ldr	r2, [pc, #528]	@ (8004918 <HAL_RCC_OscConfig+0x4f4>)
 8004706:	f023 0301 	bic.w	r3, r3, #1
 800470a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800470c:	f7fd fe66 	bl	80023dc <HAL_GetTick>
 8004710:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8004712:	e009      	b.n	8004728 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004714:	f7fd fe62 	bl	80023dc <HAL_GetTick>
 8004718:	4602      	mov	r2, r0
 800471a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800471c:	1ad3      	subs	r3, r2, r3
 800471e:	2b02      	cmp	r3, #2
 8004720:	d902      	bls.n	8004728 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 8004722:	2303      	movs	r3, #3
 8004724:	f000 bd53 	b.w	80051ce <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8004728:	4b7b      	ldr	r3, [pc, #492]	@ (8004918 <HAL_RCC_OscConfig+0x4f4>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f003 0304 	and.w	r3, r3, #4
 8004730:	2b00      	cmp	r3, #0
 8004732:	d1ef      	bne.n	8004714 <HAL_RCC_OscConfig+0x2f0>
 8004734:	e000      	b.n	8004738 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8004736:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f003 0301 	and.w	r3, r3, #1
 8004740:	2b00      	cmp	r3, #0
 8004742:	f000 808b 	beq.w	800485c <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8004746:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004748:	2b08      	cmp	r3, #8
 800474a:	d005      	beq.n	8004758 <HAL_RCC_OscConfig+0x334>
 800474c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800474e:	2b0c      	cmp	r3, #12
 8004750:	d109      	bne.n	8004766 <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004752:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004754:	2b03      	cmp	r3, #3
 8004756:	d106      	bne.n	8004766 <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d17d      	bne.n	800485c <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8004760:	2301      	movs	r3, #1
 8004762:	f000 bd34 	b.w	80051ce <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	685b      	ldr	r3, [r3, #4]
 800476a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800476e:	d106      	bne.n	800477e <HAL_RCC_OscConfig+0x35a>
 8004770:	4b69      	ldr	r3, [pc, #420]	@ (8004918 <HAL_RCC_OscConfig+0x4f4>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4a68      	ldr	r2, [pc, #416]	@ (8004918 <HAL_RCC_OscConfig+0x4f4>)
 8004776:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800477a:	6013      	str	r3, [r2, #0]
 800477c:	e041      	b.n	8004802 <HAL_RCC_OscConfig+0x3de>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004786:	d112      	bne.n	80047ae <HAL_RCC_OscConfig+0x38a>
 8004788:	4b63      	ldr	r3, [pc, #396]	@ (8004918 <HAL_RCC_OscConfig+0x4f4>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a62      	ldr	r2, [pc, #392]	@ (8004918 <HAL_RCC_OscConfig+0x4f4>)
 800478e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004792:	6013      	str	r3, [r2, #0]
 8004794:	4b60      	ldr	r3, [pc, #384]	@ (8004918 <HAL_RCC_OscConfig+0x4f4>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	4a5f      	ldr	r2, [pc, #380]	@ (8004918 <HAL_RCC_OscConfig+0x4f4>)
 800479a:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800479e:	6013      	str	r3, [r2, #0]
 80047a0:	4b5d      	ldr	r3, [pc, #372]	@ (8004918 <HAL_RCC_OscConfig+0x4f4>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a5c      	ldr	r2, [pc, #368]	@ (8004918 <HAL_RCC_OscConfig+0x4f4>)
 80047a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80047aa:	6013      	str	r3, [r2, #0]
 80047ac:	e029      	b.n	8004802 <HAL_RCC_OscConfig+0x3de>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	f5b3 1fa8 	cmp.w	r3, #1376256	@ 0x150000
 80047b6:	d112      	bne.n	80047de <HAL_RCC_OscConfig+0x3ba>
 80047b8:	4b57      	ldr	r3, [pc, #348]	@ (8004918 <HAL_RCC_OscConfig+0x4f4>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a56      	ldr	r2, [pc, #344]	@ (8004918 <HAL_RCC_OscConfig+0x4f4>)
 80047be:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80047c2:	6013      	str	r3, [r2, #0]
 80047c4:	4b54      	ldr	r3, [pc, #336]	@ (8004918 <HAL_RCC_OscConfig+0x4f4>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4a53      	ldr	r2, [pc, #332]	@ (8004918 <HAL_RCC_OscConfig+0x4f4>)
 80047ca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80047ce:	6013      	str	r3, [r2, #0]
 80047d0:	4b51      	ldr	r3, [pc, #324]	@ (8004918 <HAL_RCC_OscConfig+0x4f4>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a50      	ldr	r2, [pc, #320]	@ (8004918 <HAL_RCC_OscConfig+0x4f4>)
 80047d6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80047da:	6013      	str	r3, [r2, #0]
 80047dc:	e011      	b.n	8004802 <HAL_RCC_OscConfig+0x3de>
 80047de:	4b4e      	ldr	r3, [pc, #312]	@ (8004918 <HAL_RCC_OscConfig+0x4f4>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a4d      	ldr	r2, [pc, #308]	@ (8004918 <HAL_RCC_OscConfig+0x4f4>)
 80047e4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80047e8:	6013      	str	r3, [r2, #0]
 80047ea:	4b4b      	ldr	r3, [pc, #300]	@ (8004918 <HAL_RCC_OscConfig+0x4f4>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4a4a      	ldr	r2, [pc, #296]	@ (8004918 <HAL_RCC_OscConfig+0x4f4>)
 80047f0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80047f4:	6013      	str	r3, [r2, #0]
 80047f6:	4b48      	ldr	r3, [pc, #288]	@ (8004918 <HAL_RCC_OscConfig+0x4f4>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4a47      	ldr	r2, [pc, #284]	@ (8004918 <HAL_RCC_OscConfig+0x4f4>)
 80047fc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8004800:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d014      	beq.n	8004834 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 800480a:	f7fd fde7 	bl	80023dc <HAL_GetTick>
 800480e:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004810:	e009      	b.n	8004826 <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004812:	f7fd fde3 	bl	80023dc <HAL_GetTick>
 8004816:	4602      	mov	r2, r0
 8004818:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800481a:	1ad3      	subs	r3, r2, r3
 800481c:	2b64      	cmp	r3, #100	@ 0x64
 800481e:	d902      	bls.n	8004826 <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8004820:	2303      	movs	r3, #3
 8004822:	f000 bcd4 	b.w	80051ce <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004826:	4b3c      	ldr	r3, [pc, #240]	@ (8004918 <HAL_RCC_OscConfig+0x4f4>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800482e:	2b00      	cmp	r3, #0
 8004830:	d0ef      	beq.n	8004812 <HAL_RCC_OscConfig+0x3ee>
 8004832:	e013      	b.n	800485c <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8004834:	f7fd fdd2 	bl	80023dc <HAL_GetTick>
 8004838:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800483a:	e009      	b.n	8004850 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800483c:	f7fd fdce 	bl	80023dc <HAL_GetTick>
 8004840:	4602      	mov	r2, r0
 8004842:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004844:	1ad3      	subs	r3, r2, r3
 8004846:	2b64      	cmp	r3, #100	@ 0x64
 8004848:	d902      	bls.n	8004850 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 800484a:	2303      	movs	r3, #3
 800484c:	f000 bcbf 	b.w	80051ce <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004850:	4b31      	ldr	r3, [pc, #196]	@ (8004918 <HAL_RCC_OscConfig+0x4f4>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004858:	2b00      	cmp	r3, #0
 800485a:	d1ef      	bne.n	800483c <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f003 0302 	and.w	r3, r3, #2
 8004864:	2b00      	cmp	r3, #0
 8004866:	d05f      	beq.n	8004928 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8004868:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800486a:	2b04      	cmp	r3, #4
 800486c:	d005      	beq.n	800487a <HAL_RCC_OscConfig+0x456>
 800486e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004870:	2b0c      	cmp	r3, #12
 8004872:	d114      	bne.n	800489e <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004874:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004876:	2b02      	cmp	r3, #2
 8004878:	d111      	bne.n	800489e <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	68db      	ldr	r3, [r3, #12]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d102      	bne.n	8004888 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 8004882:	2301      	movs	r3, #1
 8004884:	f000 bca3 	b.w	80051ce <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8004888:	4b23      	ldr	r3, [pc, #140]	@ (8004918 <HAL_RCC_OscConfig+0x4f4>)
 800488a:	691b      	ldr	r3, [r3, #16]
 800488c:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	691b      	ldr	r3, [r3, #16]
 8004894:	041b      	lsls	r3, r3, #16
 8004896:	4920      	ldr	r1, [pc, #128]	@ (8004918 <HAL_RCC_OscConfig+0x4f4>)
 8004898:	4313      	orrs	r3, r2
 800489a:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800489c:	e044      	b.n	8004928 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	68db      	ldr	r3, [r3, #12]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d024      	beq.n	80048f0 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 80048a6:	4b1c      	ldr	r3, [pc, #112]	@ (8004918 <HAL_RCC_OscConfig+0x4f4>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a1b      	ldr	r2, [pc, #108]	@ (8004918 <HAL_RCC_OscConfig+0x4f4>)
 80048ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80048b0:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80048b2:	f7fd fd93 	bl	80023dc <HAL_GetTick>
 80048b6:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80048b8:	e009      	b.n	80048ce <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80048ba:	f7fd fd8f 	bl	80023dc <HAL_GetTick>
 80048be:	4602      	mov	r2, r0
 80048c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048c2:	1ad3      	subs	r3, r2, r3
 80048c4:	2b02      	cmp	r3, #2
 80048c6:	d902      	bls.n	80048ce <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80048c8:	2303      	movs	r3, #3
 80048ca:	f000 bc80 	b.w	80051ce <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80048ce:	4b12      	ldr	r3, [pc, #72]	@ (8004918 <HAL_RCC_OscConfig+0x4f4>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d0ef      	beq.n	80048ba <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 80048da:	4b0f      	ldr	r3, [pc, #60]	@ (8004918 <HAL_RCC_OscConfig+0x4f4>)
 80048dc:	691b      	ldr	r3, [r3, #16]
 80048de:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	691b      	ldr	r3, [r3, #16]
 80048e6:	041b      	lsls	r3, r3, #16
 80048e8:	490b      	ldr	r1, [pc, #44]	@ (8004918 <HAL_RCC_OscConfig+0x4f4>)
 80048ea:	4313      	orrs	r3, r2
 80048ec:	610b      	str	r3, [r1, #16]
 80048ee:	e01b      	b.n	8004928 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 80048f0:	4b09      	ldr	r3, [pc, #36]	@ (8004918 <HAL_RCC_OscConfig+0x4f4>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a08      	ldr	r2, [pc, #32]	@ (8004918 <HAL_RCC_OscConfig+0x4f4>)
 80048f6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80048fa:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80048fc:	f7fd fd6e 	bl	80023dc <HAL_GetTick>
 8004900:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004902:	e00b      	b.n	800491c <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004904:	f7fd fd6a 	bl	80023dc <HAL_GetTick>
 8004908:	4602      	mov	r2, r0
 800490a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800490c:	1ad3      	subs	r3, r2, r3
 800490e:	2b02      	cmp	r3, #2
 8004910:	d904      	bls.n	800491c <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 8004912:	2303      	movs	r3, #3
 8004914:	f000 bc5b 	b.w	80051ce <HAL_RCC_OscConfig+0xdaa>
 8004918:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800491c:	4baf      	ldr	r3, [pc, #700]	@ (8004bdc <HAL_RCC_OscConfig+0x7b8>)
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004924:	2b00      	cmp	r3, #0
 8004926:	d1ed      	bne.n	8004904 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f003 0308 	and.w	r3, r3, #8
 8004930:	2b00      	cmp	r3, #0
 8004932:	f000 80c8 	beq.w	8004ac6 <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8004936:	2300      	movs	r3, #0
 8004938:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800493c:	4ba7      	ldr	r3, [pc, #668]	@ (8004bdc <HAL_RCC_OscConfig+0x7b8>)
 800493e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004942:	f003 0304 	and.w	r3, r3, #4
 8004946:	2b00      	cmp	r3, #0
 8004948:	d111      	bne.n	800496e <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800494a:	4ba4      	ldr	r3, [pc, #656]	@ (8004bdc <HAL_RCC_OscConfig+0x7b8>)
 800494c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004950:	4aa2      	ldr	r2, [pc, #648]	@ (8004bdc <HAL_RCC_OscConfig+0x7b8>)
 8004952:	f043 0304 	orr.w	r3, r3, #4
 8004956:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800495a:	4ba0      	ldr	r3, [pc, #640]	@ (8004bdc <HAL_RCC_OscConfig+0x7b8>)
 800495c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004960:	f003 0304 	and.w	r3, r3, #4
 8004964:	617b      	str	r3, [r7, #20]
 8004966:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8004968:	2301      	movs	r3, #1
 800496a:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800496e:	4b9c      	ldr	r3, [pc, #624]	@ (8004be0 <HAL_RCC_OscConfig+0x7bc>)
 8004970:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004972:	f003 0301 	and.w	r3, r3, #1
 8004976:	2b00      	cmp	r3, #0
 8004978:	d119      	bne.n	80049ae <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800497a:	4b99      	ldr	r3, [pc, #612]	@ (8004be0 <HAL_RCC_OscConfig+0x7bc>)
 800497c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800497e:	4a98      	ldr	r2, [pc, #608]	@ (8004be0 <HAL_RCC_OscConfig+0x7bc>)
 8004980:	f043 0301 	orr.w	r3, r3, #1
 8004984:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004986:	f7fd fd29 	bl	80023dc <HAL_GetTick>
 800498a:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800498c:	e009      	b.n	80049a2 <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800498e:	f7fd fd25 	bl	80023dc <HAL_GetTick>
 8004992:	4602      	mov	r2, r0
 8004994:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004996:	1ad3      	subs	r3, r2, r3
 8004998:	2b02      	cmp	r3, #2
 800499a:	d902      	bls.n	80049a2 <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 800499c:	2303      	movs	r3, #3
 800499e:	f000 bc16 	b.w	80051ce <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80049a2:	4b8f      	ldr	r3, [pc, #572]	@ (8004be0 <HAL_RCC_OscConfig+0x7bc>)
 80049a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049a6:	f003 0301 	and.w	r3, r3, #1
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d0ef      	beq.n	800498e <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	695b      	ldr	r3, [r3, #20]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d05f      	beq.n	8004a76 <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 80049b6:	4b89      	ldr	r3, [pc, #548]	@ (8004bdc <HAL_RCC_OscConfig+0x7b8>)
 80049b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80049bc:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	699a      	ldr	r2, [r3, #24]
 80049c2:	6a3b      	ldr	r3, [r7, #32]
 80049c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80049c8:	429a      	cmp	r2, r3
 80049ca:	d037      	beq.n	8004a3c <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 80049cc:	6a3b      	ldr	r3, [r7, #32]
 80049ce:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d006      	beq.n	80049e4 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 80049d6:	6a3b      	ldr	r3, [r7, #32]
 80049d8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d101      	bne.n	80049e4 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 80049e0:	2301      	movs	r3, #1
 80049e2:	e3f4      	b.n	80051ce <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 80049e4:	6a3b      	ldr	r3, [r7, #32]
 80049e6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d01b      	beq.n	8004a26 <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 80049ee:	4b7b      	ldr	r3, [pc, #492]	@ (8004bdc <HAL_RCC_OscConfig+0x7b8>)
 80049f0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80049f4:	4a79      	ldr	r2, [pc, #484]	@ (8004bdc <HAL_RCC_OscConfig+0x7b8>)
 80049f6:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 80049fa:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

          tickstart = HAL_GetTick();
 80049fe:	f7fd fced 	bl	80023dc <HAL_GetTick>
 8004a02:	62b8      	str	r0, [r7, #40]	@ 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004a04:	e008      	b.n	8004a18 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a06:	f7fd fce9 	bl	80023dc <HAL_GetTick>
 8004a0a:	4602      	mov	r2, r0
 8004a0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a0e:	1ad3      	subs	r3, r2, r3
 8004a10:	2b05      	cmp	r3, #5
 8004a12:	d901      	bls.n	8004a18 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 8004a14:	2303      	movs	r3, #3
 8004a16:	e3da      	b.n	80051ce <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004a18:	4b70      	ldr	r3, [pc, #448]	@ (8004bdc <HAL_RCC_OscConfig+0x7b8>)
 8004a1a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004a1e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d1ef      	bne.n	8004a06 <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8004a26:	4b6d      	ldr	r3, [pc, #436]	@ (8004bdc <HAL_RCC_OscConfig+0x7b8>)
 8004a28:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004a2c:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	699b      	ldr	r3, [r3, #24]
 8004a34:	4969      	ldr	r1, [pc, #420]	@ (8004bdc <HAL_RCC_OscConfig+0x7b8>)
 8004a36:	4313      	orrs	r3, r2
 8004a38:	f8c1 30f0 	str.w	r3, [r1, #240]	@ 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8004a3c:	4b67      	ldr	r3, [pc, #412]	@ (8004bdc <HAL_RCC_OscConfig+0x7b8>)
 8004a3e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004a42:	4a66      	ldr	r2, [pc, #408]	@ (8004bdc <HAL_RCC_OscConfig+0x7b8>)
 8004a44:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004a48:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8004a4c:	f7fd fcc6 	bl	80023dc <HAL_GetTick>
 8004a50:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8004a52:	e008      	b.n	8004a66 <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a54:	f7fd fcc2 	bl	80023dc <HAL_GetTick>
 8004a58:	4602      	mov	r2, r0
 8004a5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a5c:	1ad3      	subs	r3, r2, r3
 8004a5e:	2b05      	cmp	r3, #5
 8004a60:	d901      	bls.n	8004a66 <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 8004a62:	2303      	movs	r3, #3
 8004a64:	e3b3      	b.n	80051ce <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8004a66:	4b5d      	ldr	r3, [pc, #372]	@ (8004bdc <HAL_RCC_OscConfig+0x7b8>)
 8004a68:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004a6c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d0ef      	beq.n	8004a54 <HAL_RCC_OscConfig+0x630>
 8004a74:	e01b      	b.n	8004aae <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8004a76:	4b59      	ldr	r3, [pc, #356]	@ (8004bdc <HAL_RCC_OscConfig+0x7b8>)
 8004a78:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004a7c:	4a57      	ldr	r2, [pc, #348]	@ (8004bdc <HAL_RCC_OscConfig+0x7b8>)
 8004a7e:	f023 53a0 	bic.w	r3, r3, #335544320	@ 0x14000000
 8004a82:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

      tickstart = HAL_GetTick();
 8004a86:	f7fd fca9 	bl	80023dc <HAL_GetTick>
 8004a8a:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004a8c:	e008      	b.n	8004aa0 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a8e:	f7fd fca5 	bl	80023dc <HAL_GetTick>
 8004a92:	4602      	mov	r2, r0
 8004a94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a96:	1ad3      	subs	r3, r2, r3
 8004a98:	2b05      	cmp	r3, #5
 8004a9a:	d901      	bls.n	8004aa0 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 8004a9c:	2303      	movs	r3, #3
 8004a9e:	e396      	b.n	80051ce <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8004aa0:	4b4e      	ldr	r3, [pc, #312]	@ (8004bdc <HAL_RCC_OscConfig+0x7b8>)
 8004aa2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004aa6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d1ef      	bne.n	8004a8e <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004aae:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8004ab2:	2b01      	cmp	r3, #1
 8004ab4:	d107      	bne.n	8004ac6 <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ab6:	4b49      	ldr	r3, [pc, #292]	@ (8004bdc <HAL_RCC_OscConfig+0x7b8>)
 8004ab8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004abc:	4a47      	ldr	r2, [pc, #284]	@ (8004bdc <HAL_RCC_OscConfig+0x7b8>)
 8004abe:	f023 0304 	bic.w	r3, r3, #4
 8004ac2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f003 0304 	and.w	r3, r3, #4
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	f000 8111 	beq.w	8004cf6 <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ada:	4b40      	ldr	r3, [pc, #256]	@ (8004bdc <HAL_RCC_OscConfig+0x7b8>)
 8004adc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004ae0:	f003 0304 	and.w	r3, r3, #4
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d111      	bne.n	8004b0c <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ae8:	4b3c      	ldr	r3, [pc, #240]	@ (8004bdc <HAL_RCC_OscConfig+0x7b8>)
 8004aea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004aee:	4a3b      	ldr	r2, [pc, #236]	@ (8004bdc <HAL_RCC_OscConfig+0x7b8>)
 8004af0:	f043 0304 	orr.w	r3, r3, #4
 8004af4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8004af8:	4b38      	ldr	r3, [pc, #224]	@ (8004bdc <HAL_RCC_OscConfig+0x7b8>)
 8004afa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004afe:	f003 0304 	and.w	r3, r3, #4
 8004b02:	613b      	str	r3, [r7, #16]
 8004b04:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8004b06:	2301      	movs	r3, #1
 8004b08:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004b0c:	4b34      	ldr	r3, [pc, #208]	@ (8004be0 <HAL_RCC_OscConfig+0x7bc>)
 8004b0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b10:	f003 0301 	and.w	r3, r3, #1
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d118      	bne.n	8004b4a <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8004b18:	4b31      	ldr	r3, [pc, #196]	@ (8004be0 <HAL_RCC_OscConfig+0x7bc>)
 8004b1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b1c:	4a30      	ldr	r2, [pc, #192]	@ (8004be0 <HAL_RCC_OscConfig+0x7bc>)
 8004b1e:	f043 0301 	orr.w	r3, r3, #1
 8004b22:	6293      	str	r3, [r2, #40]	@ 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b24:	f7fd fc5a 	bl	80023dc <HAL_GetTick>
 8004b28:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004b2a:	e008      	b.n	8004b3e <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b2c:	f7fd fc56 	bl	80023dc <HAL_GetTick>
 8004b30:	4602      	mov	r2, r0
 8004b32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b34:	1ad3      	subs	r3, r2, r3
 8004b36:	2b02      	cmp	r3, #2
 8004b38:	d901      	bls.n	8004b3e <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 8004b3a:	2303      	movs	r3, #3
 8004b3c:	e347      	b.n	80051ce <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8004b3e:	4b28      	ldr	r3, [pc, #160]	@ (8004be0 <HAL_RCC_OscConfig+0x7bc>)
 8004b40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b42:	f003 0301 	and.w	r3, r3, #1
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d0f0      	beq.n	8004b2c <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	689b      	ldr	r3, [r3, #8]
 8004b4e:	f003 0301 	and.w	r3, r3, #1
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d01f      	beq.n	8004b96 <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	689b      	ldr	r3, [r3, #8]
 8004b5a:	f003 0304 	and.w	r3, r3, #4
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d010      	beq.n	8004b84 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004b62:	4b1e      	ldr	r3, [pc, #120]	@ (8004bdc <HAL_RCC_OscConfig+0x7b8>)
 8004b64:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004b68:	4a1c      	ldr	r2, [pc, #112]	@ (8004bdc <HAL_RCC_OscConfig+0x7b8>)
 8004b6a:	f043 0304 	orr.w	r3, r3, #4
 8004b6e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004b72:	4b1a      	ldr	r3, [pc, #104]	@ (8004bdc <HAL_RCC_OscConfig+0x7b8>)
 8004b74:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004b78:	4a18      	ldr	r2, [pc, #96]	@ (8004bdc <HAL_RCC_OscConfig+0x7b8>)
 8004b7a:	f043 0301 	orr.w	r3, r3, #1
 8004b7e:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004b82:	e018      	b.n	8004bb6 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004b84:	4b15      	ldr	r3, [pc, #84]	@ (8004bdc <HAL_RCC_OscConfig+0x7b8>)
 8004b86:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004b8a:	4a14      	ldr	r2, [pc, #80]	@ (8004bdc <HAL_RCC_OscConfig+0x7b8>)
 8004b8c:	f043 0301 	orr.w	r3, r3, #1
 8004b90:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8004b94:	e00f      	b.n	8004bb6 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8004b96:	4b11      	ldr	r3, [pc, #68]	@ (8004bdc <HAL_RCC_OscConfig+0x7b8>)
 8004b98:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004b9c:	4a0f      	ldr	r2, [pc, #60]	@ (8004bdc <HAL_RCC_OscConfig+0x7b8>)
 8004b9e:	f023 0301 	bic.w	r3, r3, #1
 8004ba2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8004ba6:	4b0d      	ldr	r3, [pc, #52]	@ (8004bdc <HAL_RCC_OscConfig+0x7b8>)
 8004ba8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004bac:	4a0b      	ldr	r2, [pc, #44]	@ (8004bdc <HAL_RCC_OscConfig+0x7b8>)
 8004bae:	f023 0304 	bic.w	r3, r3, #4
 8004bb2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	689b      	ldr	r3, [r3, #8]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d057      	beq.n	8004c6e <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 8004bbe:	f7fd fc0d 	bl	80023dc <HAL_GetTick>
 8004bc2:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004bc4:	e00e      	b.n	8004be4 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bc6:	f7fd fc09 	bl	80023dc <HAL_GetTick>
 8004bca:	4602      	mov	r2, r0
 8004bcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bce:	1ad3      	subs	r3, r2, r3
 8004bd0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004bd4:	4293      	cmp	r3, r2
 8004bd6:	d905      	bls.n	8004be4 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 8004bd8:	2303      	movs	r3, #3
 8004bda:	e2f8      	b.n	80051ce <HAL_RCC_OscConfig+0xdaa>
 8004bdc:	46020c00 	.word	0x46020c00
 8004be0:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004be4:	4b9c      	ldr	r3, [pc, #624]	@ (8004e58 <HAL_RCC_OscConfig+0xa34>)
 8004be6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004bea:	f003 0302 	and.w	r3, r3, #2
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d0e9      	beq.n	8004bc6 <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	689b      	ldr	r3, [r3, #8]
 8004bf6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d01b      	beq.n	8004c36 <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004bfe:	4b96      	ldr	r3, [pc, #600]	@ (8004e58 <HAL_RCC_OscConfig+0xa34>)
 8004c00:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004c04:	4a94      	ldr	r2, [pc, #592]	@ (8004e58 <HAL_RCC_OscConfig+0xa34>)
 8004c06:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004c0a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8004c0e:	e00a      	b.n	8004c26 <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c10:	f7fd fbe4 	bl	80023dc <HAL_GetTick>
 8004c14:	4602      	mov	r2, r0
 8004c16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c18:	1ad3      	subs	r3, r2, r3
 8004c1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d901      	bls.n	8004c26 <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 8004c22:	2303      	movs	r3, #3
 8004c24:	e2d3      	b.n	80051ce <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8004c26:	4b8c      	ldr	r3, [pc, #560]	@ (8004e58 <HAL_RCC_OscConfig+0xa34>)
 8004c28:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004c2c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d0ed      	beq.n	8004c10 <HAL_RCC_OscConfig+0x7ec>
 8004c34:	e053      	b.n	8004cde <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004c36:	4b88      	ldr	r3, [pc, #544]	@ (8004e58 <HAL_RCC_OscConfig+0xa34>)
 8004c38:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004c3c:	4a86      	ldr	r2, [pc, #536]	@ (8004e58 <HAL_RCC_OscConfig+0xa34>)
 8004c3e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004c42:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004c46:	e00a      	b.n	8004c5e <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c48:	f7fd fbc8 	bl	80023dc <HAL_GetTick>
 8004c4c:	4602      	mov	r2, r0
 8004c4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c50:	1ad3      	subs	r3, r2, r3
 8004c52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d901      	bls.n	8004c5e <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 8004c5a:	2303      	movs	r3, #3
 8004c5c:	e2b7      	b.n	80051ce <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004c5e:	4b7e      	ldr	r3, [pc, #504]	@ (8004e58 <HAL_RCC_OscConfig+0xa34>)
 8004c60:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004c64:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d1ed      	bne.n	8004c48 <HAL_RCC_OscConfig+0x824>
 8004c6c:	e037      	b.n	8004cde <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8004c6e:	f7fd fbb5 	bl	80023dc <HAL_GetTick>
 8004c72:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004c74:	e00a      	b.n	8004c8c <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c76:	f7fd fbb1 	bl	80023dc <HAL_GetTick>
 8004c7a:	4602      	mov	r2, r0
 8004c7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c7e:	1ad3      	subs	r3, r2, r3
 8004c80:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d901      	bls.n	8004c8c <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 8004c88:	2303      	movs	r3, #3
 8004c8a:	e2a0      	b.n	80051ce <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004c8c:	4b72      	ldr	r3, [pc, #456]	@ (8004e58 <HAL_RCC_OscConfig+0xa34>)
 8004c8e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004c92:	f003 0302 	and.w	r3, r3, #2
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d1ed      	bne.n	8004c76 <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8004c9a:	4b6f      	ldr	r3, [pc, #444]	@ (8004e58 <HAL_RCC_OscConfig+0xa34>)
 8004c9c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004ca0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d01a      	beq.n	8004cde <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8004ca8:	4b6b      	ldr	r3, [pc, #428]	@ (8004e58 <HAL_RCC_OscConfig+0xa34>)
 8004caa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004cae:	4a6a      	ldr	r2, [pc, #424]	@ (8004e58 <HAL_RCC_OscConfig+0xa34>)
 8004cb0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004cb4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004cb8:	e00a      	b.n	8004cd0 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cba:	f7fd fb8f 	bl	80023dc <HAL_GetTick>
 8004cbe:	4602      	mov	r2, r0
 8004cc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cc2:	1ad3      	subs	r3, r2, r3
 8004cc4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004cc8:	4293      	cmp	r3, r2
 8004cca:	d901      	bls.n	8004cd0 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8004ccc:	2303      	movs	r3, #3
 8004cce:	e27e      	b.n	80051ce <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8004cd0:	4b61      	ldr	r3, [pc, #388]	@ (8004e58 <HAL_RCC_OscConfig+0xa34>)
 8004cd2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8004cd6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d1ed      	bne.n	8004cba <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004cde:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8004ce2:	2b01      	cmp	r3, #1
 8004ce4:	d107      	bne.n	8004cf6 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ce6:	4b5c      	ldr	r3, [pc, #368]	@ (8004e58 <HAL_RCC_OscConfig+0xa34>)
 8004ce8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004cec:	4a5a      	ldr	r2, [pc, #360]	@ (8004e58 <HAL_RCC_OscConfig+0xa34>)
 8004cee:	f023 0304 	bic.w	r3, r3, #4
 8004cf2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f003 0320 	and.w	r3, r3, #32
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d036      	beq.n	8004d70 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d019      	beq.n	8004d3e <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8004d0a:	4b53      	ldr	r3, [pc, #332]	@ (8004e58 <HAL_RCC_OscConfig+0xa34>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4a52      	ldr	r2, [pc, #328]	@ (8004e58 <HAL_RCC_OscConfig+0xa34>)
 8004d10:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004d14:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004d16:	f7fd fb61 	bl	80023dc <HAL_GetTick>
 8004d1a:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8004d1c:	e008      	b.n	8004d30 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004d1e:	f7fd fb5d 	bl	80023dc <HAL_GetTick>
 8004d22:	4602      	mov	r2, r0
 8004d24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d26:	1ad3      	subs	r3, r2, r3
 8004d28:	2b02      	cmp	r3, #2
 8004d2a:	d901      	bls.n	8004d30 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 8004d2c:	2303      	movs	r3, #3
 8004d2e:	e24e      	b.n	80051ce <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8004d30:	4b49      	ldr	r3, [pc, #292]	@ (8004e58 <HAL_RCC_OscConfig+0xa34>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d0f0      	beq.n	8004d1e <HAL_RCC_OscConfig+0x8fa>
 8004d3c:	e018      	b.n	8004d70 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8004d3e:	4b46      	ldr	r3, [pc, #280]	@ (8004e58 <HAL_RCC_OscConfig+0xa34>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4a45      	ldr	r2, [pc, #276]	@ (8004e58 <HAL_RCC_OscConfig+0xa34>)
 8004d44:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004d48:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004d4a:	f7fd fb47 	bl	80023dc <HAL_GetTick>
 8004d4e:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8004d50:	e008      	b.n	8004d64 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004d52:	f7fd fb43 	bl	80023dc <HAL_GetTick>
 8004d56:	4602      	mov	r2, r0
 8004d58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d5a:	1ad3      	subs	r3, r2, r3
 8004d5c:	2b02      	cmp	r3, #2
 8004d5e:	d901      	bls.n	8004d64 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 8004d60:	2303      	movs	r3, #3
 8004d62:	e234      	b.n	80051ce <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8004d64:	4b3c      	ldr	r3, [pc, #240]	@ (8004e58 <HAL_RCC_OscConfig+0xa34>)
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d1f0      	bne.n	8004d52 <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d036      	beq.n	8004dea <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d019      	beq.n	8004db8 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8004d84:	4b34      	ldr	r3, [pc, #208]	@ (8004e58 <HAL_RCC_OscConfig+0xa34>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	4a33      	ldr	r2, [pc, #204]	@ (8004e58 <HAL_RCC_OscConfig+0xa34>)
 8004d8a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004d8e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004d90:	f7fd fb24 	bl	80023dc <HAL_GetTick>
 8004d94:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8004d96:	e008      	b.n	8004daa <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8004d98:	f7fd fb20 	bl	80023dc <HAL_GetTick>
 8004d9c:	4602      	mov	r2, r0
 8004d9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004da0:	1ad3      	subs	r3, r2, r3
 8004da2:	2b02      	cmp	r3, #2
 8004da4:	d901      	bls.n	8004daa <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 8004da6:	2303      	movs	r3, #3
 8004da8:	e211      	b.n	80051ce <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8004daa:	4b2b      	ldr	r3, [pc, #172]	@ (8004e58 <HAL_RCC_OscConfig+0xa34>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d0f0      	beq.n	8004d98 <HAL_RCC_OscConfig+0x974>
 8004db6:	e018      	b.n	8004dea <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8004db8:	4b27      	ldr	r3, [pc, #156]	@ (8004e58 <HAL_RCC_OscConfig+0xa34>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	4a26      	ldr	r2, [pc, #152]	@ (8004e58 <HAL_RCC_OscConfig+0xa34>)
 8004dbe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004dc2:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004dc4:	f7fd fb0a 	bl	80023dc <HAL_GetTick>
 8004dc8:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8004dca:	e008      	b.n	8004dde <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8004dcc:	f7fd fb06 	bl	80023dc <HAL_GetTick>
 8004dd0:	4602      	mov	r2, r0
 8004dd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dd4:	1ad3      	subs	r3, r2, r3
 8004dd6:	2b02      	cmp	r3, #2
 8004dd8:	d901      	bls.n	8004dde <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 8004dda:	2303      	movs	r3, #3
 8004ddc:	e1f7      	b.n	80051ce <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8004dde:	4b1e      	ldr	r3, [pc, #120]	@ (8004e58 <HAL_RCC_OscConfig+0xa34>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d1f0      	bne.n	8004dcc <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d07f      	beq.n	8004ef6 <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d062      	beq.n	8004ec4 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8004dfe:	4b16      	ldr	r3, [pc, #88]	@ (8004e58 <HAL_RCC_OscConfig+0xa34>)
 8004e00:	689b      	ldr	r3, [r3, #8]
 8004e02:	4a15      	ldr	r2, [pc, #84]	@ (8004e58 <HAL_RCC_OscConfig+0xa34>)
 8004e04:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004e08:	6093      	str	r3, [r2, #8]
 8004e0a:	4b13      	ldr	r3, [pc, #76]	@ (8004e58 <HAL_RCC_OscConfig+0xa34>)
 8004e0c:	689b      	ldr	r3, [r3, #8]
 8004e0e:	f023 6270 	bic.w	r2, r3, #251658240	@ 0xf000000
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e16:	4910      	ldr	r1, [pc, #64]	@ (8004e58 <HAL_RCC_OscConfig+0xa34>)
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e20:	f1b3 4f40 	cmp.w	r3, #3221225472	@ 0xc0000000
 8004e24:	d309      	bcc.n	8004e3a <HAL_RCC_OscConfig+0xa16>
 8004e26:	4b0c      	ldr	r3, [pc, #48]	@ (8004e58 <HAL_RCC_OscConfig+0xa34>)
 8004e28:	68db      	ldr	r3, [r3, #12]
 8004e2a:	f023 021f 	bic.w	r2, r3, #31
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6a1b      	ldr	r3, [r3, #32]
 8004e32:	4909      	ldr	r1, [pc, #36]	@ (8004e58 <HAL_RCC_OscConfig+0xa34>)
 8004e34:	4313      	orrs	r3, r2
 8004e36:	60cb      	str	r3, [r1, #12]
 8004e38:	e02a      	b.n	8004e90 <HAL_RCC_OscConfig+0xa6c>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	da0c      	bge.n	8004e5c <HAL_RCC_OscConfig+0xa38>
 8004e42:	4b05      	ldr	r3, [pc, #20]	@ (8004e58 <HAL_RCC_OscConfig+0xa34>)
 8004e44:	68db      	ldr	r3, [r3, #12]
 8004e46:	f423 7278 	bic.w	r2, r3, #992	@ 0x3e0
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6a1b      	ldr	r3, [r3, #32]
 8004e4e:	015b      	lsls	r3, r3, #5
 8004e50:	4901      	ldr	r1, [pc, #4]	@ (8004e58 <HAL_RCC_OscConfig+0xa34>)
 8004e52:	4313      	orrs	r3, r2
 8004e54:	60cb      	str	r3, [r1, #12]
 8004e56:	e01b      	b.n	8004e90 <HAL_RCC_OscConfig+0xa6c>
 8004e58:	46020c00 	.word	0x46020c00
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e64:	d30a      	bcc.n	8004e7c <HAL_RCC_OscConfig+0xa58>
 8004e66:	4ba1      	ldr	r3, [pc, #644]	@ (80050ec <HAL_RCC_OscConfig+0xcc8>)
 8004e68:	68db      	ldr	r3, [r3, #12]
 8004e6a:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6a1b      	ldr	r3, [r3, #32]
 8004e72:	029b      	lsls	r3, r3, #10
 8004e74:	499d      	ldr	r1, [pc, #628]	@ (80050ec <HAL_RCC_OscConfig+0xcc8>)
 8004e76:	4313      	orrs	r3, r2
 8004e78:	60cb      	str	r3, [r1, #12]
 8004e7a:	e009      	b.n	8004e90 <HAL_RCC_OscConfig+0xa6c>
 8004e7c:	4b9b      	ldr	r3, [pc, #620]	@ (80050ec <HAL_RCC_OscConfig+0xcc8>)
 8004e7e:	68db      	ldr	r3, [r3, #12]
 8004e80:	f423 2278 	bic.w	r2, r3, #1015808	@ 0xf8000
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6a1b      	ldr	r3, [r3, #32]
 8004e88:	03db      	lsls	r3, r3, #15
 8004e8a:	4998      	ldr	r1, [pc, #608]	@ (80050ec <HAL_RCC_OscConfig+0xcc8>)
 8004e8c:	4313      	orrs	r3, r2
 8004e8e:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8004e90:	4b96      	ldr	r3, [pc, #600]	@ (80050ec <HAL_RCC_OscConfig+0xcc8>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4a95      	ldr	r2, [pc, #596]	@ (80050ec <HAL_RCC_OscConfig+0xcc8>)
 8004e96:	f043 0310 	orr.w	r3, r3, #16
 8004e9a:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004e9c:	f7fd fa9e 	bl	80023dc <HAL_GetTick>
 8004ea0:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8004ea2:	e008      	b.n	8004eb6 <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8004ea4:	f7fd fa9a 	bl	80023dc <HAL_GetTick>
 8004ea8:	4602      	mov	r2, r0
 8004eaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004eac:	1ad3      	subs	r3, r2, r3
 8004eae:	2b02      	cmp	r3, #2
 8004eb0:	d901      	bls.n	8004eb6 <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 8004eb2:	2303      	movs	r3, #3
 8004eb4:	e18b      	b.n	80051ce <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 8004eb6:	4b8d      	ldr	r3, [pc, #564]	@ (80050ec <HAL_RCC_OscConfig+0xcc8>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f003 0320 	and.w	r3, r3, #32
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d0f0      	beq.n	8004ea4 <HAL_RCC_OscConfig+0xa80>
 8004ec2:	e018      	b.n	8004ef6 <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 8004ec4:	4b89      	ldr	r3, [pc, #548]	@ (80050ec <HAL_RCC_OscConfig+0xcc8>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	4a88      	ldr	r2, [pc, #544]	@ (80050ec <HAL_RCC_OscConfig+0xcc8>)
 8004eca:	f023 0310 	bic.w	r3, r3, #16
 8004ece:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8004ed0:	f7fd fa84 	bl	80023dc <HAL_GetTick>
 8004ed4:	62b8      	str	r0, [r7, #40]	@ 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8004ed6:	e008      	b.n	8004eea <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 8004ed8:	f7fd fa80 	bl	80023dc <HAL_GetTick>
 8004edc:	4602      	mov	r2, r0
 8004ede:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ee0:	1ad3      	subs	r3, r2, r3
 8004ee2:	2b02      	cmp	r3, #2
 8004ee4:	d901      	bls.n	8004eea <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 8004ee6:	2303      	movs	r3, #3
 8004ee8:	e171      	b.n	80051ce <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 8004eea:	4b80      	ldr	r3, [pc, #512]	@ (80050ec <HAL_RCC_OscConfig+0xcc8>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f003 0320 	and.w	r3, r3, #32
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d1f0      	bne.n	8004ed8 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	f000 8166 	beq.w	80051cc <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 8004f00:	2300      	movs	r3, #0
 8004f02:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004f06:	4b79      	ldr	r3, [pc, #484]	@ (80050ec <HAL_RCC_OscConfig+0xcc8>)
 8004f08:	69db      	ldr	r3, [r3, #28]
 8004f0a:	f003 030c 	and.w	r3, r3, #12
 8004f0e:	2b0c      	cmp	r3, #12
 8004f10:	f000 80f2 	beq.w	80050f8 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f18:	2b02      	cmp	r3, #2
 8004f1a:	f040 80c5 	bne.w	80050a8 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8004f1e:	4b73      	ldr	r3, [pc, #460]	@ (80050ec <HAL_RCC_OscConfig+0xcc8>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4a72      	ldr	r2, [pc, #456]	@ (80050ec <HAL_RCC_OscConfig+0xcc8>)
 8004f24:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004f28:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8004f2a:	f7fd fa57 	bl	80023dc <HAL_GetTick>
 8004f2e:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004f30:	e008      	b.n	8004f44 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f32:	f7fd fa53 	bl	80023dc <HAL_GetTick>
 8004f36:	4602      	mov	r2, r0
 8004f38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f3a:	1ad3      	subs	r3, r2, r3
 8004f3c:	2b02      	cmp	r3, #2
 8004f3e:	d901      	bls.n	8004f44 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 8004f40:	2303      	movs	r3, #3
 8004f42:	e144      	b.n	80051ce <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8004f44:	4b69      	ldr	r3, [pc, #420]	@ (80050ec <HAL_RCC_OscConfig+0xcc8>)
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d1f0      	bne.n	8004f32 <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f50:	4b66      	ldr	r3, [pc, #408]	@ (80050ec <HAL_RCC_OscConfig+0xcc8>)
 8004f52:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004f56:	f003 0304 	and.w	r3, r3, #4
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d111      	bne.n	8004f82 <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8004f5e:	4b63      	ldr	r3, [pc, #396]	@ (80050ec <HAL_RCC_OscConfig+0xcc8>)
 8004f60:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004f64:	4a61      	ldr	r2, [pc, #388]	@ (80050ec <HAL_RCC_OscConfig+0xcc8>)
 8004f66:	f043 0304 	orr.w	r3, r3, #4
 8004f6a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8004f6e:	4b5f      	ldr	r3, [pc, #380]	@ (80050ec <HAL_RCC_OscConfig+0xcc8>)
 8004f70:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004f74:	f003 0304 	and.w	r3, r3, #4
 8004f78:	60fb      	str	r3, [r7, #12]
 8004f7a:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8004f82:	4b5b      	ldr	r3, [pc, #364]	@ (80050f0 <HAL_RCC_OscConfig+0xccc>)
 8004f84:	68db      	ldr	r3, [r3, #12]
 8004f86:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004f8a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004f8e:	d102      	bne.n	8004f96 <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 8004f90:	2301      	movs	r3, #1
 8004f92:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8004f96:	4b56      	ldr	r3, [pc, #344]	@ (80050f0 <HAL_RCC_OscConfig+0xccc>)
 8004f98:	68db      	ldr	r3, [r3, #12]
 8004f9a:	4a55      	ldr	r2, [pc, #340]	@ (80050f0 <HAL_RCC_OscConfig+0xccc>)
 8004f9c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004fa0:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 8004fa2:	4b52      	ldr	r3, [pc, #328]	@ (80050ec <HAL_RCC_OscConfig+0xcc8>)
 8004fa4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fa6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004faa:	f023 0303 	bic.w	r3, r3, #3
 8004fae:	687a      	ldr	r2, [r7, #4]
 8004fb0:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8004fb2:	687a      	ldr	r2, [r7, #4]
 8004fb4:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004fb6:	3a01      	subs	r2, #1
 8004fb8:	0212      	lsls	r2, r2, #8
 8004fba:	4311      	orrs	r1, r2
 8004fbc:	687a      	ldr	r2, [r7, #4]
 8004fbe:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8004fc0:	430a      	orrs	r2, r1
 8004fc2:	494a      	ldr	r1, [pc, #296]	@ (80050ec <HAL_RCC_OscConfig+0xcc8>)
 8004fc4:	4313      	orrs	r3, r2
 8004fc6:	628b      	str	r3, [r1, #40]	@ 0x28
 8004fc8:	4b48      	ldr	r3, [pc, #288]	@ (80050ec <HAL_RCC_OscConfig+0xcc8>)
 8004fca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004fcc:	4b49      	ldr	r3, [pc, #292]	@ (80050f4 <HAL_RCC_OscConfig+0xcd0>)
 8004fce:	4013      	ands	r3, r2
 8004fd0:	687a      	ldr	r2, [r7, #4]
 8004fd2:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004fd4:	3a01      	subs	r2, #1
 8004fd6:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8004fda:	687a      	ldr	r2, [r7, #4]
 8004fdc:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8004fde:	3a01      	subs	r2, #1
 8004fe0:	0252      	lsls	r2, r2, #9
 8004fe2:	b292      	uxth	r2, r2
 8004fe4:	4311      	orrs	r1, r2
 8004fe6:	687a      	ldr	r2, [r7, #4]
 8004fe8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004fea:	3a01      	subs	r2, #1
 8004fec:	0412      	lsls	r2, r2, #16
 8004fee:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8004ff2:	4311      	orrs	r1, r2
 8004ff4:	687a      	ldr	r2, [r7, #4]
 8004ff6:	6d52      	ldr	r2, [r2, #84]	@ 0x54
 8004ff8:	3a01      	subs	r2, #1
 8004ffa:	0612      	lsls	r2, r2, #24
 8004ffc:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8005000:	430a      	orrs	r2, r1
 8005002:	493a      	ldr	r1, [pc, #232]	@ (80050ec <HAL_RCC_OscConfig+0xcc8>)
 8005004:	4313      	orrs	r3, r2
 8005006:	634b      	str	r3, [r1, #52]	@ 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8005008:	4b38      	ldr	r3, [pc, #224]	@ (80050ec <HAL_RCC_OscConfig+0xcc8>)
 800500a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800500c:	4a37      	ldr	r2, [pc, #220]	@ (80050ec <HAL_RCC_OscConfig+0xcc8>)
 800500e:	f023 0310 	bic.w	r3, r3, #16
 8005012:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005018:	4a34      	ldr	r2, [pc, #208]	@ (80050ec <HAL_RCC_OscConfig+0xcc8>)
 800501a:	00db      	lsls	r3, r3, #3
 800501c:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 800501e:	4b33      	ldr	r3, [pc, #204]	@ (80050ec <HAL_RCC_OscConfig+0xcc8>)
 8005020:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005022:	4a32      	ldr	r2, [pc, #200]	@ (80050ec <HAL_RCC_OscConfig+0xcc8>)
 8005024:	f043 0310 	orr.w	r3, r3, #16
 8005028:	6293      	str	r3, [r2, #40]	@ 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 800502a:	4b30      	ldr	r3, [pc, #192]	@ (80050ec <HAL_RCC_OscConfig+0xcc8>)
 800502c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800502e:	f023 020c 	bic.w	r2, r3, #12
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005036:	492d      	ldr	r1, [pc, #180]	@ (80050ec <HAL_RCC_OscConfig+0xcc8>)
 8005038:	4313      	orrs	r3, r2
 800503a:	628b      	str	r3, [r1, #40]	@ 0x28

        if (pwrboosten == SET)
 800503c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8005040:	2b01      	cmp	r3, #1
 8005042:	d105      	bne.n	8005050 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8005044:	4b2a      	ldr	r3, [pc, #168]	@ (80050f0 <HAL_RCC_OscConfig+0xccc>)
 8005046:	68db      	ldr	r3, [r3, #12]
 8005048:	4a29      	ldr	r2, [pc, #164]	@ (80050f0 <HAL_RCC_OscConfig+0xccc>)
 800504a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800504e:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8005050:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8005054:	2b01      	cmp	r3, #1
 8005056:	d107      	bne.n	8005068 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8005058:	4b24      	ldr	r3, [pc, #144]	@ (80050ec <HAL_RCC_OscConfig+0xcc8>)
 800505a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800505e:	4a23      	ldr	r2, [pc, #140]	@ (80050ec <HAL_RCC_OscConfig+0xcc8>)
 8005060:	f023 0304 	bic.w	r3, r3, #4
 8005064:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
        }

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8005068:	4b20      	ldr	r3, [pc, #128]	@ (80050ec <HAL_RCC_OscConfig+0xcc8>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4a1f      	ldr	r2, [pc, #124]	@ (80050ec <HAL_RCC_OscConfig+0xcc8>)
 800506e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005072:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8005074:	f7fd f9b2 	bl	80023dc <HAL_GetTick>
 8005078:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800507a:	e008      	b.n	800508e <HAL_RCC_OscConfig+0xc6a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800507c:	f7fd f9ae 	bl	80023dc <HAL_GetTick>
 8005080:	4602      	mov	r2, r0
 8005082:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005084:	1ad3      	subs	r3, r2, r3
 8005086:	2b02      	cmp	r3, #2
 8005088:	d901      	bls.n	800508e <HAL_RCC_OscConfig+0xc6a>
          {
            return HAL_TIMEOUT;
 800508a:	2303      	movs	r3, #3
 800508c:	e09f      	b.n	80051ce <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800508e:	4b17      	ldr	r3, [pc, #92]	@ (80050ec <HAL_RCC_OscConfig+0xcc8>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005096:	2b00      	cmp	r3, #0
 8005098:	d0f0      	beq.n	800507c <HAL_RCC_OscConfig+0xc58>
          }
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800509a:	4b14      	ldr	r3, [pc, #80]	@ (80050ec <HAL_RCC_OscConfig+0xcc8>)
 800509c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800509e:	4a13      	ldr	r2, [pc, #76]	@ (80050ec <HAL_RCC_OscConfig+0xcc8>)
 80050a0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80050a4:	6293      	str	r3, [r2, #40]	@ 0x28
 80050a6:	e091      	b.n	80051cc <HAL_RCC_OscConfig+0xda8>

      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 80050a8:	4b10      	ldr	r3, [pc, #64]	@ (80050ec <HAL_RCC_OscConfig+0xcc8>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a0f      	ldr	r2, [pc, #60]	@ (80050ec <HAL_RCC_OscConfig+0xcc8>)
 80050ae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80050b2:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80050b4:	f7fd f992 	bl	80023dc <HAL_GetTick>
 80050b8:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80050ba:	e008      	b.n	80050ce <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050bc:	f7fd f98e 	bl	80023dc <HAL_GetTick>
 80050c0:	4602      	mov	r2, r0
 80050c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050c4:	1ad3      	subs	r3, r2, r3
 80050c6:	2b02      	cmp	r3, #2
 80050c8:	d901      	bls.n	80050ce <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 80050ca:	2303      	movs	r3, #3
 80050cc:	e07f      	b.n	80051ce <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80050ce:	4b07      	ldr	r3, [pc, #28]	@ (80050ec <HAL_RCC_OscConfig+0xcc8>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d1f0      	bne.n	80050bc <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 80050da:	4b04      	ldr	r3, [pc, #16]	@ (80050ec <HAL_RCC_OscConfig+0xcc8>)
 80050dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050de:	4a03      	ldr	r2, [pc, #12]	@ (80050ec <HAL_RCC_OscConfig+0xcc8>)
 80050e0:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 80050e4:	f023 0303 	bic.w	r3, r3, #3
 80050e8:	6293      	str	r3, [r2, #40]	@ 0x28
 80050ea:	e06f      	b.n	80051cc <HAL_RCC_OscConfig+0xda8>
 80050ec:	46020c00 	.word	0x46020c00
 80050f0:	46020800 	.word	0x46020800
 80050f4:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 80050f8:	4b37      	ldr	r3, [pc, #220]	@ (80051d8 <HAL_RCC_OscConfig+0xdb4>)
 80050fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050fc:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80050fe:	4b36      	ldr	r3, [pc, #216]	@ (80051d8 <HAL_RCC_OscConfig+0xdb4>)
 8005100:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005102:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005108:	2b01      	cmp	r3, #1
 800510a:	d039      	beq.n	8005180 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 800510c:	69fb      	ldr	r3, [r7, #28]
 800510e:	f003 0203 	and.w	r2, r3, #3
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005116:	429a      	cmp	r2, r3
 8005118:	d132      	bne.n	8005180 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 800511a:	69fb      	ldr	r3, [r7, #28]
 800511c:	0a1b      	lsrs	r3, r3, #8
 800511e:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005126:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8005128:	429a      	cmp	r2, r3
 800512a:	d129      	bne.n	8005180 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 800512c:	69fb      	ldr	r3, [r7, #28]
 800512e:	f403 4270 	and.w	r2, r3, #61440	@ 0xf000
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8005136:	429a      	cmp	r2, r3
 8005138:	d122      	bne.n	8005180 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800513a:	69bb      	ldr	r3, [r7, #24]
 800513c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005144:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8005146:	429a      	cmp	r2, r3
 8005148:	d11a      	bne.n	8005180 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 800514a:	69bb      	ldr	r3, [r7, #24]
 800514c:	0a5b      	lsrs	r3, r3, #9
 800514e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005156:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005158:	429a      	cmp	r2, r3
 800515a:	d111      	bne.n	8005180 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 800515c:	69bb      	ldr	r3, [r7, #24]
 800515e:	0c1b      	lsrs	r3, r3, #16
 8005160:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005168:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800516a:	429a      	cmp	r2, r3
 800516c:	d108      	bne.n	8005180 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 800516e:	69bb      	ldr	r3, [r7, #24]
 8005170:	0e1b      	lsrs	r3, r3, #24
 8005172:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800517a:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800517c:	429a      	cmp	r2, r3
 800517e:	d001      	beq.n	8005184 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 8005180:	2301      	movs	r3, #1
 8005182:	e024      	b.n	80051ce <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8005184:	4b14      	ldr	r3, [pc, #80]	@ (80051d8 <HAL_RCC_OscConfig+0xdb4>)
 8005186:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005188:	08db      	lsrs	r3, r3, #3
 800518a:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8005192:	429a      	cmp	r2, r3
 8005194:	d01a      	beq.n	80051cc <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8005196:	4b10      	ldr	r3, [pc, #64]	@ (80051d8 <HAL_RCC_OscConfig+0xdb4>)
 8005198:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800519a:	4a0f      	ldr	r2, [pc, #60]	@ (80051d8 <HAL_RCC_OscConfig+0xdb4>)
 800519c:	f023 0310 	bic.w	r3, r3, #16
 80051a0:	6293      	str	r3, [r2, #40]	@ 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051a2:	f7fd f91b 	bl	80023dc <HAL_GetTick>
 80051a6:	62b8      	str	r0, [r7, #40]	@ 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 80051a8:	bf00      	nop
 80051aa:	f7fd f917 	bl	80023dc <HAL_GetTick>
 80051ae:	4602      	mov	r2, r0
 80051b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d0f9      	beq.n	80051aa <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80051ba:	4a07      	ldr	r2, [pc, #28]	@ (80051d8 <HAL_RCC_OscConfig+0xdb4>)
 80051bc:	00db      	lsls	r3, r3, #3
 80051be:	6393      	str	r3, [r2, #56]	@ 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 80051c0:	4b05      	ldr	r3, [pc, #20]	@ (80051d8 <HAL_RCC_OscConfig+0xdb4>)
 80051c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051c4:	4a04      	ldr	r2, [pc, #16]	@ (80051d8 <HAL_RCC_OscConfig+0xdb4>)
 80051c6:	f043 0310 	orr.w	r3, r3, #16
 80051ca:	6293      	str	r3, [r2, #40]	@ 0x28
      }
    }
  }
  return HAL_OK;
 80051cc:	2300      	movs	r3, #0
}
 80051ce:	4618      	mov	r0, r3
 80051d0:	3738      	adds	r7, #56	@ 0x38
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bd80      	pop	{r7, pc}
 80051d6:	bf00      	nop
 80051d8:	46020c00 	.word	0x46020c00

080051dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b086      	sub	sp, #24
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
 80051e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d101      	bne.n	80051f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80051ec:	2301      	movs	r3, #1
 80051ee:	e1d9      	b.n	80055a4 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80051f0:	4b9b      	ldr	r3, [pc, #620]	@ (8005460 <HAL_RCC_ClockConfig+0x284>)
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f003 030f 	and.w	r3, r3, #15
 80051f8:	683a      	ldr	r2, [r7, #0]
 80051fa:	429a      	cmp	r2, r3
 80051fc:	d910      	bls.n	8005220 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051fe:	4b98      	ldr	r3, [pc, #608]	@ (8005460 <HAL_RCC_ClockConfig+0x284>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f023 020f 	bic.w	r2, r3, #15
 8005206:	4996      	ldr	r1, [pc, #600]	@ (8005460 <HAL_RCC_ClockConfig+0x284>)
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	4313      	orrs	r3, r2
 800520c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800520e:	4b94      	ldr	r3, [pc, #592]	@ (8005460 <HAL_RCC_ClockConfig+0x284>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f003 030f 	and.w	r3, r3, #15
 8005216:	683a      	ldr	r2, [r7, #0]
 8005218:	429a      	cmp	r2, r3
 800521a:	d001      	beq.n	8005220 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800521c:	2301      	movs	r3, #1
 800521e:	e1c1      	b.n	80055a4 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f003 0310 	and.w	r3, r3, #16
 8005228:	2b00      	cmp	r3, #0
 800522a:	d010      	beq.n	800524e <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	695a      	ldr	r2, [r3, #20]
 8005230:	4b8c      	ldr	r3, [pc, #560]	@ (8005464 <HAL_RCC_ClockConfig+0x288>)
 8005232:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005234:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005238:	429a      	cmp	r2, r3
 800523a:	d908      	bls.n	800524e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 800523c:	4b89      	ldr	r3, [pc, #548]	@ (8005464 <HAL_RCC_ClockConfig+0x288>)
 800523e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005240:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	695b      	ldr	r3, [r3, #20]
 8005248:	4986      	ldr	r1, [pc, #536]	@ (8005464 <HAL_RCC_ClockConfig+0x288>)
 800524a:	4313      	orrs	r3, r2
 800524c:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f003 0308 	and.w	r3, r3, #8
 8005256:	2b00      	cmp	r3, #0
 8005258:	d012      	beq.n	8005280 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	691a      	ldr	r2, [r3, #16]
 800525e:	4b81      	ldr	r3, [pc, #516]	@ (8005464 <HAL_RCC_ClockConfig+0x288>)
 8005260:	6a1b      	ldr	r3, [r3, #32]
 8005262:	091b      	lsrs	r3, r3, #4
 8005264:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005268:	429a      	cmp	r2, r3
 800526a:	d909      	bls.n	8005280 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 800526c:	4b7d      	ldr	r3, [pc, #500]	@ (8005464 <HAL_RCC_ClockConfig+0x288>)
 800526e:	6a1b      	ldr	r3, [r3, #32]
 8005270:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	691b      	ldr	r3, [r3, #16]
 8005278:	011b      	lsls	r3, r3, #4
 800527a:	497a      	ldr	r1, [pc, #488]	@ (8005464 <HAL_RCC_ClockConfig+0x288>)
 800527c:	4313      	orrs	r3, r2
 800527e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f003 0304 	and.w	r3, r3, #4
 8005288:	2b00      	cmp	r3, #0
 800528a:	d010      	beq.n	80052ae <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	68da      	ldr	r2, [r3, #12]
 8005290:	4b74      	ldr	r3, [pc, #464]	@ (8005464 <HAL_RCC_ClockConfig+0x288>)
 8005292:	6a1b      	ldr	r3, [r3, #32]
 8005294:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005298:	429a      	cmp	r2, r3
 800529a:	d908      	bls.n	80052ae <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 800529c:	4b71      	ldr	r3, [pc, #452]	@ (8005464 <HAL_RCC_ClockConfig+0x288>)
 800529e:	6a1b      	ldr	r3, [r3, #32]
 80052a0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	68db      	ldr	r3, [r3, #12]
 80052a8:	496e      	ldr	r1, [pc, #440]	@ (8005464 <HAL_RCC_ClockConfig+0x288>)
 80052aa:	4313      	orrs	r3, r2
 80052ac:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f003 0302 	and.w	r3, r3, #2
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d010      	beq.n	80052dc <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	689a      	ldr	r2, [r3, #8]
 80052be:	4b69      	ldr	r3, [pc, #420]	@ (8005464 <HAL_RCC_ClockConfig+0x288>)
 80052c0:	6a1b      	ldr	r3, [r3, #32]
 80052c2:	f003 030f 	and.w	r3, r3, #15
 80052c6:	429a      	cmp	r2, r3
 80052c8:	d908      	bls.n	80052dc <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 80052ca:	4b66      	ldr	r3, [pc, #408]	@ (8005464 <HAL_RCC_ClockConfig+0x288>)
 80052cc:	6a1b      	ldr	r3, [r3, #32]
 80052ce:	f023 020f 	bic.w	r2, r3, #15
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	689b      	ldr	r3, [r3, #8]
 80052d6:	4963      	ldr	r1, [pc, #396]	@ (8005464 <HAL_RCC_ClockConfig+0x288>)
 80052d8:	4313      	orrs	r3, r2
 80052da:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f003 0301 	and.w	r3, r3, #1
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	f000 80d2 	beq.w	800548e <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 80052ea:	2300      	movs	r3, #0
 80052ec:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	685b      	ldr	r3, [r3, #4]
 80052f2:	2b03      	cmp	r3, #3
 80052f4:	d143      	bne.n	800537e <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80052f6:	4b5b      	ldr	r3, [pc, #364]	@ (8005464 <HAL_RCC_ClockConfig+0x288>)
 80052f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80052fc:	f003 0304 	and.w	r3, r3, #4
 8005300:	2b00      	cmp	r3, #0
 8005302:	d110      	bne.n	8005326 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8005304:	4b57      	ldr	r3, [pc, #348]	@ (8005464 <HAL_RCC_ClockConfig+0x288>)
 8005306:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800530a:	4a56      	ldr	r2, [pc, #344]	@ (8005464 <HAL_RCC_ClockConfig+0x288>)
 800530c:	f043 0304 	orr.w	r3, r3, #4
 8005310:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 8005314:	4b53      	ldr	r3, [pc, #332]	@ (8005464 <HAL_RCC_ClockConfig+0x288>)
 8005316:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800531a:	f003 0304 	and.w	r3, r3, #4
 800531e:	60bb      	str	r3, [r7, #8]
 8005320:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 8005322:	2301      	movs	r3, #1
 8005324:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 8005326:	f7fd f859 	bl	80023dc <HAL_GetTick>
 800532a:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 800532c:	4b4e      	ldr	r3, [pc, #312]	@ (8005468 <HAL_RCC_ClockConfig+0x28c>)
 800532e:	68db      	ldr	r3, [r3, #12]
 8005330:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005334:	2b00      	cmp	r3, #0
 8005336:	d00f      	beq.n	8005358 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8005338:	e008      	b.n	800534c <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 800533a:	f7fd f84f 	bl	80023dc <HAL_GetTick>
 800533e:	4602      	mov	r2, r0
 8005340:	693b      	ldr	r3, [r7, #16]
 8005342:	1ad3      	subs	r3, r2, r3
 8005344:	2b02      	cmp	r3, #2
 8005346:	d901      	bls.n	800534c <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8005348:	2303      	movs	r3, #3
 800534a:	e12b      	b.n	80055a4 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 800534c:	4b46      	ldr	r3, [pc, #280]	@ (8005468 <HAL_RCC_ClockConfig+0x28c>)
 800534e:	68db      	ldr	r3, [r3, #12]
 8005350:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005354:	2b00      	cmp	r3, #0
 8005356:	d0f0      	beq.n	800533a <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8005358:	7dfb      	ldrb	r3, [r7, #23]
 800535a:	2b01      	cmp	r3, #1
 800535c:	d107      	bne.n	800536e <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800535e:	4b41      	ldr	r3, [pc, #260]	@ (8005464 <HAL_RCC_ClockConfig+0x288>)
 8005360:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005364:	4a3f      	ldr	r2, [pc, #252]	@ (8005464 <HAL_RCC_ClockConfig+0x288>)
 8005366:	f023 0304 	bic.w	r3, r3, #4
 800536a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800536e:	4b3d      	ldr	r3, [pc, #244]	@ (8005464 <HAL_RCC_ClockConfig+0x288>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005376:	2b00      	cmp	r3, #0
 8005378:	d121      	bne.n	80053be <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 800537a:	2301      	movs	r3, #1
 800537c:	e112      	b.n	80055a4 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	685b      	ldr	r3, [r3, #4]
 8005382:	2b02      	cmp	r3, #2
 8005384:	d107      	bne.n	8005396 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005386:	4b37      	ldr	r3, [pc, #220]	@ (8005464 <HAL_RCC_ClockConfig+0x288>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800538e:	2b00      	cmp	r3, #0
 8005390:	d115      	bne.n	80053be <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8005392:	2301      	movs	r3, #1
 8005394:	e106      	b.n	80055a4 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	685b      	ldr	r3, [r3, #4]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d107      	bne.n	80053ae <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800539e:	4b31      	ldr	r3, [pc, #196]	@ (8005464 <HAL_RCC_ClockConfig+0x288>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f003 0304 	and.w	r3, r3, #4
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d109      	bne.n	80053be <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80053aa:	2301      	movs	r3, #1
 80053ac:	e0fa      	b.n	80055a4 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80053ae:	4b2d      	ldr	r3, [pc, #180]	@ (8005464 <HAL_RCC_ClockConfig+0x288>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d101      	bne.n	80053be <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80053ba:	2301      	movs	r3, #1
 80053bc:	e0f2      	b.n	80055a4 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 80053be:	4b29      	ldr	r3, [pc, #164]	@ (8005464 <HAL_RCC_ClockConfig+0x288>)
 80053c0:	69db      	ldr	r3, [r3, #28]
 80053c2:	f023 0203 	bic.w	r2, r3, #3
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	685b      	ldr	r3, [r3, #4]
 80053ca:	4926      	ldr	r1, [pc, #152]	@ (8005464 <HAL_RCC_ClockConfig+0x288>)
 80053cc:	4313      	orrs	r3, r2
 80053ce:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 80053d0:	f7fd f804 	bl	80023dc <HAL_GetTick>
 80053d4:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	685b      	ldr	r3, [r3, #4]
 80053da:	2b03      	cmp	r3, #3
 80053dc:	d112      	bne.n	8005404 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80053de:	e00a      	b.n	80053f6 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80053e0:	f7fc fffc 	bl	80023dc <HAL_GetTick>
 80053e4:	4602      	mov	r2, r0
 80053e6:	693b      	ldr	r3, [r7, #16]
 80053e8:	1ad3      	subs	r3, r2, r3
 80053ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d901      	bls.n	80053f6 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 80053f2:	2303      	movs	r3, #3
 80053f4:	e0d6      	b.n	80055a4 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80053f6:	4b1b      	ldr	r3, [pc, #108]	@ (8005464 <HAL_RCC_ClockConfig+0x288>)
 80053f8:	69db      	ldr	r3, [r3, #28]
 80053fa:	f003 030c 	and.w	r3, r3, #12
 80053fe:	2b0c      	cmp	r3, #12
 8005400:	d1ee      	bne.n	80053e0 <HAL_RCC_ClockConfig+0x204>
 8005402:	e044      	b.n	800548e <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	685b      	ldr	r3, [r3, #4]
 8005408:	2b02      	cmp	r3, #2
 800540a:	d112      	bne.n	8005432 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800540c:	e00a      	b.n	8005424 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800540e:	f7fc ffe5 	bl	80023dc <HAL_GetTick>
 8005412:	4602      	mov	r2, r0
 8005414:	693b      	ldr	r3, [r7, #16]
 8005416:	1ad3      	subs	r3, r2, r3
 8005418:	f241 3288 	movw	r2, #5000	@ 0x1388
 800541c:	4293      	cmp	r3, r2
 800541e:	d901      	bls.n	8005424 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8005420:	2303      	movs	r3, #3
 8005422:	e0bf      	b.n	80055a4 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8005424:	4b0f      	ldr	r3, [pc, #60]	@ (8005464 <HAL_RCC_ClockConfig+0x288>)
 8005426:	69db      	ldr	r3, [r3, #28]
 8005428:	f003 030c 	and.w	r3, r3, #12
 800542c:	2b08      	cmp	r3, #8
 800542e:	d1ee      	bne.n	800540e <HAL_RCC_ClockConfig+0x232>
 8005430:	e02d      	b.n	800548e <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	685b      	ldr	r3, [r3, #4]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d123      	bne.n	8005482 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800543a:	e00a      	b.n	8005452 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800543c:	f7fc ffce 	bl	80023dc <HAL_GetTick>
 8005440:	4602      	mov	r2, r0
 8005442:	693b      	ldr	r3, [r7, #16]
 8005444:	1ad3      	subs	r3, r2, r3
 8005446:	f241 3288 	movw	r2, #5000	@ 0x1388
 800544a:	4293      	cmp	r3, r2
 800544c:	d901      	bls.n	8005452 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 800544e:	2303      	movs	r3, #3
 8005450:	e0a8      	b.n	80055a4 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8005452:	4b04      	ldr	r3, [pc, #16]	@ (8005464 <HAL_RCC_ClockConfig+0x288>)
 8005454:	69db      	ldr	r3, [r3, #28]
 8005456:	f003 030c 	and.w	r3, r3, #12
 800545a:	2b00      	cmp	r3, #0
 800545c:	d1ee      	bne.n	800543c <HAL_RCC_ClockConfig+0x260>
 800545e:	e016      	b.n	800548e <HAL_RCC_ClockConfig+0x2b2>
 8005460:	40022000 	.word	0x40022000
 8005464:	46020c00 	.word	0x46020c00
 8005468:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800546c:	f7fc ffb6 	bl	80023dc <HAL_GetTick>
 8005470:	4602      	mov	r2, r0
 8005472:	693b      	ldr	r3, [r7, #16]
 8005474:	1ad3      	subs	r3, r2, r3
 8005476:	f241 3288 	movw	r2, #5000	@ 0x1388
 800547a:	4293      	cmp	r3, r2
 800547c:	d901      	bls.n	8005482 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 800547e:	2303      	movs	r3, #3
 8005480:	e090      	b.n	80055a4 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8005482:	4b4a      	ldr	r3, [pc, #296]	@ (80055ac <HAL_RCC_ClockConfig+0x3d0>)
 8005484:	69db      	ldr	r3, [r3, #28]
 8005486:	f003 030c 	and.w	r3, r3, #12
 800548a:	2b04      	cmp	r3, #4
 800548c:	d1ee      	bne.n	800546c <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f003 0302 	and.w	r3, r3, #2
 8005496:	2b00      	cmp	r3, #0
 8005498:	d010      	beq.n	80054bc <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	689a      	ldr	r2, [r3, #8]
 800549e:	4b43      	ldr	r3, [pc, #268]	@ (80055ac <HAL_RCC_ClockConfig+0x3d0>)
 80054a0:	6a1b      	ldr	r3, [r3, #32]
 80054a2:	f003 030f 	and.w	r3, r3, #15
 80054a6:	429a      	cmp	r2, r3
 80054a8:	d208      	bcs.n	80054bc <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 80054aa:	4b40      	ldr	r3, [pc, #256]	@ (80055ac <HAL_RCC_ClockConfig+0x3d0>)
 80054ac:	6a1b      	ldr	r3, [r3, #32]
 80054ae:	f023 020f 	bic.w	r2, r3, #15
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	689b      	ldr	r3, [r3, #8]
 80054b6:	493d      	ldr	r1, [pc, #244]	@ (80055ac <HAL_RCC_ClockConfig+0x3d0>)
 80054b8:	4313      	orrs	r3, r2
 80054ba:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80054bc:	4b3c      	ldr	r3, [pc, #240]	@ (80055b0 <HAL_RCC_ClockConfig+0x3d4>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f003 030f 	and.w	r3, r3, #15
 80054c4:	683a      	ldr	r2, [r7, #0]
 80054c6:	429a      	cmp	r2, r3
 80054c8:	d210      	bcs.n	80054ec <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054ca:	4b39      	ldr	r3, [pc, #228]	@ (80055b0 <HAL_RCC_ClockConfig+0x3d4>)
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f023 020f 	bic.w	r2, r3, #15
 80054d2:	4937      	ldr	r1, [pc, #220]	@ (80055b0 <HAL_RCC_ClockConfig+0x3d4>)
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	4313      	orrs	r3, r2
 80054d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80054da:	4b35      	ldr	r3, [pc, #212]	@ (80055b0 <HAL_RCC_ClockConfig+0x3d4>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f003 030f 	and.w	r3, r3, #15
 80054e2:	683a      	ldr	r2, [r7, #0]
 80054e4:	429a      	cmp	r2, r3
 80054e6:	d001      	beq.n	80054ec <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 80054e8:	2301      	movs	r3, #1
 80054ea:	e05b      	b.n	80055a4 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f003 0304 	and.w	r3, r3, #4
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d010      	beq.n	800551a <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	68da      	ldr	r2, [r3, #12]
 80054fc:	4b2b      	ldr	r3, [pc, #172]	@ (80055ac <HAL_RCC_ClockConfig+0x3d0>)
 80054fe:	6a1b      	ldr	r3, [r3, #32]
 8005500:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005504:	429a      	cmp	r2, r3
 8005506:	d208      	bcs.n	800551a <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8005508:	4b28      	ldr	r3, [pc, #160]	@ (80055ac <HAL_RCC_ClockConfig+0x3d0>)
 800550a:	6a1b      	ldr	r3, [r3, #32]
 800550c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	68db      	ldr	r3, [r3, #12]
 8005514:	4925      	ldr	r1, [pc, #148]	@ (80055ac <HAL_RCC_ClockConfig+0x3d0>)
 8005516:	4313      	orrs	r3, r2
 8005518:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f003 0308 	and.w	r3, r3, #8
 8005522:	2b00      	cmp	r3, #0
 8005524:	d012      	beq.n	800554c <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	691a      	ldr	r2, [r3, #16]
 800552a:	4b20      	ldr	r3, [pc, #128]	@ (80055ac <HAL_RCC_ClockConfig+0x3d0>)
 800552c:	6a1b      	ldr	r3, [r3, #32]
 800552e:	091b      	lsrs	r3, r3, #4
 8005530:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005534:	429a      	cmp	r2, r3
 8005536:	d209      	bcs.n	800554c <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8005538:	4b1c      	ldr	r3, [pc, #112]	@ (80055ac <HAL_RCC_ClockConfig+0x3d0>)
 800553a:	6a1b      	ldr	r3, [r3, #32]
 800553c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	691b      	ldr	r3, [r3, #16]
 8005544:	011b      	lsls	r3, r3, #4
 8005546:	4919      	ldr	r1, [pc, #100]	@ (80055ac <HAL_RCC_ClockConfig+0x3d0>)
 8005548:	4313      	orrs	r3, r2
 800554a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f003 0310 	and.w	r3, r3, #16
 8005554:	2b00      	cmp	r3, #0
 8005556:	d010      	beq.n	800557a <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	695a      	ldr	r2, [r3, #20]
 800555c:	4b13      	ldr	r3, [pc, #76]	@ (80055ac <HAL_RCC_ClockConfig+0x3d0>)
 800555e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005560:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005564:	429a      	cmp	r2, r3
 8005566:	d208      	bcs.n	800557a <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8005568:	4b10      	ldr	r3, [pc, #64]	@ (80055ac <HAL_RCC_ClockConfig+0x3d0>)
 800556a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800556c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	695b      	ldr	r3, [r3, #20]
 8005574:	490d      	ldr	r1, [pc, #52]	@ (80055ac <HAL_RCC_ClockConfig+0x3d0>)
 8005576:	4313      	orrs	r3, r2
 8005578:	624b      	str	r3, [r1, #36]	@ 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800557a:	f000 f821 	bl	80055c0 <HAL_RCC_GetSysClockFreq>
 800557e:	4602      	mov	r2, r0
 8005580:	4b0a      	ldr	r3, [pc, #40]	@ (80055ac <HAL_RCC_ClockConfig+0x3d0>)
 8005582:	6a1b      	ldr	r3, [r3, #32]
 8005584:	f003 030f 	and.w	r3, r3, #15
 8005588:	490a      	ldr	r1, [pc, #40]	@ (80055b4 <HAL_RCC_ClockConfig+0x3d8>)
 800558a:	5ccb      	ldrb	r3, [r1, r3]
 800558c:	fa22 f303 	lsr.w	r3, r2, r3
 8005590:	4a09      	ldr	r2, [pc, #36]	@ (80055b8 <HAL_RCC_ClockConfig+0x3dc>)
 8005592:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005594:	4b09      	ldr	r3, [pc, #36]	@ (80055bc <HAL_RCC_ClockConfig+0x3e0>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	4618      	mov	r0, r3
 800559a:	f7fc f989 	bl	80018b0 <HAL_InitTick>
 800559e:	4603      	mov	r3, r0
 80055a0:	73fb      	strb	r3, [r7, #15]

  return status;
 80055a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80055a4:	4618      	mov	r0, r3
 80055a6:	3718      	adds	r7, #24
 80055a8:	46bd      	mov	sp, r7
 80055aa:	bd80      	pop	{r7, pc}
 80055ac:	46020c00 	.word	0x46020c00
 80055b0:	40022000 	.word	0x40022000
 80055b4:	08009284 	.word	0x08009284
 80055b8:	20000000 	.word	0x20000000
 80055bc:	20000004 	.word	0x20000004

080055c0 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80055c0:	b480      	push	{r7}
 80055c2:	b08b      	sub	sp, #44	@ 0x2c
 80055c4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 80055c6:	2300      	movs	r3, #0
 80055c8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 80055ca:	2300      	movs	r3, #0
 80055cc:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80055ce:	4b78      	ldr	r3, [pc, #480]	@ (80057b0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80055d0:	69db      	ldr	r3, [r3, #28]
 80055d2:	f003 030c 	and.w	r3, r3, #12
 80055d6:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80055d8:	4b75      	ldr	r3, [pc, #468]	@ (80057b0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80055da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055dc:	f003 0303 	and.w	r3, r3, #3
 80055e0:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80055e2:	69bb      	ldr	r3, [r7, #24]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d005      	beq.n	80055f4 <HAL_RCC_GetSysClockFreq+0x34>
 80055e8:	69bb      	ldr	r3, [r7, #24]
 80055ea:	2b0c      	cmp	r3, #12
 80055ec:	d121      	bne.n	8005632 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80055ee:	697b      	ldr	r3, [r7, #20]
 80055f0:	2b01      	cmp	r3, #1
 80055f2:	d11e      	bne.n	8005632 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 80055f4:	4b6e      	ldr	r3, [pc, #440]	@ (80057b0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80055f6:	689b      	ldr	r3, [r3, #8]
 80055f8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d107      	bne.n	8005610 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8005600:	4b6b      	ldr	r3, [pc, #428]	@ (80057b0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005602:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005606:	0b1b      	lsrs	r3, r3, #12
 8005608:	f003 030f 	and.w	r3, r3, #15
 800560c:	627b      	str	r3, [r7, #36]	@ 0x24
 800560e:	e005      	b.n	800561c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8005610:	4b67      	ldr	r3, [pc, #412]	@ (80057b0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005612:	689b      	ldr	r3, [r3, #8]
 8005614:	0f1b      	lsrs	r3, r3, #28
 8005616:	f003 030f 	and.w	r3, r3, #15
 800561a:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800561c:	4a65      	ldr	r2, [pc, #404]	@ (80057b4 <HAL_RCC_GetSysClockFreq+0x1f4>)
 800561e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005620:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005624:	627b      	str	r3, [r7, #36]	@ 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005626:	69bb      	ldr	r3, [r7, #24]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d110      	bne.n	800564e <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800562c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800562e:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005630:	e00d      	b.n	800564e <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005632:	4b5f      	ldr	r3, [pc, #380]	@ (80057b0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005634:	69db      	ldr	r3, [r3, #28]
 8005636:	f003 030c 	and.w	r3, r3, #12
 800563a:	2b04      	cmp	r3, #4
 800563c:	d102      	bne.n	8005644 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800563e:	4b5e      	ldr	r3, [pc, #376]	@ (80057b8 <HAL_RCC_GetSysClockFreq+0x1f8>)
 8005640:	623b      	str	r3, [r7, #32]
 8005642:	e004      	b.n	800564e <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005644:	69bb      	ldr	r3, [r7, #24]
 8005646:	2b08      	cmp	r3, #8
 8005648:	d101      	bne.n	800564e <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800564a:	4b5b      	ldr	r3, [pc, #364]	@ (80057b8 <HAL_RCC_GetSysClockFreq+0x1f8>)
 800564c:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800564e:	69bb      	ldr	r3, [r7, #24]
 8005650:	2b0c      	cmp	r3, #12
 8005652:	f040 80a5 	bne.w	80057a0 <HAL_RCC_GetSysClockFreq+0x1e0>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8005656:	4b56      	ldr	r3, [pc, #344]	@ (80057b0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005658:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800565a:	f003 0303 	and.w	r3, r3, #3
 800565e:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8005660:	4b53      	ldr	r3, [pc, #332]	@ (80057b0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005662:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005664:	0a1b      	lsrs	r3, r3, #8
 8005666:	f003 030f 	and.w	r3, r3, #15
 800566a:	3301      	adds	r3, #1
 800566c:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800566e:	4b50      	ldr	r3, [pc, #320]	@ (80057b0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005670:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005672:	091b      	lsrs	r3, r3, #4
 8005674:	f003 0301 	and.w	r3, r3, #1
 8005678:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800567a:	4b4d      	ldr	r3, [pc, #308]	@ (80057b0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 800567c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800567e:	08db      	lsrs	r3, r3, #3
 8005680:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005684:	68ba      	ldr	r2, [r7, #8]
 8005686:	fb02 f303 	mul.w	r3, r2, r3
 800568a:	ee07 3a90 	vmov	s15, r3
 800568e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005692:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    switch (pllsource)
 8005696:	693b      	ldr	r3, [r7, #16]
 8005698:	2b02      	cmp	r3, #2
 800569a:	d003      	beq.n	80056a4 <HAL_RCC_GetSysClockFreq+0xe4>
 800569c:	693b      	ldr	r3, [r7, #16]
 800569e:	2b03      	cmp	r3, #3
 80056a0:	d022      	beq.n	80056e8 <HAL_RCC_GetSysClockFreq+0x128>
 80056a2:	e043      	b.n	800572c <HAL_RCC_GetSysClockFreq+0x16c>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	ee07 3a90 	vmov	s15, r3
 80056aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056ae:	eddf 6a43 	vldr	s13, [pc, #268]	@ 80057bc <HAL_RCC_GetSysClockFreq+0x1fc>
 80056b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056b6:	4b3e      	ldr	r3, [pc, #248]	@ (80057b0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80056b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056be:	ee07 3a90 	vmov	s15, r3
 80056c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80056c6:	ed97 6a01 	vldr	s12, [r7, #4]
 80056ca:	eddf 5a3d 	vldr	s11, [pc, #244]	@ 80057c0 <HAL_RCC_GetSysClockFreq+0x200>
 80056ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80056d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 80056d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80056da:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80056de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80056e6:	e046      	b.n	8005776 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	ee07 3a90 	vmov	s15, r3
 80056ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80056f2:	eddf 6a32 	vldr	s13, [pc, #200]	@ 80057bc <HAL_RCC_GetSysClockFreq+0x1fc>
 80056f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80056fa:	4b2d      	ldr	r3, [pc, #180]	@ (80057b0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 80056fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80056fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005702:	ee07 3a90 	vmov	s15, r3
 8005706:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800570a:	ed97 6a01 	vldr	s12, [r7, #4]
 800570e:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 80057c0 <HAL_RCC_GetSysClockFreq+0x200>
 8005712:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005716:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 800571a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800571e:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005722:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005726:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800572a:	e024      	b.n	8005776 <HAL_RCC_GetSysClockFreq+0x1b6>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800572c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800572e:	ee07 3a90 	vmov	s15, r3
 8005732:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	ee07 3a90 	vmov	s15, r3
 800573c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005740:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005744:	4b1a      	ldr	r3, [pc, #104]	@ (80057b0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005746:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005748:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800574c:	ee07 3a90 	vmov	s15, r3
 8005750:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005754:	ed97 6a01 	vldr	s12, [r7, #4]
 8005758:	eddf 5a19 	vldr	s11, [pc, #100]	@ 80057c0 <HAL_RCC_GetSysClockFreq+0x200>
 800575c:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8005760:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                         (fracn1 / (float_t)0x2000) + (float_t)1U);
 8005764:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005768:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800576c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005770:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005774:	bf00      	nop
    }

    pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8005776:	4b0e      	ldr	r3, [pc, #56]	@ (80057b0 <HAL_RCC_GetSysClockFreq+0x1f0>)
 8005778:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800577a:	0e1b      	lsrs	r3, r3, #24
 800577c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005780:	3301      	adds	r3, #1
 8005782:	603b      	str	r3, [r7, #0]
    sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	ee07 3a90 	vmov	s15, r3
 800578a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800578e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005792:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005796:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800579a:	ee17 3a90 	vmov	r3, s15
 800579e:	623b      	str	r3, [r7, #32]
  }

  return sysclockfreq;
 80057a0:	6a3b      	ldr	r3, [r7, #32]
}
 80057a2:	4618      	mov	r0, r3
 80057a4:	372c      	adds	r7, #44	@ 0x2c
 80057a6:	46bd      	mov	sp, r7
 80057a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ac:	4770      	bx	lr
 80057ae:	bf00      	nop
 80057b0:	46020c00 	.word	0x46020c00
 80057b4:	0800929c 	.word	0x0800929c
 80057b8:	00f42400 	.word	0x00f42400
 80057bc:	4b742400 	.word	0x4b742400
 80057c0:	46000000 	.word	0x46000000

080057c4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80057c8:	f7ff fefa 	bl	80055c0 <HAL_RCC_GetSysClockFreq>
 80057cc:	4602      	mov	r2, r0
 80057ce:	4b07      	ldr	r3, [pc, #28]	@ (80057ec <HAL_RCC_GetHCLKFreq+0x28>)
 80057d0:	6a1b      	ldr	r3, [r3, #32]
 80057d2:	f003 030f 	and.w	r3, r3, #15
 80057d6:	4906      	ldr	r1, [pc, #24]	@ (80057f0 <HAL_RCC_GetHCLKFreq+0x2c>)
 80057d8:	5ccb      	ldrb	r3, [r1, r3]
 80057da:	fa22 f303 	lsr.w	r3, r2, r3
 80057de:	4a05      	ldr	r2, [pc, #20]	@ (80057f4 <HAL_RCC_GetHCLKFreq+0x30>)
 80057e0:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 80057e2:	4b04      	ldr	r3, [pc, #16]	@ (80057f4 <HAL_RCC_GetHCLKFreq+0x30>)
 80057e4:	681b      	ldr	r3, [r3, #0]
}
 80057e6:	4618      	mov	r0, r3
 80057e8:	bd80      	pop	{r7, pc}
 80057ea:	bf00      	nop
 80057ec:	46020c00 	.word	0x46020c00
 80057f0:	08009284 	.word	0x08009284
 80057f4:	20000000 	.word	0x20000000

080057f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 80057fc:	f7ff ffe2 	bl	80057c4 <HAL_RCC_GetHCLKFreq>
 8005800:	4602      	mov	r2, r0
 8005802:	4b05      	ldr	r3, [pc, #20]	@ (8005818 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005804:	6a1b      	ldr	r3, [r3, #32]
 8005806:	0a1b      	lsrs	r3, r3, #8
 8005808:	f003 0307 	and.w	r3, r3, #7
 800580c:	4903      	ldr	r1, [pc, #12]	@ (800581c <HAL_RCC_GetPCLK2Freq+0x24>)
 800580e:	5ccb      	ldrb	r3, [r1, r3]
 8005810:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005814:	4618      	mov	r0, r3
 8005816:	bd80      	pop	{r7, pc}
 8005818:	46020c00 	.word	0x46020c00
 800581c:	08009294 	.word	0x08009294

08005820 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *pRCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005820:	b480      	push	{r7}
 8005822:	b083      	sub	sp, #12
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
 8005828:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(pRCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  pRCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | \
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	221f      	movs	r2, #31
 800582e:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_PCLK3;

  /* Get the SYSCLK configuration --------------------------------------------*/
  pRCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR1 & RCC_CFGR1_SW);
 8005830:	4b15      	ldr	r3, [pc, #84]	@ (8005888 <HAL_RCC_GetClockConfig+0x68>)
 8005832:	69db      	ldr	r3, [r3, #28]
 8005834:	f003 0203 	and.w	r2, r3, #3
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_HPRE);
 800583c:	4b12      	ldr	r3, [pc, #72]	@ (8005888 <HAL_RCC_GetClockConfig+0x68>)
 800583e:	6a1b      	ldr	r3, [r3, #32]
 8005840:	f003 020f 	and.w	r2, r3, #15
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_PPRE1);
 8005848:	4b0f      	ldr	r3, [pc, #60]	@ (8005888 <HAL_RCC_GetClockConfig+0x68>)
 800584a:	6a1b      	ldr	r3, [r3, #32]
 800584c:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4);
 8005854:	4b0c      	ldr	r3, [pc, #48]	@ (8005888 <HAL_RCC_GetClockConfig+0x68>)
 8005856:	6a1b      	ldr	r3, [r3, #32]
 8005858:	091b      	lsrs	r3, r3, #4
 800585a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	611a      	str	r2, [r3, #16]

  /* Get the APB3 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CFGR3 & RCC_CFGR3_PPRE3);
 8005862:	4b09      	ldr	r3, [pc, #36]	@ (8005888 <HAL_RCC_GetClockConfig+0x68>)
 8005864:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005866:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	615a      	str	r2, [r3, #20]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800586e:	4b07      	ldr	r3, [pc, #28]	@ (800588c <HAL_RCC_GetClockConfig+0x6c>)
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f003 020f 	and.w	r2, r3, #15
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	601a      	str	r2, [r3, #0]
}
 800587a:	bf00      	nop
 800587c:	370c      	adds	r7, #12
 800587e:	46bd      	mov	sp, r7
 8005880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005884:	4770      	bx	lr
 8005886:	bf00      	nop
 8005888:	46020c00 	.word	0x46020c00
 800588c:	40022000 	.word	0x40022000

08005890 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b086      	sub	sp, #24
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005898:	4b3e      	ldr	r3, [pc, #248]	@ (8005994 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 800589a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800589e:	f003 0304 	and.w	r3, r3, #4
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d003      	beq.n	80058ae <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80058a6:	f7fe fd3f 	bl	8004328 <HAL_PWREx_GetVoltageRange>
 80058aa:	6178      	str	r0, [r7, #20]
 80058ac:	e019      	b.n	80058e2 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80058ae:	4b39      	ldr	r3, [pc, #228]	@ (8005994 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80058b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80058b4:	4a37      	ldr	r2, [pc, #220]	@ (8005994 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80058b6:	f043 0304 	orr.w	r3, r3, #4
 80058ba:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 80058be:	4b35      	ldr	r3, [pc, #212]	@ (8005994 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80058c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80058c4:	f003 0304 	and.w	r3, r3, #4
 80058c8:	60fb      	str	r3, [r7, #12]
 80058ca:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80058cc:	f7fe fd2c 	bl	8004328 <HAL_PWREx_GetVoltageRange>
 80058d0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80058d2:	4b30      	ldr	r3, [pc, #192]	@ (8005994 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80058d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80058d8:	4a2e      	ldr	r2, [pc, #184]	@ (8005994 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 80058da:	f023 0304 	bic.w	r3, r3, #4
 80058de:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 80058e2:	697b      	ldr	r3, [r7, #20]
 80058e4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80058e8:	d003      	beq.n	80058f2 <RCC_SetFlashLatencyFromMSIRange+0x62>
 80058ea:	697b      	ldr	r3, [r7, #20]
 80058ec:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80058f0:	d109      	bne.n	8005906 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80058f8:	d202      	bcs.n	8005900 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 80058fa:	2301      	movs	r3, #1
 80058fc:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 80058fe:	e033      	b.n	8005968 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8005900:	2300      	movs	r3, #0
 8005902:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8005904:	e030      	b.n	8005968 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800590c:	d208      	bcs.n	8005920 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 800590e:	697b      	ldr	r3, [r7, #20]
 8005910:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005914:	d102      	bne.n	800591c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 8005916:	2303      	movs	r3, #3
 8005918:	613b      	str	r3, [r7, #16]
 800591a:	e025      	b.n	8005968 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 800591c:	2301      	movs	r3, #1
 800591e:	e035      	b.n	800598c <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005926:	d90f      	bls.n	8005948 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8005928:	697b      	ldr	r3, [r7, #20]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d109      	bne.n	8005942 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005934:	d902      	bls.n	800593c <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 8005936:	2300      	movs	r3, #0
 8005938:	613b      	str	r3, [r7, #16]
 800593a:	e015      	b.n	8005968 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 800593c:	2301      	movs	r3, #1
 800593e:	613b      	str	r3, [r7, #16]
 8005940:	e012      	b.n	8005968 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8005942:	2300      	movs	r3, #0
 8005944:	613b      	str	r3, [r7, #16]
 8005946:	e00f      	b.n	8005968 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800594e:	d109      	bne.n	8005964 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8005950:	697b      	ldr	r3, [r7, #20]
 8005952:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005956:	d102      	bne.n	800595e <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8005958:	2301      	movs	r3, #1
 800595a:	613b      	str	r3, [r7, #16]
 800595c:	e004      	b.n	8005968 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 800595e:	2302      	movs	r3, #2
 8005960:	613b      	str	r3, [r7, #16]
 8005962:	e001      	b.n	8005968 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8005964:	2301      	movs	r3, #1
 8005966:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005968:	4b0b      	ldr	r3, [pc, #44]	@ (8005998 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f023 020f 	bic.w	r2, r3, #15
 8005970:	4909      	ldr	r1, [pc, #36]	@ (8005998 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8005972:	693b      	ldr	r3, [r7, #16]
 8005974:	4313      	orrs	r3, r2
 8005976:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8005978:	4b07      	ldr	r3, [pc, #28]	@ (8005998 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f003 030f 	and.w	r3, r3, #15
 8005980:	693a      	ldr	r2, [r7, #16]
 8005982:	429a      	cmp	r2, r3
 8005984:	d001      	beq.n	800598a <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8005986:	2301      	movs	r3, #1
 8005988:	e000      	b.n	800598c <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 800598a:	2300      	movs	r3, #0
}
 800598c:	4618      	mov	r0, r3
 800598e:	3718      	adds	r7, #24
 8005990:	46bd      	mov	sp, r7
 8005992:	bd80      	pop	{r7, pc}
 8005994:	46020c00 	.word	0x46020c00
 8005998:	40022000 	.word	0x40022000

0800599c <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  *
  *         (*) value not defined in all devices.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 800599c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80059a0:	b0b8      	sub	sp, #224	@ 0xe0
 80059a2:	af00      	add	r7, sp, #0
 80059a4:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80059a8:	2300      	movs	r3, #0
 80059aa:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80059ae:	2300      	movs	r3, #0
 80059b0:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80059b4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80059b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059bc:	f002 0401 	and.w	r4, r2, #1
 80059c0:	2500      	movs	r5, #0
 80059c2:	ea54 0305 	orrs.w	r3, r4, r5
 80059c6:	d00b      	beq.n	80059e0 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 80059c8:	4bca      	ldr	r3, [pc, #808]	@ (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80059ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80059ce:	f023 0103 	bic.w	r1, r3, #3
 80059d2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80059d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80059d8:	4ac6      	ldr	r2, [pc, #792]	@ (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80059da:	430b      	orrs	r3, r1
 80059dc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80059e0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80059e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059e8:	f002 0802 	and.w	r8, r2, #2
 80059ec:	f04f 0900 	mov.w	r9, #0
 80059f0:	ea58 0309 	orrs.w	r3, r8, r9
 80059f4:	d00b      	beq.n	8005a0e <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 80059f6:	4bbf      	ldr	r3, [pc, #764]	@ (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 80059f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80059fc:	f023 010c 	bic.w	r1, r3, #12
 8005a00:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005a04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a06:	4abb      	ldr	r2, [pc, #748]	@ (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005a08:	430b      	orrs	r3, r1
 8005a0a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005a0e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a16:	f002 0a04 	and.w	sl, r2, #4
 8005a1a:	f04f 0b00 	mov.w	fp, #0
 8005a1e:	ea5a 030b 	orrs.w	r3, sl, fp
 8005a22:	d00b      	beq.n	8005a3c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8005a24:	4bb3      	ldr	r3, [pc, #716]	@ (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005a26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005a2a:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8005a2e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005a32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005a34:	4aaf      	ldr	r2, [pc, #700]	@ (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005a36:	430b      	orrs	r3, r1
 8005a38:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005a3c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a44:	f002 0308 	and.w	r3, r2, #8
 8005a48:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005a52:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005a56:	460b      	mov	r3, r1
 8005a58:	4313      	orrs	r3, r2
 8005a5a:	d00b      	beq.n	8005a74 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8005a5c:	4ba5      	ldr	r3, [pc, #660]	@ (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005a5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005a62:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005a66:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005a6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a6c:	4aa1      	ldr	r2, [pc, #644]	@ (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005a6e:	430b      	orrs	r3, r1
 8005a70:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005a74:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a7c:	f002 0310 	and.w	r3, r2, #16
 8005a80:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005a84:	2300      	movs	r3, #0
 8005a86:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8005a8a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8005a8e:	460b      	mov	r3, r1
 8005a90:	4313      	orrs	r3, r2
 8005a92:	d00b      	beq.n	8005aac <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8005a94:	4b97      	ldr	r3, [pc, #604]	@ (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005a96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005a9a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005a9e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005aa2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005aa4:	4a93      	ldr	r2, [pc, #588]	@ (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005aa6:	430b      	orrs	r3, r1
 8005aa8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005aac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ab4:	f002 0320 	and.w	r3, r2, #32
 8005ab8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005abc:	2300      	movs	r3, #0
 8005abe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005ac2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8005ac6:	460b      	mov	r3, r1
 8005ac8:	4313      	orrs	r3, r2
 8005aca:	d00b      	beq.n	8005ae4 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8005acc:	4b89      	ldr	r3, [pc, #548]	@ (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005ace:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005ad2:	f023 0107 	bic.w	r1, r3, #7
 8005ad6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005ada:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005adc:	4a85      	ldr	r2, [pc, #532]	@ (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005ade:	430b      	orrs	r3, r1
 8005ae0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005ae4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aec:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8005af0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005af4:	2300      	movs	r3, #0
 8005af6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005afa:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005afe:	460b      	mov	r3, r1
 8005b00:	4313      	orrs	r3, r2
 8005b02:	d00b      	beq.n	8005b1c <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8005b04:	4b7b      	ldr	r3, [pc, #492]	@ (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005b06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005b0a:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8005b0e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005b12:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005b14:	4a77      	ldr	r2, [pc, #476]	@ (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005b16:	430b      	orrs	r3, r1
 8005b18:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005b1c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005b20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b24:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8005b28:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005b2c:	2300      	movs	r3, #0
 8005b2e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8005b32:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8005b36:	460b      	mov	r3, r1
 8005b38:	4313      	orrs	r3, r2
 8005b3a:	d00b      	beq.n	8005b54 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8005b3c:	4b6d      	ldr	r3, [pc, #436]	@ (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005b3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005b42:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005b46:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005b4a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005b4c:	4a69      	ldr	r2, [pc, #420]	@ (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005b4e:	430b      	orrs	r3, r1
 8005b50:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005b54:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b5c:	f402 7380 	and.w	r3, r2, #256	@ 0x100
 8005b60:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005b64:	2300      	movs	r3, #0
 8005b66:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005b6a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8005b6e:	460b      	mov	r3, r1
 8005b70:	4313      	orrs	r3, r2
 8005b72:	d00b      	beq.n	8005b8c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8005b74:	4b5f      	ldr	r3, [pc, #380]	@ (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005b76:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005b7a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005b7e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005b82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b84:	4a5b      	ldr	r2, [pc, #364]	@ (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005b86:	430b      	orrs	r3, r1
 8005b88:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005b8c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005b90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b94:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8005b98:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8005ba2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8005ba6:	460b      	mov	r3, r1
 8005ba8:	4313      	orrs	r3, r2
 8005baa:	d00b      	beq.n	8005bc4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8005bac:	4b51      	ldr	r3, [pc, #324]	@ (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005bae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005bb2:	f423 4140 	bic.w	r1, r3, #49152	@ 0xc000
 8005bb6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005bba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005bbc:	4a4d      	ldr	r2, [pc, #308]	@ (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005bbe:	430b      	orrs	r3, r1
 8005bc0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005bc4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bcc:	f402 7300 	and.w	r3, r2, #512	@ 0x200
 8005bd0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8005bda:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8005bde:	460b      	mov	r3, r1
 8005be0:	4313      	orrs	r3, r2
 8005be2:	d00b      	beq.n	8005bfc <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8005be4:	4b43      	ldr	r3, [pc, #268]	@ (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005be6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005bea:	f423 6140 	bic.w	r1, r3, #3072	@ 0xc00
 8005bee:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005bf2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005bf4:	4a3f      	ldr	r2, [pc, #252]	@ (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005bf6:	430b      	orrs	r3, r1
 8005bf8:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005bfc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c04:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8005c08:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005c12:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8005c16:	460b      	mov	r3, r1
 8005c18:	4313      	orrs	r3, r2
 8005c1a:	d00b      	beq.n	8005c34 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8005c1c:	4b35      	ldr	r3, [pc, #212]	@ (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005c1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005c22:	f423 2140 	bic.w	r1, r3, #786432	@ 0xc0000
 8005c26:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005c2a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005c2c:	4a31      	ldr	r2, [pc, #196]	@ (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005c2e:	430b      	orrs	r3, r1
 8005c30:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8005c34:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c3c:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8005c40:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005c42:	2300      	movs	r3, #0
 8005c44:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8005c46:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8005c4a:	460b      	mov	r3, r1
 8005c4c:	4313      	orrs	r3, r2
 8005c4e:	d00c      	beq.n	8005c6a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 8005c50:	4b28      	ldr	r3, [pc, #160]	@ (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005c52:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005c56:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005c5a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005c5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005c62:	4a24      	ldr	r2, [pc, #144]	@ (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005c64:	430b      	orrs	r3, r1
 8005c66:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005c6a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c72:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8005c76:	673b      	str	r3, [r7, #112]	@ 0x70
 8005c78:	2300      	movs	r3, #0
 8005c7a:	677b      	str	r3, [r7, #116]	@ 0x74
 8005c7c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8005c80:	460b      	mov	r3, r1
 8005c82:	4313      	orrs	r3, r2
 8005c84:	d04f      	beq.n	8005d26 <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8005c86:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005c8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c8e:	2b80      	cmp	r3, #128	@ 0x80
 8005c90:	d02d      	beq.n	8005cee <HAL_RCCEx_PeriphCLKConfig+0x352>
 8005c92:	2b80      	cmp	r3, #128	@ 0x80
 8005c94:	d827      	bhi.n	8005ce6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005c96:	2b60      	cmp	r3, #96	@ 0x60
 8005c98:	d02e      	beq.n	8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8005c9a:	2b60      	cmp	r3, #96	@ 0x60
 8005c9c:	d823      	bhi.n	8005ce6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005c9e:	2b40      	cmp	r3, #64	@ 0x40
 8005ca0:	d006      	beq.n	8005cb0 <HAL_RCCEx_PeriphCLKConfig+0x314>
 8005ca2:	2b40      	cmp	r3, #64	@ 0x40
 8005ca4:	d81f      	bhi.n	8005ce6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d009      	beq.n	8005cbe <HAL_RCCEx_PeriphCLKConfig+0x322>
 8005caa:	2b20      	cmp	r3, #32
 8005cac:	d011      	beq.n	8005cd2 <HAL_RCCEx_PeriphCLKConfig+0x336>
 8005cae:	e01a      	b.n	8005ce6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005cb0:	4b10      	ldr	r3, [pc, #64]	@ (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005cb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cb4:	4a0f      	ldr	r2, [pc, #60]	@ (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8005cb6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005cba:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005cbc:	e01d      	b.n	8005cfa <HAL_RCCEx_PeriphCLKConfig+0x35e>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005cbe:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005cc2:	3308      	adds	r3, #8
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	f000 fc0d 	bl	80064e4 <RCCEx_PLL2_Config>
 8005cca:	4603      	mov	r3, r0
 8005ccc:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005cd0:	e013      	b.n	8005cfa <HAL_RCCEx_PeriphCLKConfig+0x35e>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005cd2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005cd6:	332c      	adds	r3, #44	@ 0x2c
 8005cd8:	4618      	mov	r0, r3
 8005cda:	f000 fc9b 	bl	8006614 <RCCEx_PLL3_Config>
 8005cde:	4603      	mov	r3, r0
 8005ce0:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI1 clock source config set later after clock selection check */
        break;
 8005ce4:	e009      	b.n	8005cfa <HAL_RCCEx_PeriphCLKConfig+0x35e>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8005cec:	e005      	b.n	8005cfa <HAL_RCCEx_PeriphCLKConfig+0x35e>
        break;
 8005cee:	bf00      	nop
 8005cf0:	e003      	b.n	8005cfa <HAL_RCCEx_PeriphCLKConfig+0x35e>
 8005cf2:	bf00      	nop
 8005cf4:	46020c00 	.word	0x46020c00
        break;
 8005cf8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005cfa:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d10d      	bne.n	8005d1e <HAL_RCCEx_PeriphCLKConfig+0x382>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8005d02:	4bb6      	ldr	r3, [pc, #728]	@ (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8005d04:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005d08:	f023 01e0 	bic.w	r1, r3, #224	@ 0xe0
 8005d0c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005d10:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005d14:	4ab1      	ldr	r2, [pc, #708]	@ (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8005d16:	430b      	orrs	r3, r1
 8005d18:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005d1c:	e003      	b.n	8005d26 <HAL_RCCEx_PeriphCLKConfig+0x38a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d1e:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8005d22:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005d26:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d2e:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8005d32:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005d34:	2300      	movs	r3, #0
 8005d36:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005d38:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8005d3c:	460b      	mov	r3, r1
 8005d3e:	4313      	orrs	r3, r2
 8005d40:	d053      	beq.n	8005dea <HAL_RCCEx_PeriphCLKConfig+0x44e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8005d42:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005d46:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005d4a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005d4e:	d033      	beq.n	8005db8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8005d50:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005d54:	d82c      	bhi.n	8005db0 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8005d56:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005d5a:	d02f      	beq.n	8005dbc <HAL_RCCEx_PeriphCLKConfig+0x420>
 8005d5c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005d60:	d826      	bhi.n	8005db0 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8005d62:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005d66:	d008      	beq.n	8005d7a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8005d68:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005d6c:	d820      	bhi.n	8005db0 <HAL_RCCEx_PeriphCLKConfig+0x414>
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d00a      	beq.n	8005d88 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 8005d72:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005d76:	d011      	beq.n	8005d9c <HAL_RCCEx_PeriphCLKConfig+0x400>
 8005d78:	e01a      	b.n	8005db0 <HAL_RCCEx_PeriphCLKConfig+0x414>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005d7a:	4b98      	ldr	r3, [pc, #608]	@ (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8005d7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d7e:	4a97      	ldr	r2, [pc, #604]	@ (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8005d80:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005d84:	6293      	str	r3, [r2, #40]	@ 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8005d86:	e01a      	b.n	8005dbe <HAL_RCCEx_PeriphCLKConfig+0x422>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005d88:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005d8c:	3308      	adds	r3, #8
 8005d8e:	4618      	mov	r0, r3
 8005d90:	f000 fba8 	bl	80064e4 <RCCEx_PLL2_Config>
 8005d94:	4603      	mov	r3, r0
 8005d96:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI2 clock source config set later after clock selection check */
        break;
 8005d9a:	e010      	b.n	8005dbe <HAL_RCCEx_PeriphCLKConfig+0x422>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005d9c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005da0:	332c      	adds	r3, #44	@ 0x2c
 8005da2:	4618      	mov	r0, r3
 8005da4:	f000 fc36 	bl	8006614 <RCCEx_PLL3_Config>
 8005da8:	4603      	mov	r3, r0
 8005daa:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* SAI2 clock source config set later after clock selection check */
        break;
 8005dae:	e006      	b.n	8005dbe <HAL_RCCEx_PeriphCLKConfig+0x422>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005db0:	2301      	movs	r3, #1
 8005db2:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8005db6:	e002      	b.n	8005dbe <HAL_RCCEx_PeriphCLKConfig+0x422>
        break;
 8005db8:	bf00      	nop
 8005dba:	e000      	b.n	8005dbe <HAL_RCCEx_PeriphCLKConfig+0x422>
        break;
 8005dbc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005dbe:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d10d      	bne.n	8005de2 <HAL_RCCEx_PeriphCLKConfig+0x446>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8005dc6:	4b85      	ldr	r3, [pc, #532]	@ (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8005dc8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005dcc:	f423 61e0 	bic.w	r1, r3, #1792	@ 0x700
 8005dd0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005dd4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005dd8:	4a80      	ldr	r2, [pc, #512]	@ (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8005dda:	430b      	orrs	r3, r1
 8005ddc:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005de0:	e003      	b.n	8005dea <HAL_RCCEx_PeriphCLKConfig+0x44e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005de2:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8005de6:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8005dea:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005dee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005df2:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8005df6:	663b      	str	r3, [r7, #96]	@ 0x60
 8005df8:	2300      	movs	r3, #0
 8005dfa:	667b      	str	r3, [r7, #100]	@ 0x64
 8005dfc:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8005e00:	460b      	mov	r3, r1
 8005e02:	4313      	orrs	r3, r2
 8005e04:	d046      	beq.n	8005e94 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8005e06:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005e0a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005e0e:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8005e12:	d028      	beq.n	8005e66 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8005e14:	f5b3 4fa0 	cmp.w	r3, #20480	@ 0x5000
 8005e18:	d821      	bhi.n	8005e5e <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8005e1a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005e1e:	d022      	beq.n	8005e66 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8005e20:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005e24:	d81b      	bhi.n	8005e5e <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8005e26:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005e2a:	d01c      	beq.n	8005e66 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8005e2c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005e30:	d815      	bhi.n	8005e5e <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8005e32:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005e36:	d008      	beq.n	8005e4a <HAL_RCCEx_PeriphCLKConfig+0x4ae>
 8005e38:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005e3c:	d80f      	bhi.n	8005e5e <HAL_RCCEx_PeriphCLKConfig+0x4c2>
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d011      	beq.n	8005e66 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8005e42:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e46:	d00e      	beq.n	8005e66 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8005e48:	e009      	b.n	8005e5e <HAL_RCCEx_PeriphCLKConfig+0x4c2>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8005e4a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005e4e:	3308      	adds	r3, #8
 8005e50:	4618      	mov	r0, r3
 8005e52:	f000 fb47 	bl	80064e4 <RCCEx_PLL2_Config>
 8005e56:	4603      	mov	r3, r0
 8005e58:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8005e5c:	e004      	b.n	8005e68 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8005e5e:	2301      	movs	r3, #1
 8005e60:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8005e64:	e000      	b.n	8005e68 <HAL_RCCEx_PeriphCLKConfig+0x4cc>
        break;
 8005e66:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e68:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d10d      	bne.n	8005e8c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 8005e70:	4b5a      	ldr	r3, [pc, #360]	@ (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8005e72:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005e76:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005e7a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005e7e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005e82:	4a56      	ldr	r2, [pc, #344]	@ (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8005e84:	430b      	orrs	r3, r1
 8005e86:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8005e8a:	e003      	b.n	8005e94 <HAL_RCCEx_PeriphCLKConfig+0x4f8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e8c:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8005e90:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8005e94:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e9c:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8005ea0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005ea2:	2300      	movs	r3, #0
 8005ea4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005ea6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8005eaa:	460b      	mov	r3, r1
 8005eac:	4313      	orrs	r3, r2
 8005eae:	d03f      	beq.n	8005f30 <HAL_RCCEx_PeriphCLKConfig+0x594>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8005eb0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005eb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005eb8:	2b04      	cmp	r3, #4
 8005eba:	d81e      	bhi.n	8005efa <HAL_RCCEx_PeriphCLKConfig+0x55e>
 8005ebc:	a201      	add	r2, pc, #4	@ (adr r2, 8005ec4 <HAL_RCCEx_PeriphCLKConfig+0x528>)
 8005ebe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ec2:	bf00      	nop
 8005ec4:	08005f03 	.word	0x08005f03
 8005ec8:	08005ed9 	.word	0x08005ed9
 8005ecc:	08005ee7 	.word	0x08005ee7
 8005ed0:	08005f03 	.word	0x08005f03
 8005ed4:	08005f03 	.word	0x08005f03
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005ed8:	4b40      	ldr	r3, [pc, #256]	@ (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8005eda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005edc:	4a3f      	ldr	r2, [pc, #252]	@ (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8005ede:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005ee2:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8005ee4:	e00e      	b.n	8005f04 <HAL_RCCEx_PeriphCLKConfig+0x568>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005ee6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005eea:	332c      	adds	r3, #44	@ 0x2c
 8005eec:	4618      	mov	r0, r3
 8005eee:	f000 fb91 	bl	8006614 <RCCEx_PLL3_Config>
 8005ef2:	4603      	mov	r3, r0
 8005ef4:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8005ef8:	e004      	b.n	8005f04 <HAL_RCCEx_PeriphCLKConfig+0x568>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8005efa:	2301      	movs	r3, #1
 8005efc:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8005f00:	e000      	b.n	8005f04 <HAL_RCCEx_PeriphCLKConfig+0x568>
        break;
 8005f02:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005f04:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d10d      	bne.n	8005f28 <HAL_RCCEx_PeriphCLKConfig+0x58c>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8005f0c:	4b33      	ldr	r3, [pc, #204]	@ (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8005f0e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8005f12:	f023 0107 	bic.w	r1, r3, #7
 8005f16:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005f1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f1e:	4a2f      	ldr	r2, [pc, #188]	@ (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8005f20:	430b      	orrs	r3, r1
 8005f22:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8005f26:	e003      	b.n	8005f30 <HAL_RCCEx_PeriphCLKConfig+0x594>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f28:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8005f2c:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8005f30:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f38:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8005f3c:	653b      	str	r3, [r7, #80]	@ 0x50
 8005f3e:	2300      	movs	r3, #0
 8005f40:	657b      	str	r3, [r7, #84]	@ 0x54
 8005f42:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8005f46:	460b      	mov	r3, r1
 8005f48:	4313      	orrs	r3, r2
 8005f4a:	d04d      	beq.n	8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x64c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8005f4c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005f50:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005f54:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005f58:	d028      	beq.n	8005fac <HAL_RCCEx_PeriphCLKConfig+0x610>
 8005f5a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005f5e:	d821      	bhi.n	8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8005f60:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005f64:	d024      	beq.n	8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x614>
 8005f66:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005f6a:	d81b      	bhi.n	8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8005f6c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005f70:	d00e      	beq.n	8005f90 <HAL_RCCEx_PeriphCLKConfig+0x5f4>
 8005f72:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005f76:	d815      	bhi.n	8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d01b      	beq.n	8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x618>
 8005f7c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f80:	d110      	bne.n	8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005f82:	4b16      	ldr	r3, [pc, #88]	@ (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8005f84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f86:	4a15      	ldr	r2, [pc, #84]	@ (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8005f88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005f8c:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 8005f8e:	e012      	b.n	8005fb6 <HAL_RCCEx_PeriphCLKConfig+0x61a>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8005f90:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005f94:	332c      	adds	r3, #44	@ 0x2c
 8005f96:	4618      	mov	r0, r3
 8005f98:	f000 fb3c 	bl	8006614 <RCCEx_PLL3_Config>
 8005f9c:	4603      	mov	r3, r0
 8005f9e:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8005fa2:	e008      	b.n	8005fb6 <HAL_RCCEx_PeriphCLKConfig+0x61a>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8005fa4:	2301      	movs	r3, #1
 8005fa6:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8005faa:	e004      	b.n	8005fb6 <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 8005fac:	bf00      	nop
 8005fae:	e002      	b.n	8005fb6 <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 8005fb0:	bf00      	nop
 8005fb2:	e000      	b.n	8005fb6 <HAL_RCCEx_PeriphCLKConfig+0x61a>
        break;
 8005fb4:	bf00      	nop
    }
    if (ret == HAL_OK)
 8005fb6:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d110      	bne.n	8005fe0 <HAL_RCCEx_PeriphCLKConfig+0x644>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 8005fbe:	4b07      	ldr	r3, [pc, #28]	@ (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8005fc0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8005fc4:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005fc8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005fcc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005fd0:	4a02      	ldr	r2, [pc, #8]	@ (8005fdc <HAL_RCCEx_PeriphCLKConfig+0x640>)
 8005fd2:	430b      	orrs	r3, r1
 8005fd4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8005fd8:	e006      	b.n	8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8005fda:	bf00      	nop
 8005fdc:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fe0:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8005fe4:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005fe8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8005fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ff0:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8005ff4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005ff6:	2300      	movs	r3, #0
 8005ff8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005ffa:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8005ffe:	460b      	mov	r3, r1
 8006000:	4313      	orrs	r3, r2
 8006002:	f000 80b5 	beq.w	8006170 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006006:	2300      	movs	r3, #0
 8006008:	f887 30d9 	strb.w	r3, [r7, #217]	@ 0xd9
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800600c:	4b9d      	ldr	r3, [pc, #628]	@ (8006284 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800600e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006012:	f003 0304 	and.w	r3, r3, #4
 8006016:	2b00      	cmp	r3, #0
 8006018:	d113      	bne.n	8006042 <HAL_RCCEx_PeriphCLKConfig+0x6a6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800601a:	4b9a      	ldr	r3, [pc, #616]	@ (8006284 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800601c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006020:	4a98      	ldr	r2, [pc, #608]	@ (8006284 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006022:	f043 0304 	orr.w	r3, r3, #4
 8006026:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
 800602a:	4b96      	ldr	r3, [pc, #600]	@ (8006284 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800602c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006030:	f003 0304 	and.w	r3, r3, #4
 8006034:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006038:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
      pwrclkchanged = SET;
 800603c:	2301      	movs	r3, #1
 800603e:	f887 30d9 	strb.w	r3, [r7, #217]	@ 0xd9
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8006042:	4b91      	ldr	r3, [pc, #580]	@ (8006288 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006044:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006046:	4a90      	ldr	r2, [pc, #576]	@ (8006288 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006048:	f043 0301 	orr.w	r3, r3, #1
 800604c:	6293      	str	r3, [r2, #40]	@ 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800604e:	f7fc f9c5 	bl	80023dc <HAL_GetTick>
 8006052:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006056:	e00b      	b.n	8006070 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006058:	f7fc f9c0 	bl	80023dc <HAL_GetTick>
 800605c:	4602      	mov	r2, r0
 800605e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006062:	1ad3      	subs	r3, r2, r3
 8006064:	2b02      	cmp	r3, #2
 8006066:	d903      	bls.n	8006070 <HAL_RCCEx_PeriphCLKConfig+0x6d4>
      {
        ret = HAL_TIMEOUT;
 8006068:	2303      	movs	r3, #3
 800606a:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 800606e:	e005      	b.n	800607c <HAL_RCCEx_PeriphCLKConfig+0x6e0>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006070:	4b85      	ldr	r3, [pc, #532]	@ (8006288 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8006072:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006074:	f003 0301 	and.w	r3, r3, #1
 8006078:	2b00      	cmp	r3, #0
 800607a:	d0ed      	beq.n	8006058 <HAL_RCCEx_PeriphCLKConfig+0x6bc>
      }
    }

    if (ret == HAL_OK)
 800607c:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006080:	2b00      	cmp	r3, #0
 8006082:	d165      	bne.n	8006150 <HAL_RCCEx_PeriphCLKConfig+0x7b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006084:	4b7f      	ldr	r3, [pc, #508]	@ (8006284 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006086:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800608a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800608e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8006092:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006096:	2b00      	cmp	r3, #0
 8006098:	d023      	beq.n	80060e2 <HAL_RCCEx_PeriphCLKConfig+0x746>
 800609a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800609e:	f8d3 20bc 	ldr.w	r2, [r3, #188]	@ 0xbc
 80060a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d01b      	beq.n	80060e2 <HAL_RCCEx_PeriphCLKConfig+0x746>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80060aa:	4b76      	ldr	r3, [pc, #472]	@ (8006284 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80060ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80060b0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80060b4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80060b8:	4b72      	ldr	r3, [pc, #456]	@ (8006284 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80060ba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80060be:	4a71      	ldr	r2, [pc, #452]	@ (8006284 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80060c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80060c4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 80060c8:	4b6e      	ldr	r3, [pc, #440]	@ (8006284 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80060ca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80060ce:	4a6d      	ldr	r2, [pc, #436]	@ (8006284 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80060d0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80060d4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80060d8:	4a6a      	ldr	r2, [pc, #424]	@ (8006284 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80060da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80060de:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80060e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80060e6:	f003 0301 	and.w	r3, r3, #1
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d019      	beq.n	8006122 <HAL_RCCEx_PeriphCLKConfig+0x786>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060ee:	f7fc f975 	bl	80023dc <HAL_GetTick>
 80060f2:	f8c7 00d4 	str.w	r0, [r7, #212]	@ 0xd4

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80060f6:	e00d      	b.n	8006114 <HAL_RCCEx_PeriphCLKConfig+0x778>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80060f8:	f7fc f970 	bl	80023dc <HAL_GetTick>
 80060fc:	4602      	mov	r2, r0
 80060fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006102:	1ad2      	subs	r2, r2, r3
 8006104:	f241 3388 	movw	r3, #5000	@ 0x1388
 8006108:	429a      	cmp	r2, r3
 800610a:	d903      	bls.n	8006114 <HAL_RCCEx_PeriphCLKConfig+0x778>
          {
            ret = HAL_TIMEOUT;
 800610c:	2303      	movs	r3, #3
 800610e:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
            break;
 8006112:	e006      	b.n	8006122 <HAL_RCCEx_PeriphCLKConfig+0x786>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006114:	4b5b      	ldr	r3, [pc, #364]	@ (8006284 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006116:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800611a:	f003 0302 	and.w	r3, r3, #2
 800611e:	2b00      	cmp	r3, #0
 8006120:	d0ea      	beq.n	80060f8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
          }
        }
      }

      if (ret == HAL_OK)
 8006122:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006126:	2b00      	cmp	r3, #0
 8006128:	d10d      	bne.n	8006146 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 800612a:	4b56      	ldr	r3, [pc, #344]	@ (8006284 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800612c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006130:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006134:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006138:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800613c:	4a51      	ldr	r2, [pc, #324]	@ (8006284 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800613e:	430b      	orrs	r3, r1
 8006140:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006144:	e008      	b.n	8006158 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006146:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800614a:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
 800614e:	e003      	b.n	8006158 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006150:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006154:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006158:	f897 30d9 	ldrb.w	r3, [r7, #217]	@ 0xd9
 800615c:	2b01      	cmp	r3, #1
 800615e:	d107      	bne.n	8006170 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006160:	4b48      	ldr	r3, [pc, #288]	@ (8006284 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006162:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006166:	4a47      	ldr	r2, [pc, #284]	@ (8006284 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006168:	f023 0304 	bic.w	r3, r3, #4
 800616c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 8006170:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006178:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800617c:	643b      	str	r3, [r7, #64]	@ 0x40
 800617e:	2300      	movs	r3, #0
 8006180:	647b      	str	r3, [r7, #68]	@ 0x44
 8006182:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8006186:	460b      	mov	r3, r1
 8006188:	4313      	orrs	r3, r2
 800618a:	d042      	beq.n	8006212 <HAL_RCCEx_PeriphCLKConfig+0x876>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 800618c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006190:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006194:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8006198:	d022      	beq.n	80061e0 <HAL_RCCEx_PeriphCLKConfig+0x844>
 800619a:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 800619e:	d81b      	bhi.n	80061d8 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 80061a0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80061a4:	d011      	beq.n	80061ca <HAL_RCCEx_PeriphCLKConfig+0x82e>
 80061a6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80061aa:	d815      	bhi.n	80061d8 <HAL_RCCEx_PeriphCLKConfig+0x83c>
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d019      	beq.n	80061e4 <HAL_RCCEx_PeriphCLKConfig+0x848>
 80061b0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80061b4:	d110      	bne.n	80061d8 <HAL_RCCEx_PeriphCLKConfig+0x83c>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80061b6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80061ba:	3308      	adds	r3, #8
 80061bc:	4618      	mov	r0, r3
 80061be:	f000 f991 	bl	80064e4 <RCCEx_PLL2_Config>
 80061c2:	4603      	mov	r3, r0
 80061c4:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 80061c8:	e00d      	b.n	80061e6 <HAL_RCCEx_PeriphCLKConfig+0x84a>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80061ca:	4b2e      	ldr	r3, [pc, #184]	@ (8006284 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80061cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061ce:	4a2d      	ldr	r2, [pc, #180]	@ (8006284 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80061d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80061d4:	6293      	str	r3, [r2, #40]	@ 0x28
        break;
 80061d6:	e006      	b.n	80061e6 <HAL_RCCEx_PeriphCLKConfig+0x84a>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80061d8:	2301      	movs	r3, #1
 80061da:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 80061de:	e002      	b.n	80061e6 <HAL_RCCEx_PeriphCLKConfig+0x84a>
        break;
 80061e0:	bf00      	nop
 80061e2:	e000      	b.n	80061e6 <HAL_RCCEx_PeriphCLKConfig+0x84a>
        break;
 80061e4:	bf00      	nop
    }
    if (ret == HAL_OK)
 80061e6:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d10d      	bne.n	800620a <HAL_RCCEx_PeriphCLKConfig+0x86e>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 80061ee:	4b25      	ldr	r3, [pc, #148]	@ (8006284 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 80061f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80061f4:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 80061f8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80061fc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006200:	4a20      	ldr	r2, [pc, #128]	@ (8006284 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006202:	430b      	orrs	r3, r1
 8006204:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006208:	e003      	b.n	8006212 <HAL_RCCEx_PeriphCLKConfig+0x876>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800620a:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 800620e:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006212:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800621a:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800621e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006220:	2300      	movs	r3, #0
 8006222:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006224:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8006228:	460b      	mov	r3, r1
 800622a:	4313      	orrs	r3, r2
 800622c:	d032      	beq.n	8006294 <HAL_RCCEx_PeriphCLKConfig+0x8f8>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 800622e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006232:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006236:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800623a:	d00b      	beq.n	8006254 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 800623c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006240:	d804      	bhi.n	800624c <HAL_RCCEx_PeriphCLKConfig+0x8b0>
 8006242:	2b00      	cmp	r3, #0
 8006244:	d008      	beq.n	8006258 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8006246:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800624a:	d007      	beq.n	800625c <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 800624c:	2301      	movs	r3, #1
 800624e:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 8006252:	e004      	b.n	800625e <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 8006254:	bf00      	nop
 8006256:	e002      	b.n	800625e <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 8006258:	bf00      	nop
 800625a:	e000      	b.n	800625e <HAL_RCCEx_PeriphCLKConfig+0x8c2>
        break;
 800625c:	bf00      	nop
    }
    if (ret == HAL_OK)
 800625e:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006262:	2b00      	cmp	r3, #0
 8006264:	d112      	bne.n	800628c <HAL_RCCEx_PeriphCLKConfig+0x8f0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 8006266:	4b07      	ldr	r3, [pc, #28]	@ (8006284 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 8006268:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800626c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006270:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006274:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006278:	4a02      	ldr	r2, [pc, #8]	@ (8006284 <HAL_RCCEx_PeriphCLKConfig+0x8e8>)
 800627a:	430b      	orrs	r3, r1
 800627c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 8006280:	e008      	b.n	8006294 <HAL_RCCEx_PeriphCLKConfig+0x8f8>
 8006282:	bf00      	nop
 8006284:	46020c00 	.word	0x46020c00
 8006288:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 800628c:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006290:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
  }
#endif /* SAES */

  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 8006294:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800629c:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80062a0:	633b      	str	r3, [r7, #48]	@ 0x30
 80062a2:	2300      	movs	r3, #0
 80062a4:	637b      	str	r3, [r7, #52]	@ 0x34
 80062a6:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80062aa:	460b      	mov	r3, r1
 80062ac:	4313      	orrs	r3, r2
 80062ae:	d019      	beq.n	80062e4 <HAL_RCCEx_PeriphCLKConfig+0x948>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 80062b0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80062b4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80062b8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80062bc:	d105      	bne.n	80062ca <HAL_RCCEx_PeriphCLKConfig+0x92e>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80062be:	4b88      	ldr	r3, [pc, #544]	@ (80064e0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80062c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062c2:	4a87      	ldr	r2, [pc, #540]	@ (80064e0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80062c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80062c8:	6293      	str	r3, [r2, #40]	@ 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 80062ca:	4b85      	ldr	r3, [pc, #532]	@ (80064e0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80062cc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80062d0:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80062d4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80062d8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80062dc:	4a80      	ldr	r2, [pc, #512]	@ (80064e0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80062de:	430b      	orrs	r3, r1
 80062e0:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 80062e4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80062e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062ec:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80062f0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80062f2:	2300      	movs	r3, #0
 80062f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80062f6:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80062fa:	460b      	mov	r3, r1
 80062fc:	4313      	orrs	r3, r2
 80062fe:	d00c      	beq.n	800631a <HAL_RCCEx_PeriphCLKConfig+0x97e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 8006300:	4b77      	ldr	r3, [pc, #476]	@ (80064e0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006302:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006306:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800630a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800630e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006312:	4973      	ldr	r1, [pc, #460]	@ (80064e0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006314:	4313      	orrs	r3, r2
 8006316:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 800631a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800631e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006322:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8006326:	623b      	str	r3, [r7, #32]
 8006328:	2300      	movs	r3, #0
 800632a:	627b      	str	r3, [r7, #36]	@ 0x24
 800632c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006330:	460b      	mov	r3, r1
 8006332:	4313      	orrs	r3, r2
 8006334:	d00c      	beq.n	8006350 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 8006336:	4b6a      	ldr	r3, [pc, #424]	@ (80064e0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006338:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800633c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8006340:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006344:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006348:	4965      	ldr	r1, [pc, #404]	@ (80064e0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800634a:	4313      	orrs	r3, r2
 800634c:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 8006350:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006358:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800635c:	61bb      	str	r3, [r7, #24]
 800635e:	2300      	movs	r3, #0
 8006360:	61fb      	str	r3, [r7, #28]
 8006362:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006366:	460b      	mov	r3, r1
 8006368:	4313      	orrs	r3, r2
 800636a:	d00c      	beq.n	8006386 <HAL_RCCEx_PeriphCLKConfig+0x9ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 800636c:	4b5c      	ldr	r3, [pc, #368]	@ (80064e0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800636e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8006372:	f023 0218 	bic.w	r2, r3, #24
 8006376:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800637a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800637e:	4958      	ldr	r1, [pc, #352]	@ (80064e0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006380:	4313      	orrs	r3, r2
 8006382:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8006386:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800638a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800638e:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8006392:	613b      	str	r3, [r7, #16]
 8006394:	2300      	movs	r3, #0
 8006396:	617b      	str	r3, [r7, #20]
 8006398:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800639c:	460b      	mov	r3, r1
 800639e:	4313      	orrs	r3, r2
 80063a0:	d032      	beq.n	8006408 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 80063a2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80063a6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80063aa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80063ae:	d105      	bne.n	80063bc <HAL_RCCEx_PeriphCLKConfig+0xa20>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80063b0:	4b4b      	ldr	r3, [pc, #300]	@ (80064e0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80063b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063b4:	4a4a      	ldr	r2, [pc, #296]	@ (80064e0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80063b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80063ba:	6293      	str	r3, [r2, #40]	@ 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 80063bc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80063c0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80063c4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80063c8:	d108      	bne.n	80063dc <HAL_RCCEx_PeriphCLKConfig+0xa40>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80063ca:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80063ce:	3308      	adds	r3, #8
 80063d0:	4618      	mov	r0, r3
 80063d2:	f000 f887 	bl	80064e4 <RCCEx_PLL2_Config>
 80063d6:	4603      	mov	r3, r0
 80063d8:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
    }
    if (ret == HAL_OK)
 80063dc:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d10d      	bne.n	8006400 <HAL_RCCEx_PeriphCLKConfig+0xa64>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 80063e4:	4b3e      	ldr	r3, [pc, #248]	@ (80064e0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80063e6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80063ea:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80063ee:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80063f2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80063f6:	493a      	ldr	r1, [pc, #232]	@ (80064e0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80063f8:	4313      	orrs	r3, r2
 80063fa:	f8c1 30e4 	str.w	r3, [r1, #228]	@ 0xe4
 80063fe:	e003      	b.n	8006408 <HAL_RCCEx_PeriphCLKConfig+0xa6c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006400:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006404:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 8006408:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800640c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006410:	f002 6300 	and.w	r3, r2, #134217728	@ 0x8000000
 8006414:	60bb      	str	r3, [r7, #8]
 8006416:	2300      	movs	r3, #0
 8006418:	60fb      	str	r3, [r7, #12]
 800641a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800641e:	460b      	mov	r3, r1
 8006420:	4313      	orrs	r3, r2
 8006422:	d03a      	beq.n	800649a <HAL_RCCEx_PeriphCLKConfig+0xafe>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 8006424:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006428:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800642c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006430:	d00e      	beq.n	8006450 <HAL_RCCEx_PeriphCLKConfig+0xab4>
 8006432:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8006436:	d815      	bhi.n	8006464 <HAL_RCCEx_PeriphCLKConfig+0xac8>
 8006438:	2b00      	cmp	r3, #0
 800643a:	d017      	beq.n	800646c <HAL_RCCEx_PeriphCLKConfig+0xad0>
 800643c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006440:	d110      	bne.n	8006464 <HAL_RCCEx_PeriphCLKConfig+0xac8>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006442:	4b27      	ldr	r3, [pc, #156]	@ (80064e0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006444:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006446:	4a26      	ldr	r2, [pc, #152]	@ (80064e0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006448:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800644c:	6293      	str	r3, [r2, #40]	@ 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 800644e:	e00e      	b.n	800646e <HAL_RCCEx_PeriphCLKConfig+0xad2>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006450:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006454:	3308      	adds	r3, #8
 8006456:	4618      	mov	r0, r3
 8006458:	f000 f844 	bl	80064e4 <RCCEx_PLL2_Config>
 800645c:	4603      	mov	r3, r0
 800645e:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8006462:	e004      	b.n	800646e <HAL_RCCEx_PeriphCLKConfig+0xad2>
      default:
        ret = HAL_ERROR;
 8006464:	2301      	movs	r3, #1
 8006466:	f887 30db 	strb.w	r3, [r7, #219]	@ 0xdb
        break;
 800646a:	e000      	b.n	800646e <HAL_RCCEx_PeriphCLKConfig+0xad2>
        break;
 800646c:	bf00      	nop
    }
    if (ret == HAL_OK)
 800646e:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006472:	2b00      	cmp	r3, #0
 8006474:	d10d      	bne.n	8006492 <HAL_RCCEx_PeriphCLKConfig+0xaf6>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 8006476:	4b1a      	ldr	r3, [pc, #104]	@ (80064e0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 8006478:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800647c:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8006480:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006484:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006488:	4915      	ldr	r1, [pc, #84]	@ (80064e0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 800648a:	4313      	orrs	r3, r2
 800648c:	f8c1 30e0 	str.w	r3, [r1, #224]	@ 0xe0
 8006490:	e003      	b.n	800649a <HAL_RCCEx_PeriphCLKConfig+0xafe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006492:	f897 30db 	ldrb.w	r3, [r7, #219]	@ 0xdb
 8006496:	f887 30da 	strb.w	r3, [r7, #218]	@ 0xda
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 800649a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800649e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064a2:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80064a6:	603b      	str	r3, [r7, #0]
 80064a8:	2300      	movs	r3, #0
 80064aa:	607b      	str	r3, [r7, #4]
 80064ac:	e9d7 1200 	ldrd	r1, r2, [r7]
 80064b0:	460b      	mov	r3, r1
 80064b2:	4313      	orrs	r3, r2
 80064b4:	d00c      	beq.n	80064d0 <HAL_RCCEx_PeriphCLKConfig+0xb34>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 80064b6:	4b0a      	ldr	r3, [pc, #40]	@ (80064e0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80064b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80064bc:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 80064c0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80064c4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80064c8:	4905      	ldr	r1, [pc, #20]	@ (80064e0 <HAL_RCCEx_PeriphCLKConfig+0xb44>)
 80064ca:	4313      	orrs	r3, r2
 80064cc:	f8c1 30e8 	str.w	r3, [r1, #232]	@ 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 80064d0:	f897 30da 	ldrb.w	r3, [r7, #218]	@ 0xda
}
 80064d4:	4618      	mov	r0, r3
 80064d6:	37e0      	adds	r7, #224	@ 0xe0
 80064d8:	46bd      	mov	sp, r7
 80064da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80064de:	bf00      	nop
 80064e0:	46020c00 	.word	0x46020c00

080064e4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b084      	sub	sp, #16
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 80064ec:	4b47      	ldr	r3, [pc, #284]	@ (800660c <RCCEx_PLL2_Config+0x128>)
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	4a46      	ldr	r2, [pc, #280]	@ (800660c <RCCEx_PLL2_Config+0x128>)
 80064f2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80064f6:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80064f8:	f7fb ff70 	bl	80023dc <HAL_GetTick>
 80064fc:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80064fe:	e008      	b.n	8006512 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006500:	f7fb ff6c 	bl	80023dc <HAL_GetTick>
 8006504:	4602      	mov	r2, r0
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	1ad3      	subs	r3, r2, r3
 800650a:	2b02      	cmp	r3, #2
 800650c:	d901      	bls.n	8006512 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800650e:	2303      	movs	r3, #3
 8006510:	e077      	b.n	8006602 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006512:	4b3e      	ldr	r3, [pc, #248]	@ (800660c <RCCEx_PLL2_Config+0x128>)
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800651a:	2b00      	cmp	r3, #0
 800651c:	d1f0      	bne.n	8006500 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800651e:	4b3b      	ldr	r3, [pc, #236]	@ (800660c <RCCEx_PLL2_Config+0x128>)
 8006520:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006522:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8006526:	f023 0303 	bic.w	r3, r3, #3
 800652a:	687a      	ldr	r2, [r7, #4]
 800652c:	6811      	ldr	r1, [r2, #0]
 800652e:	687a      	ldr	r2, [r7, #4]
 8006530:	6852      	ldr	r2, [r2, #4]
 8006532:	3a01      	subs	r2, #1
 8006534:	0212      	lsls	r2, r2, #8
 8006536:	430a      	orrs	r2, r1
 8006538:	4934      	ldr	r1, [pc, #208]	@ (800660c <RCCEx_PLL2_Config+0x128>)
 800653a:	4313      	orrs	r3, r2
 800653c:	62cb      	str	r3, [r1, #44]	@ 0x2c
 800653e:	4b33      	ldr	r3, [pc, #204]	@ (800660c <RCCEx_PLL2_Config+0x128>)
 8006540:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006542:	4b33      	ldr	r3, [pc, #204]	@ (8006610 <RCCEx_PLL2_Config+0x12c>)
 8006544:	4013      	ands	r3, r2
 8006546:	687a      	ldr	r2, [r7, #4]
 8006548:	6892      	ldr	r2, [r2, #8]
 800654a:	3a01      	subs	r2, #1
 800654c:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8006550:	687a      	ldr	r2, [r7, #4]
 8006552:	68d2      	ldr	r2, [r2, #12]
 8006554:	3a01      	subs	r2, #1
 8006556:	0252      	lsls	r2, r2, #9
 8006558:	b292      	uxth	r2, r2
 800655a:	4311      	orrs	r1, r2
 800655c:	687a      	ldr	r2, [r7, #4]
 800655e:	6912      	ldr	r2, [r2, #16]
 8006560:	3a01      	subs	r2, #1
 8006562:	0412      	lsls	r2, r2, #16
 8006564:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8006568:	4311      	orrs	r1, r2
 800656a:	687a      	ldr	r2, [r7, #4]
 800656c:	6952      	ldr	r2, [r2, #20]
 800656e:	3a01      	subs	r2, #1
 8006570:	0612      	lsls	r2, r2, #24
 8006572:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8006576:	430a      	orrs	r2, r1
 8006578:	4924      	ldr	r1, [pc, #144]	@ (800660c <RCCEx_PLL2_Config+0x128>)
 800657a:	4313      	orrs	r3, r2
 800657c:	63cb      	str	r3, [r1, #60]	@ 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800657e:	4b23      	ldr	r3, [pc, #140]	@ (800660c <RCCEx_PLL2_Config+0x128>)
 8006580:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006582:	f023 020c 	bic.w	r2, r3, #12
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	699b      	ldr	r3, [r3, #24]
 800658a:	4920      	ldr	r1, [pc, #128]	@ (800660c <RCCEx_PLL2_Config+0x128>)
 800658c:	4313      	orrs	r3, r2
 800658e:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8006590:	4b1e      	ldr	r3, [pc, #120]	@ (800660c <RCCEx_PLL2_Config+0x128>)
 8006592:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	6a1b      	ldr	r3, [r3, #32]
 8006598:	491c      	ldr	r1, [pc, #112]	@ (800660c <RCCEx_PLL2_Config+0x128>)
 800659a:	4313      	orrs	r3, r2
 800659c:	62cb      	str	r3, [r1, #44]	@ 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 800659e:	4b1b      	ldr	r3, [pc, #108]	@ (800660c <RCCEx_PLL2_Config+0x128>)
 80065a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065a2:	4a1a      	ldr	r2, [pc, #104]	@ (800660c <RCCEx_PLL2_Config+0x128>)
 80065a4:	f023 0310 	bic.w	r3, r3, #16
 80065a8:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80065aa:	4b18      	ldr	r3, [pc, #96]	@ (800660c <RCCEx_PLL2_Config+0x128>)
 80065ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065ae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80065b2:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80065b6:	687a      	ldr	r2, [r7, #4]
 80065b8:	69d2      	ldr	r2, [r2, #28]
 80065ba:	00d2      	lsls	r2, r2, #3
 80065bc:	4913      	ldr	r1, [pc, #76]	@ (800660c <RCCEx_PLL2_Config+0x128>)
 80065be:	4313      	orrs	r3, r2
 80065c0:	640b      	str	r3, [r1, #64]	@ 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 80065c2:	4b12      	ldr	r3, [pc, #72]	@ (800660c <RCCEx_PLL2_Config+0x128>)
 80065c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065c6:	4a11      	ldr	r2, [pc, #68]	@ (800660c <RCCEx_PLL2_Config+0x128>)
 80065c8:	f043 0310 	orr.w	r3, r3, #16
 80065cc:	62d3      	str	r3, [r2, #44]	@ 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 80065ce:	4b0f      	ldr	r3, [pc, #60]	@ (800660c <RCCEx_PLL2_Config+0x128>)
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	4a0e      	ldr	r2, [pc, #56]	@ (800660c <RCCEx_PLL2_Config+0x128>)
 80065d4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80065d8:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80065da:	f7fb feff 	bl	80023dc <HAL_GetTick>
 80065de:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80065e0:	e008      	b.n	80065f4 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80065e2:	f7fb fefb 	bl	80023dc <HAL_GetTick>
 80065e6:	4602      	mov	r2, r0
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	1ad3      	subs	r3, r2, r3
 80065ec:	2b02      	cmp	r3, #2
 80065ee:	d901      	bls.n	80065f4 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 80065f0:	2303      	movs	r3, #3
 80065f2:	e006      	b.n	8006602 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80065f4:	4b05      	ldr	r3, [pc, #20]	@ (800660c <RCCEx_PLL2_Config+0x128>)
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d0f0      	beq.n	80065e2 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 8006600:	2300      	movs	r3, #0

}
 8006602:	4618      	mov	r0, r3
 8006604:	3710      	adds	r7, #16
 8006606:	46bd      	mov	sp, r7
 8006608:	bd80      	pop	{r7, pc}
 800660a:	bf00      	nop
 800660c:	46020c00 	.word	0x46020c00
 8006610:	80800000 	.word	0x80800000

08006614 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 8006614:	b580      	push	{r7, lr}
 8006616:	b084      	sub	sp, #16
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 800661c:	4b47      	ldr	r3, [pc, #284]	@ (800673c <RCCEx_PLL3_Config+0x128>)
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	4a46      	ldr	r2, [pc, #280]	@ (800673c <RCCEx_PLL3_Config+0x128>)
 8006622:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006626:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8006628:	f7fb fed8 	bl	80023dc <HAL_GetTick>
 800662c:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800662e:	e008      	b.n	8006642 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006630:	f7fb fed4 	bl	80023dc <HAL_GetTick>
 8006634:	4602      	mov	r2, r0
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	1ad3      	subs	r3, r2, r3
 800663a:	2b02      	cmp	r3, #2
 800663c:	d901      	bls.n	8006642 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800663e:	2303      	movs	r3, #3
 8006640:	e077      	b.n	8006732 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006642:	4b3e      	ldr	r3, [pc, #248]	@ (800673c <RCCEx_PLL3_Config+0x128>)
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800664a:	2b00      	cmp	r3, #0
 800664c:	d1f0      	bne.n	8006630 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800664e:	4b3b      	ldr	r3, [pc, #236]	@ (800673c <RCCEx_PLL3_Config+0x128>)
 8006650:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006652:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8006656:	f023 0303 	bic.w	r3, r3, #3
 800665a:	687a      	ldr	r2, [r7, #4]
 800665c:	6811      	ldr	r1, [r2, #0]
 800665e:	687a      	ldr	r2, [r7, #4]
 8006660:	6852      	ldr	r2, [r2, #4]
 8006662:	3a01      	subs	r2, #1
 8006664:	0212      	lsls	r2, r2, #8
 8006666:	430a      	orrs	r2, r1
 8006668:	4934      	ldr	r1, [pc, #208]	@ (800673c <RCCEx_PLL3_Config+0x128>)
 800666a:	4313      	orrs	r3, r2
 800666c:	630b      	str	r3, [r1, #48]	@ 0x30
 800666e:	4b33      	ldr	r3, [pc, #204]	@ (800673c <RCCEx_PLL3_Config+0x128>)
 8006670:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006672:	4b33      	ldr	r3, [pc, #204]	@ (8006740 <RCCEx_PLL3_Config+0x12c>)
 8006674:	4013      	ands	r3, r2
 8006676:	687a      	ldr	r2, [r7, #4]
 8006678:	6892      	ldr	r2, [r2, #8]
 800667a:	3a01      	subs	r2, #1
 800667c:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8006680:	687a      	ldr	r2, [r7, #4]
 8006682:	68d2      	ldr	r2, [r2, #12]
 8006684:	3a01      	subs	r2, #1
 8006686:	0252      	lsls	r2, r2, #9
 8006688:	b292      	uxth	r2, r2
 800668a:	4311      	orrs	r1, r2
 800668c:	687a      	ldr	r2, [r7, #4]
 800668e:	6912      	ldr	r2, [r2, #16]
 8006690:	3a01      	subs	r2, #1
 8006692:	0412      	lsls	r2, r2, #16
 8006694:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8006698:	4311      	orrs	r1, r2
 800669a:	687a      	ldr	r2, [r7, #4]
 800669c:	6952      	ldr	r2, [r2, #20]
 800669e:	3a01      	subs	r2, #1
 80066a0:	0612      	lsls	r2, r2, #24
 80066a2:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 80066a6:	430a      	orrs	r2, r1
 80066a8:	4924      	ldr	r1, [pc, #144]	@ (800673c <RCCEx_PLL3_Config+0x128>)
 80066aa:	4313      	orrs	r3, r2
 80066ac:	644b      	str	r3, [r1, #68]	@ 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 80066ae:	4b23      	ldr	r3, [pc, #140]	@ (800673c <RCCEx_PLL3_Config+0x128>)
 80066b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066b2:	f023 020c 	bic.w	r2, r3, #12
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	699b      	ldr	r3, [r3, #24]
 80066ba:	4920      	ldr	r1, [pc, #128]	@ (800673c <RCCEx_PLL3_Config+0x128>)
 80066bc:	4313      	orrs	r3, r2
 80066be:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 80066c0:	4b1e      	ldr	r3, [pc, #120]	@ (800673c <RCCEx_PLL3_Config+0x128>)
 80066c2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	6a1b      	ldr	r3, [r3, #32]
 80066c8:	491c      	ldr	r1, [pc, #112]	@ (800673c <RCCEx_PLL3_Config+0x128>)
 80066ca:	4313      	orrs	r3, r2
 80066cc:	630b      	str	r3, [r1, #48]	@ 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 80066ce:	4b1b      	ldr	r3, [pc, #108]	@ (800673c <RCCEx_PLL3_Config+0x128>)
 80066d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066d2:	4a1a      	ldr	r2, [pc, #104]	@ (800673c <RCCEx_PLL3_Config+0x128>)
 80066d4:	f023 0310 	bic.w	r3, r3, #16
 80066d8:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80066da:	4b18      	ldr	r3, [pc, #96]	@ (800673c <RCCEx_PLL3_Config+0x128>)
 80066dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80066de:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80066e2:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 80066e6:	687a      	ldr	r2, [r7, #4]
 80066e8:	69d2      	ldr	r2, [r2, #28]
 80066ea:	00d2      	lsls	r2, r2, #3
 80066ec:	4913      	ldr	r1, [pc, #76]	@ (800673c <RCCEx_PLL3_Config+0x128>)
 80066ee:	4313      	orrs	r3, r2
 80066f0:	648b      	str	r3, [r1, #72]	@ 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 80066f2:	4b12      	ldr	r3, [pc, #72]	@ (800673c <RCCEx_PLL3_Config+0x128>)
 80066f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066f6:	4a11      	ldr	r2, [pc, #68]	@ (800673c <RCCEx_PLL3_Config+0x128>)
 80066f8:	f043 0310 	orr.w	r3, r3, #16
 80066fc:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 80066fe:	4b0f      	ldr	r3, [pc, #60]	@ (800673c <RCCEx_PLL3_Config+0x128>)
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	4a0e      	ldr	r2, [pc, #56]	@ (800673c <RCCEx_PLL3_Config+0x128>)
 8006704:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006708:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800670a:	f7fb fe67 	bl	80023dc <HAL_GetTick>
 800670e:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006710:	e008      	b.n	8006724 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006712:	f7fb fe63 	bl	80023dc <HAL_GetTick>
 8006716:	4602      	mov	r2, r0
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	1ad3      	subs	r3, r2, r3
 800671c:	2b02      	cmp	r3, #2
 800671e:	d901      	bls.n	8006724 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 8006720:	2303      	movs	r3, #3
 8006722:	e006      	b.n	8006732 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006724:	4b05      	ldr	r3, [pc, #20]	@ (800673c <RCCEx_PLL3_Config+0x128>)
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800672c:	2b00      	cmp	r3, #0
 800672e:	d0f0      	beq.n	8006712 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 8006730:	2300      	movs	r3, #0
}
 8006732:	4618      	mov	r0, r3
 8006734:	3710      	adds	r7, #16
 8006736:	46bd      	mov	sp, r7
 8006738:	bd80      	pop	{r7, pc}
 800673a:	bf00      	nop
 800673c:	46020c00 	.word	0x46020c00
 8006740:	80800000 	.word	0x80800000

08006744 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b084      	sub	sp, #16
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2b00      	cmp	r3, #0
 8006750:	d101      	bne.n	8006756 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006752:	2301      	movs	r3, #1
 8006754:	e14a      	b.n	80069ec <HAL_SPI_Init+0x2a8>

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
  if (IS_SPI_LIMITED_INSTANCE(hspi->Instance))
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	4a64      	ldr	r2, [pc, #400]	@ (80068ec <HAL_SPI_Init+0x1a8>)
 800675c:	4293      	cmp	r3, r2
 800675e:	d004      	beq.n	800676a <HAL_SPI_Init+0x26>
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	4a62      	ldr	r2, [pc, #392]	@ (80068f0 <HAL_SPI_Init+0x1ac>)
 8006766:	4293      	cmp	r3, r2
 8006768:	e000      	b.n	800676c <HAL_SPI_Init+0x28>
  {
    assert_param(IS_SPI_LIMITED_DATASIZE(hspi->Init.DataSize));
    assert_param(IS_SPI_LIMITED_FIFOTHRESHOLD(hspi->Init.FifoThreshold));
 800676a:	bf00      	nop
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2200      	movs	r2, #0
 8006770:	629a      	str	r2, [r3, #40]	@ 0x28
  assert_param(IS_SPI_RDY_MASTER_MANAGEMENT(hspi->Init.ReadyMasterManagement));
  assert_param(IS_SPI_RDY_POLARITY(hspi->Init.ReadyPolarity));
  assert_param(IS_SPI_MASTER_RX_AUTOSUSP(hspi->Init.MasterReceiverAutoSusp));

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	4a5d      	ldr	r2, [pc, #372]	@ (80068ec <HAL_SPI_Init+0x1a8>)
 8006778:	4293      	cmp	r3, r2
 800677a:	d004      	beq.n	8006786 <HAL_SPI_Init+0x42>
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	4a5b      	ldr	r2, [pc, #364]	@ (80068f0 <HAL_SPI_Init+0x1ac>)
 8006782:	4293      	cmp	r3, r2
 8006784:	d105      	bne.n	8006792 <HAL_SPI_Init+0x4e>
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	68db      	ldr	r3, [r3, #12]
 800678a:	2b0f      	cmp	r3, #15
 800678c:	d901      	bls.n	8006792 <HAL_SPI_Init+0x4e>
  {
    return HAL_ERROR;
 800678e:	2301      	movs	r3, #1
 8006790:	e12c      	b.n	80069ec <HAL_SPI_Init+0x2a8>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8006792:	6878      	ldr	r0, [r7, #4]
 8006794:	f000 fc24 	bl	8006fe0 <SPI_GetPacketSize>
 8006798:	60f8      	str	r0, [r7, #12]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	4a53      	ldr	r2, [pc, #332]	@ (80068ec <HAL_SPI_Init+0x1a8>)
 80067a0:	4293      	cmp	r3, r2
 80067a2:	d004      	beq.n	80067ae <HAL_SPI_Init+0x6a>
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	4a51      	ldr	r2, [pc, #324]	@ (80068f0 <HAL_SPI_Init+0x1ac>)
 80067aa:	4293      	cmp	r3, r2
 80067ac:	d102      	bne.n	80067b4 <HAL_SPI_Init+0x70>
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	2b08      	cmp	r3, #8
 80067b2:	d816      	bhi.n	80067e2 <HAL_SPI_Init+0x9e>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
  if (((IS_SPI_LIMITED_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 80067b8:	4a4e      	ldr	r2, [pc, #312]	@ (80068f4 <HAL_SPI_Init+0x1b0>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d00e      	beq.n	80067dc <HAL_SPI_Init+0x98>
      ((IS_SPI_FULL_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	4a4d      	ldr	r2, [pc, #308]	@ (80068f8 <HAL_SPI_Init+0x1b4>)
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d009      	beq.n	80067dc <HAL_SPI_Init+0x98>
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	4a4b      	ldr	r2, [pc, #300]	@ (80068fc <HAL_SPI_Init+0x1b8>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d004      	beq.n	80067dc <HAL_SPI_Init+0x98>
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	4a4a      	ldr	r2, [pc, #296]	@ (8006900 <HAL_SPI_Init+0x1bc>)
 80067d8:	4293      	cmp	r3, r2
 80067da:	d104      	bne.n	80067e6 <HAL_SPI_Init+0xa2>
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	2b10      	cmp	r3, #16
 80067e0:	d901      	bls.n	80067e6 <HAL_SPI_Init+0xa2>
  {
    return HAL_ERROR;
 80067e2:	2301      	movs	r3, #1
 80067e4:	e102      	b.n	80069ec <HAL_SPI_Init+0x2a8>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 80067ec:	b2db      	uxtb	r3, r3
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d135      	bne.n	800685e <HAL_SPI_Init+0x11a>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	2200      	movs	r2, #0
 80067f6:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    /* Init the SPI Callback settings */
    hspi->TxCpltCallback       = HAL_SPI_TxCpltCallback;       /* Legacy weak TxCpltCallback       */
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	4a41      	ldr	r2, [pc, #260]	@ (8006904 <HAL_SPI_Init+0x1c0>)
 80067fe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    hspi->RxCpltCallback       = HAL_SPI_RxCpltCallback;       /* Legacy weak RxCpltCallback       */
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	4a40      	ldr	r2, [pc, #256]	@ (8006908 <HAL_SPI_Init+0x1c4>)
 8006806:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    hspi->TxRxCpltCallback     = HAL_SPI_TxRxCpltCallback;     /* Legacy weak TxRxCpltCallback     */
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	4a3f      	ldr	r2, [pc, #252]	@ (800690c <HAL_SPI_Init+0x1c8>)
 800680e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
    hspi->TxHalfCpltCallback   = HAL_SPI_TxHalfCpltCallback;   /* Legacy weak TxHalfCpltCallback   */
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	4a3e      	ldr	r2, [pc, #248]	@ (8006910 <HAL_SPI_Init+0x1cc>)
 8006816:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    hspi->RxHalfCpltCallback   = HAL_SPI_RxHalfCpltCallback;   /* Legacy weak RxHalfCpltCallback   */
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	4a3d      	ldr	r2, [pc, #244]	@ (8006914 <HAL_SPI_Init+0x1d0>)
 800681e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
    hspi->TxRxHalfCpltCallback = HAL_SPI_TxRxHalfCpltCallback; /* Legacy weak TxRxHalfCpltCallback */
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	4a3c      	ldr	r2, [pc, #240]	@ (8006918 <HAL_SPI_Init+0x1d4>)
 8006826:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
    hspi->ErrorCallback        = HAL_SPI_ErrorCallback;        /* Legacy weak ErrorCallback        */
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	4a3b      	ldr	r2, [pc, #236]	@ (800691c <HAL_SPI_Init+0x1d8>)
 800682e:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
    hspi->AbortCpltCallback    = HAL_SPI_AbortCpltCallback;    /* Legacy weak AbortCpltCallback    */
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	4a3a      	ldr	r2, [pc, #232]	@ (8006920 <HAL_SPI_Init+0x1dc>)
 8006836:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
    hspi->SuspendCallback      = HAL_SPI_SuspendCallback;      /* Legacy weak SuspendCallback      */
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	4a39      	ldr	r2, [pc, #228]	@ (8006924 <HAL_SPI_Init+0x1e0>)
 800683e:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0

    if (hspi->MspInitCallback == NULL)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006848:	2b00      	cmp	r3, #0
 800684a:	d103      	bne.n	8006854 <HAL_SPI_Init+0x110>
    {
      hspi->MspInitCallback = HAL_SPI_MspInit; /* Legacy weak MspInit  */
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	4a36      	ldr	r2, [pc, #216]	@ (8006928 <HAL_SPI_Init+0x1e4>)
 8006850:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
    }

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800685a:	6878      	ldr	r0, [r7, #4]
 800685c:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	2202      	movs	r2, #2
 8006862:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	681a      	ldr	r2, [r3, #0]
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	f022 0201 	bic.w	r2, r2, #1
 8006874:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	689b      	ldr	r3, [r3, #8]
 800687c:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 8006880:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	699b      	ldr	r3, [r3, #24]
 8006886:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800688a:	d119      	bne.n	80068c0 <HAL_SPI_Init+0x17c>
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	685b      	ldr	r3, [r3, #4]
 8006890:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006894:	d103      	bne.n	800689e <HAL_SPI_Init+0x15a>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800689a:	2b00      	cmp	r3, #0
 800689c:	d008      	beq.n	80068b0 <HAL_SPI_Init+0x16c>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d10c      	bne.n	80068c0 <HAL_SPI_Init+0x17c>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80068aa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80068ae:	d107      	bne.n	80068c0 <HAL_SPI_Init+0x17c>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	681a      	ldr	r2, [r3, #0]
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80068be:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	685b      	ldr	r3, [r3, #4]
 80068c4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d02f      	beq.n	800692c <HAL_SPI_Init+0x1e8>
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	68db      	ldr	r3, [r3, #12]
 80068d0:	2b06      	cmp	r3, #6
 80068d2:	d92b      	bls.n	800692c <HAL_SPI_Init+0x1e8>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	430a      	orrs	r2, r1
 80068e8:	601a      	str	r2, [r3, #0]
 80068ea:	e027      	b.n	800693c <HAL_SPI_Init+0x1f8>
 80068ec:	46002000 	.word	0x46002000
 80068f0:	56002000 	.word	0x56002000
 80068f4:	40013000 	.word	0x40013000
 80068f8:	50013000 	.word	0x50013000
 80068fc:	40003800 	.word	0x40003800
 8006900:	50003800 	.word	0x50003800
 8006904:	08006db5 	.word	0x08006db5
 8006908:	08006dc9 	.word	0x08006dc9
 800690c:	08006ddd 	.word	0x08006ddd
 8006910:	08006df1 	.word	0x08006df1
 8006914:	08006e05 	.word	0x08006e05
 8006918:	08006e19 	.word	0x08006e19
 800691c:	08006e2d 	.word	0x08006e2d
 8006920:	08006e41 	.word	0x08006e41
 8006924:	08006e55 	.word	0x08006e55
 8006928:	080014a9 	.word	0x080014a9
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	681a      	ldr	r2, [r3, #0]
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800693a:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	69da      	ldr	r2, [r3, #28]
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006944:	431a      	orrs	r2, r3
 8006946:	68bb      	ldr	r3, [r7, #8]
 8006948:	431a      	orrs	r2, r3
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800694e:	ea42 0103 	orr.w	r1, r2, r3
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	68da      	ldr	r2, [r3, #12]
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	430a      	orrs	r2, r1
 800695c:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006966:	431a      	orrs	r2, r3
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800696c:	431a      	orrs	r2, r3
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	699b      	ldr	r3, [r3, #24]
 8006972:	431a      	orrs	r2, r3
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	691b      	ldr	r3, [r3, #16]
 8006978:	431a      	orrs	r2, r3
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	695b      	ldr	r3, [r3, #20]
 800697e:	431a      	orrs	r2, r3
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	6a1b      	ldr	r3, [r3, #32]
 8006984:	431a      	orrs	r2, r3
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	685b      	ldr	r3, [r3, #4]
 800698a:	431a      	orrs	r2, r3
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006990:	431a      	orrs	r2, r3
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	689b      	ldr	r3, [r3, #8]
 8006996:	431a      	orrs	r2, r3
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800699c:	431a      	orrs	r2, r3
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80069a2:	431a      	orrs	r2, r3
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80069a8:	ea42 0103 	orr.w	r1, r2, r3
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	430a      	orrs	r2, r1
 80069b6:	60da      	str	r2, [r3, #12]
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	685b      	ldr	r3, [r3, #4]
 80069bc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d00a      	beq.n	80069da <HAL_SPI_Init+0x296>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	68db      	ldr	r3, [r3, #12]
 80069ca:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	430a      	orrs	r2, r1
 80069d8:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	2200      	movs	r2, #0
 80069de:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hspi->State     = HAL_SPI_STATE_READY;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	2201      	movs	r2, #1
 80069e6:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

  return HAL_OK;
 80069ea:	2300      	movs	r3, #0
}
 80069ec:	4618      	mov	r0, r3
 80069ee:	3710      	adds	r7, #16
 80069f0:	46bd      	mov	sp, r7
 80069f2:	bd80      	pop	{r7, pc}

080069f4 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b08a      	sub	sp, #40	@ 0x28
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	691b      	ldr	r3, [r3, #16]
 8006a02:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	695b      	ldr	r3, [r3, #20]
 8006a0a:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 8006a0c:	6a3a      	ldr	r2, [r7, #32]
 8006a0e:	69fb      	ldr	r3, [r7, #28]
 8006a10:	4013      	ands	r3, r2
 8006a12:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	689b      	ldr	r3, [r3, #8]
 8006a1a:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8006a26:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	3330      	adds	r3, #48	@ 0x30
 8006a2e:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 8006a30:	69fb      	ldr	r3, [r7, #28]
 8006a32:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d012      	beq.n	8006a60 <HAL_SPI_IRQHandler+0x6c>
 8006a3a:	6a3b      	ldr	r3, [r7, #32]
 8006a3c:	f003 0308 	and.w	r3, r3, #8
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d00d      	beq.n	8006a60 <HAL_SPI_IRQHandler+0x6c>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	699a      	ldr	r2, [r3, #24]
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006a52:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006a5a:	6878      	ldr	r0, [r7, #4]
 8006a5c:	4798      	blx	r3
#else
    HAL_SPI_SuspendCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 8006a5e:	e1a4      	b.n	8006daa <HAL_SPI_IRQHandler+0x3b6>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8006a60:	69bb      	ldr	r3, [r7, #24]
 8006a62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d113      	bne.n	8006a92 <HAL_SPI_IRQHandler+0x9e>
 8006a6a:	69bb      	ldr	r3, [r7, #24]
 8006a6c:	f003 0320 	and.w	r3, r3, #32
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d10e      	bne.n	8006a92 <HAL_SPI_IRQHandler+0x9e>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 8006a74:	69bb      	ldr	r3, [r7, #24]
 8006a76:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d009      	beq.n	8006a92 <HAL_SPI_IRQHandler+0x9e>
  {
    hspi->TxISR(hspi);
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006a82:	6878      	ldr	r0, [r7, #4]
 8006a84:	4798      	blx	r3
    hspi->RxISR(hspi);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006a8a:	6878      	ldr	r0, [r7, #4]
 8006a8c:	4798      	blx	r3
    handled = 1UL;
 8006a8e:	2301      	movs	r3, #1
 8006a90:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8006a92:	69bb      	ldr	r3, [r7, #24]
 8006a94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d10f      	bne.n	8006abc <HAL_SPI_IRQHandler+0xc8>
 8006a9c:	69bb      	ldr	r3, [r7, #24]
 8006a9e:	f003 0301 	and.w	r3, r3, #1
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d00a      	beq.n	8006abc <HAL_SPI_IRQHandler+0xc8>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8006aa6:	69bb      	ldr	r3, [r7, #24]
 8006aa8:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d105      	bne.n	8006abc <HAL_SPI_IRQHandler+0xc8>
  {
    hspi->RxISR(hspi);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006ab4:	6878      	ldr	r0, [r7, #4]
 8006ab6:	4798      	blx	r3
    handled = 1UL;
 8006ab8:	2301      	movs	r3, #1
 8006aba:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8006abc:	69bb      	ldr	r3, [r7, #24]
 8006abe:	f003 0320 	and.w	r3, r3, #32
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d10f      	bne.n	8006ae6 <HAL_SPI_IRQHandler+0xf2>
 8006ac6:	69bb      	ldr	r3, [r7, #24]
 8006ac8:	f003 0302 	and.w	r3, r3, #2
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d00a      	beq.n	8006ae6 <HAL_SPI_IRQHandler+0xf2>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 8006ad0:	69bb      	ldr	r3, [r7, #24]
 8006ad2:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d105      	bne.n	8006ae6 <HAL_SPI_IRQHandler+0xf2>
  {
    hspi->TxISR(hspi);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006ade:	6878      	ldr	r0, [r7, #4]
 8006ae0:	4798      	blx	r3
    handled = 1UL;
 8006ae2:	2301      	movs	r3, #1
 8006ae4:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (handled != 0UL)
 8006ae6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	f040 8159 	bne.w	8006da0 <HAL_SPI_IRQHandler+0x3ac>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 8006aee:	69bb      	ldr	r3, [r7, #24]
 8006af0:	f003 0308 	and.w	r3, r3, #8
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	f000 8093 	beq.w	8006c20 <HAL_SPI_IRQHandler+0x22c>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	699a      	ldr	r2, [r3, #24]
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f042 0208 	orr.w	r2, r2, #8
 8006b08:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	699a      	ldr	r2, [r3, #24]
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f042 0210 	orr.w	r2, r2, #16
 8006b18:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	699a      	ldr	r2, [r3, #24]
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006b28:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	691a      	ldr	r2, [r3, #16]
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f022 0208 	bic.w	r2, r2, #8
 8006b38:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	689b      	ldr	r3, [r3, #8]
 8006b40:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d13d      	bne.n	8006bc4 <HAL_SPI_IRQHandler+0x1d0>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 8006b48:	e036      	b.n	8006bb8 <HAL_SPI_IRQHandler+0x1c4>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	68db      	ldr	r3, [r3, #12]
 8006b4e:	2b0f      	cmp	r3, #15
 8006b50:	d90b      	bls.n	8006b6a <HAL_SPI_IRQHandler+0x176>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681a      	ldr	r2, [r3, #0]
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006b5a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006b5c:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006b62:	1d1a      	adds	r2, r3, #4
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	66da      	str	r2, [r3, #108]	@ 0x6c
 8006b68:	e01d      	b.n	8006ba6 <HAL_SPI_IRQHandler+0x1b2>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	68db      	ldr	r3, [r3, #12]
 8006b6e:	2b07      	cmp	r3, #7
 8006b70:	d90b      	bls.n	8006b8a <HAL_SPI_IRQHandler+0x196>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006b76:	68fa      	ldr	r2, [r7, #12]
 8006b78:	8812      	ldrh	r2, [r2, #0]
 8006b7a:	b292      	uxth	r2, r2
 8006b7c:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006b82:	1c9a      	adds	r2, r3, #2
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	66da      	str	r2, [r3, #108]	@ 0x6c
 8006b88:	e00d      	b.n	8006ba6 <HAL_SPI_IRQHandler+0x1b2>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006b96:	7812      	ldrb	r2, [r2, #0]
 8006b98:	b2d2      	uxtb	r2, r2
 8006b9a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006ba0:	1c5a      	adds	r2, r3, #1
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	66da      	str	r2, [r3, #108]	@ 0x6c
        }

        hspi->RxXferCount--;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8006bac:	b29b      	uxth	r3, r3
 8006bae:	3b01      	subs	r3, #1
 8006bb0:	b29a      	uxth	r2, r3
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
      while (hspi->RxXferCount != 0UL)
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8006bbe:	b29b      	uxth	r3, r3
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d1c2      	bne.n	8006b4a <HAL_SPI_IRQHandler+0x156>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 8006bc4:	6878      	ldr	r0, [r7, #4]
 8006bc6:	f000 f96b 	bl	8006ea0 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	2201      	movs	r2, #1
 8006bce:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d005      	beq.n	8006be8 <HAL_SPI_IRQHandler+0x1f4>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006be2:	6878      	ldr	r0, [r7, #4]
 8006be4:	4798      	blx	r3
#else
      HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8006be6:	e0e0      	b.n	8006daa <HAL_SPI_IRQHandler+0x3b6>
    }

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 8006be8:	7cfb      	ldrb	r3, [r7, #19]
 8006bea:	2b05      	cmp	r3, #5
 8006bec:	d105      	bne.n	8006bfa <HAL_SPI_IRQHandler+0x206>
    {
      hspi->TxRxCpltCallback(hspi);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006bf4:	6878      	ldr	r0, [r7, #4]
 8006bf6:	4798      	blx	r3
    else
    {
      /* End of the appropriate call */
    }

    return;
 8006bf8:	e0d4      	b.n	8006da4 <HAL_SPI_IRQHandler+0x3b0>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 8006bfa:	7cfb      	ldrb	r3, [r7, #19]
 8006bfc:	2b04      	cmp	r3, #4
 8006bfe:	d105      	bne.n	8006c0c <HAL_SPI_IRQHandler+0x218>
      hspi->RxCpltCallback(hspi);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006c06:	6878      	ldr	r0, [r7, #4]
 8006c08:	4798      	blx	r3
    return;
 8006c0a:	e0cb      	b.n	8006da4 <HAL_SPI_IRQHandler+0x3b0>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 8006c0c:	7cfb      	ldrb	r3, [r7, #19]
 8006c0e:	2b03      	cmp	r3, #3
 8006c10:	f040 80c8 	bne.w	8006da4 <HAL_SPI_IRQHandler+0x3b0>
      hspi->TxCpltCallback(hspi);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006c1a:	6878      	ldr	r0, [r7, #4]
 8006c1c:	4798      	blx	r3
    return;
 8006c1e:	e0c1      	b.n	8006da4 <HAL_SPI_IRQHandler+0x3b0>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 8006c20:	69bb      	ldr	r3, [r7, #24]
 8006c22:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	f000 80bf 	beq.w	8006daa <HAL_SPI_IRQHandler+0x3b6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 8006c2c:	69bb      	ldr	r3, [r7, #24]
 8006c2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d00f      	beq.n	8006c56 <HAL_SPI_IRQHandler+0x262>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006c3c:	f043 0204 	orr.w	r2, r3, #4
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	699a      	ldr	r2, [r3, #24]
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006c54:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 8006c56:	69bb      	ldr	r3, [r7, #24]
 8006c58:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d00f      	beq.n	8006c80 <HAL_SPI_IRQHandler+0x28c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006c66:	f043 0201 	orr.w	r2, r3, #1
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	699a      	ldr	r2, [r3, #24]
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006c7e:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 8006c80:	69bb      	ldr	r3, [r7, #24]
 8006c82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d00f      	beq.n	8006caa <HAL_SPI_IRQHandler+0x2b6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006c90:	f043 0208 	orr.w	r2, r3, #8
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	699a      	ldr	r2, [r3, #24]
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006ca8:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 8006caa:	69bb      	ldr	r3, [r7, #24]
 8006cac:	f003 0320 	and.w	r3, r3, #32
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d00f      	beq.n	8006cd4 <HAL_SPI_IRQHandler+0x2e0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006cba:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	699a      	ldr	r2, [r3, #24]
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f042 0220 	orr.w	r2, r2, #32
 8006cd2:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d064      	beq.n	8006da8 <HAL_SPI_IRQHandler+0x3b4>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	681a      	ldr	r2, [r3, #0]
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f022 0201 	bic.w	r2, r2, #1
 8006cec:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	691b      	ldr	r3, [r3, #16]
 8006cf4:	687a      	ldr	r2, [r7, #4]
 8006cf6:	6812      	ldr	r2, [r2, #0]
 8006cf8:	f423 735a 	bic.w	r3, r3, #872	@ 0x368
 8006cfc:	f023 0303 	bic.w	r3, r3, #3
 8006d00:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 8006d02:	697b      	ldr	r3, [r7, #20]
 8006d04:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8006d08:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8006d0c:	d13e      	bne.n	8006d8c <HAL_SPI_IRQHandler+0x398>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	689a      	ldr	r2, [r3, #8]
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8006d1c:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d015      	beq.n	8006d54 <HAL_SPI_IRQHandler+0x360>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006d2e:	4a20      	ldr	r2, [pc, #128]	@ (8006db0 <HAL_SPI_IRQHandler+0x3bc>)
 8006d30:	66da      	str	r2, [r3, #108]	@ 0x6c
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006d38:	4618      	mov	r0, r3
 8006d3a:	f7fc f9ab 	bl	8003094 <HAL_DMA_Abort_IT>
 8006d3e:	4603      	mov	r3, r0
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d007      	beq.n	8006d54 <HAL_SPI_IRQHandler+0x360>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006d4a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d024      	beq.n	8006da8 <HAL_SPI_IRQHandler+0x3b4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006d64:	4a12      	ldr	r2, [pc, #72]	@ (8006db0 <HAL_SPI_IRQHandler+0x3bc>)
 8006d66:	66da      	str	r2, [r3, #108]	@ 0x6c
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006d6e:	4618      	mov	r0, r3
 8006d70:	f7fc f990 	bl	8003094 <HAL_DMA_Abort_IT>
 8006d74:	4603      	mov	r3, r0
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d016      	beq.n	8006da8 <HAL_SPI_IRQHandler+0x3b4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006d80:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8006d8a:	e00d      	b.n	8006da8 <HAL_SPI_IRQHandler+0x3b4>
        hspi->State = HAL_SPI_STATE_READY;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2201      	movs	r2, #1
 8006d90:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
        hspi->ErrorCallback(hspi);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006d9a:	6878      	ldr	r0, [r7, #4]
 8006d9c:	4798      	blx	r3
    return;
 8006d9e:	e003      	b.n	8006da8 <HAL_SPI_IRQHandler+0x3b4>
    return;
 8006da0:	bf00      	nop
 8006da2:	e002      	b.n	8006daa <HAL_SPI_IRQHandler+0x3b6>
    return;
 8006da4:	bf00      	nop
 8006da6:	e000      	b.n	8006daa <HAL_SPI_IRQHandler+0x3b6>
    return;
 8006da8:	bf00      	nop
  }
}
 8006daa:	3728      	adds	r7, #40	@ 0x28
 8006dac:	46bd      	mov	sp, r7
 8006dae:	bd80      	pop	{r7, pc}
 8006db0:	08006e69 	.word	0x08006e69

08006db4 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8006db4:	b480      	push	{r7}
 8006db6:	b083      	sub	sp, #12
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8006dbc:	bf00      	nop
 8006dbe:	370c      	adds	r7, #12
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc6:	4770      	bx	lr

08006dc8 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8006dc8:	b480      	push	{r7}
 8006dca:	b083      	sub	sp, #12
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 8006dd0:	bf00      	nop
 8006dd2:	370c      	adds	r7, #12
 8006dd4:	46bd      	mov	sp, r7
 8006dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dda:	4770      	bx	lr

08006ddc <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8006ddc:	b480      	push	{r7}
 8006dde:	b083      	sub	sp, #12
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8006de4:	bf00      	nop
 8006de6:	370c      	adds	r7, #12
 8006de8:	46bd      	mov	sp, r7
 8006dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dee:	4770      	bx	lr

08006df0 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8006df0:	b480      	push	{r7}
 8006df2:	b083      	sub	sp, #12
 8006df4:	af00      	add	r7, sp, #0
 8006df6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8006df8:	bf00      	nop
 8006dfa:	370c      	adds	r7, #12
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e02:	4770      	bx	lr

08006e04 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8006e04:	b480      	push	{r7}
 8006e06:	b083      	sub	sp, #12
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 8006e0c:	bf00      	nop
 8006e0e:	370c      	adds	r7, #12
 8006e10:	46bd      	mov	sp, r7
 8006e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e16:	4770      	bx	lr

08006e18 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8006e18:	b480      	push	{r7}
 8006e1a:	b083      	sub	sp, #12
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 8006e20:	bf00      	nop
 8006e22:	370c      	adds	r7, #12
 8006e24:	46bd      	mov	sp, r7
 8006e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2a:	4770      	bx	lr

08006e2c <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8006e2c:	b480      	push	{r7}
 8006e2e:	b083      	sub	sp, #12
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006e34:	bf00      	nop
 8006e36:	370c      	adds	r7, #12
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3e:	4770      	bx	lr

08006e40 <HAL_SPI_AbortCpltCallback>:
  * @brief  SPI Abort Complete callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_AbortCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8006e40:	b480      	push	{r7}
 8006e42:	b083      	sub	sp, #12
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_AbortCpltCallback can be implemented in the user file.
   */
}
 8006e48:	bf00      	nop
 8006e4a:	370c      	adds	r7, #12
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e52:	4770      	bx	lr

08006e54 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 8006e54:	b480      	push	{r7}
 8006e56:	b083      	sub	sp, #12
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 8006e5c:	bf00      	nop
 8006e5e:	370c      	adds	r7, #12
 8006e60:	46bd      	mov	sp, r7
 8006e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e66:	4770      	bx	lr

08006e68 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b084      	sub	sp, #16
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006e74:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	2200      	movs	r2, #0
 8006e7a:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
  hspi->TxXferCount = (uint16_t) 0UL;
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	2200      	movs	r2, #0
 8006e82:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	2201      	movs	r2, #1
 8006e8a:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8006e94:	68f8      	ldr	r0, [r7, #12]
 8006e96:	4798      	blx	r3
#else
  HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8006e98:	bf00      	nop
 8006e9a:	3710      	adds	r7, #16
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	bd80      	pop	{r7, pc}

08006ea0 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8006ea0:	b480      	push	{r7}
 8006ea2:	b085      	sub	sp, #20
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	695b      	ldr	r3, [r3, #20]
 8006eae:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	699a      	ldr	r2, [r3, #24]
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	f042 0208 	orr.w	r2, r2, #8
 8006ebe:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	699a      	ldr	r2, [r3, #24]
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	f042 0210 	orr.w	r2, r2, #16
 8006ece:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	681a      	ldr	r2, [r3, #0]
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f022 0201 	bic.w	r2, r2, #1
 8006ede:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	691b      	ldr	r3, [r3, #16]
 8006ee6:	687a      	ldr	r2, [r7, #4]
 8006ee8:	6812      	ldr	r2, [r2, #0]
 8006eea:	f423 735b 	bic.w	r3, r3, #876	@ 0x36c
 8006eee:	f023 0303 	bic.w	r3, r3, #3
 8006ef2:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	689a      	ldr	r2, [r3, #8]
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 8006f02:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8006f0a:	b2db      	uxtb	r3, r3
 8006f0c:	2b04      	cmp	r3, #4
 8006f0e:	d014      	beq.n	8006f3a <SPI_CloseTransfer+0x9a>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	f003 0320 	and.w	r3, r3, #32
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d00f      	beq.n	8006f3a <SPI_CloseTransfer+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006f20:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	699a      	ldr	r2, [r3, #24]
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	f042 0220 	orr.w	r2, r2, #32
 8006f38:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8006f40:	b2db      	uxtb	r3, r3
 8006f42:	2b03      	cmp	r3, #3
 8006f44:	d014      	beq.n	8006f70 <SPI_CloseTransfer+0xd0>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d00f      	beq.n	8006f70 <SPI_CloseTransfer+0xd0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006f56:	f043 0204 	orr.w	r2, r3, #4
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	699a      	ldr	r2, [r3, #24]
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006f6e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d00f      	beq.n	8006f9a <SPI_CloseTransfer+0xfa>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006f80:	f043 0201 	orr.w	r2, r3, #1
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	699a      	ldr	r2, [r3, #24]
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006f98:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d00f      	beq.n	8006fc4 <SPI_CloseTransfer+0x124>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006faa:	f043 0208 	orr.w	r2, r3, #8
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	699a      	ldr	r2, [r3, #24]
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006fc2:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->RxXferCount = (uint16_t)0UL;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2200      	movs	r2, #0
 8006fd0:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
}
 8006fd4:	bf00      	nop
 8006fd6:	3714      	adds	r7, #20
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fde:	4770      	bx	lr

08006fe0 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 8006fe0:	b480      	push	{r7}
 8006fe2:	b085      	sub	sp, #20
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006fec:	095b      	lsrs	r3, r3, #5
 8006fee:	3301      	adds	r3, #1
 8006ff0:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	68db      	ldr	r3, [r3, #12]
 8006ff6:	3301      	adds	r3, #1
 8006ff8:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8006ffa:	68bb      	ldr	r3, [r7, #8]
 8006ffc:	3307      	adds	r3, #7
 8006ffe:	08db      	lsrs	r3, r3, #3
 8007000:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8007002:	68bb      	ldr	r3, [r7, #8]
 8007004:	68fa      	ldr	r2, [r7, #12]
 8007006:	fb02 f303 	mul.w	r3, r2, r3
}
 800700a:	4618      	mov	r0, r3
 800700c:	3714      	adds	r7, #20
 800700e:	46bd      	mov	sp, r7
 8007010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007014:	4770      	bx	lr

08007016 <HAL_SPIEx_SetConfigAutonomousMode>:
  *                the configuration information of the autonomous mode for the specified SPIx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPIEx_SetConfigAutonomousMode(SPI_HandleTypeDef *hspi,
                                                    const SPI_AutonomousModeConfTypeDef *sConfig)
{
 8007016:	b480      	push	{r7}
 8007018:	b083      	sub	sp, #12
 800701a:	af00      	add	r7, sp, #0
 800701c:	6078      	str	r0, [r7, #4]
 800701e:	6039      	str	r1, [r7, #0]
  if (hspi->State == HAL_SPI_STATE_READY)
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	f893 3089 	ldrb.w	r3, [r3, #137]	@ 0x89
 8007026:	b2db      	uxtb	r3, r3
 8007028:	2b01      	cmp	r3, #1
 800702a:	d12e      	bne.n	800708a <HAL_SPIEx_SetConfigAutonomousMode+0x74>
  {
    /* Process Locked */
    __HAL_LOCK(hspi);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	f893 3088 	ldrb.w	r3, [r3, #136]	@ 0x88
 8007032:	2b01      	cmp	r3, #1
 8007034:	d101      	bne.n	800703a <HAL_SPIEx_SetConfigAutonomousMode+0x24>
 8007036:	2302      	movs	r3, #2
 8007038:	e028      	b.n	800708c <HAL_SPIEx_SetConfigAutonomousMode+0x76>
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	2201      	movs	r2, #1
 800703e:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    hspi->State = HAL_SPI_STATE_BUSY;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	2202      	movs	r2, #2
 8007046:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89
    assert_param(IS_SPI_AUTONOMOUS_INSTANCE(hspi->Instance));
    assert_param(IS_SPI_TRIG_SOURCE(hspi->Instance, sConfig->TriggerSelection));
    assert_param(IS_SPI_AUTO_MODE_TRG_POL(sConfig->TriggerPolarity));

    /* Disable the selected SPI peripheral to be able to configure AUTOCR */
    __HAL_SPI_DISABLE(hspi);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	681a      	ldr	r2, [r3, #0]
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f022 0201 	bic.w	r2, r2, #1
 8007058:	601a      	str	r2, [r3, #0]

    /* SPIx AUTOCR Configuration */
    WRITE_REG(hspi->Instance->AUTOCR, (sConfig->TriggerState | ((sConfig->TriggerSelection) & SPI_AUTOCR_TRIGSEL_Msk) |
 800705a:	683b      	ldr	r3, [r7, #0]
 800705c:	681a      	ldr	r2, [r3, #0]
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	685b      	ldr	r3, [r3, #4]
 8007062:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8007066:	ea42 0103 	orr.w	r1, r2, r3
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	689a      	ldr	r2, [r3, #8]
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	430a      	orrs	r2, r1
 8007074:	61da      	str	r2, [r3, #28]
                                       sConfig->TriggerPolarity));

    hspi->State = HAL_SPI_STATE_READY;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	2201      	movs	r2, #1
 800707a:	f883 2089 	strb.w	r2, [r3, #137]	@ 0x89

    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2200      	movs	r2, #0
 8007082:	f883 2088 	strb.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8007086:	2300      	movs	r3, #0
 8007088:	e000      	b.n	800708c <HAL_SPIEx_SetConfigAutonomousMode+0x76>
  }
  else
  {
    return HAL_ERROR;
 800708a:	2301      	movs	r3, #1
  }
}
 800708c:	4618      	mov	r0, r3
 800708e:	370c      	adds	r7, #12
 8007090:	46bd      	mov	sp, r7
 8007092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007096:	4770      	bx	lr

08007098 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007098:	b580      	push	{r7, lr}
 800709a:	b082      	sub	sp, #8
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d101      	bne.n	80070aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80070a6:	2301      	movs	r3, #1
 80070a8:	e049      	b.n	800713e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80070b0:	b2db      	uxtb	r3, r3
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d106      	bne.n	80070c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	2200      	movs	r2, #0
 80070ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80070be:	6878      	ldr	r0, [r7, #4]
 80070c0:	f000 f841 	bl	8007146 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	2202      	movs	r2, #2
 80070c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681a      	ldr	r2, [r3, #0]
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	3304      	adds	r3, #4
 80070d4:	4619      	mov	r1, r3
 80070d6:	4610      	mov	r0, r2
 80070d8:	f000 fa58 	bl	800758c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2201      	movs	r2, #1
 80070e0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	2201      	movs	r2, #1
 80070e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	2201      	movs	r2, #1
 80070f0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2201      	movs	r2, #1
 80070f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2201      	movs	r2, #1
 8007100:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	2201      	movs	r2, #1
 8007108:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2201      	movs	r2, #1
 8007110:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2201      	movs	r2, #1
 8007118:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2201      	movs	r2, #1
 8007120:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2201      	movs	r2, #1
 8007128:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2201      	movs	r2, #1
 8007130:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	2201      	movs	r2, #1
 8007138:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800713c:	2300      	movs	r3, #0
}
 800713e:	4618      	mov	r0, r3
 8007140:	3708      	adds	r7, #8
 8007142:	46bd      	mov	sp, r7
 8007144:	bd80      	pop	{r7, pc}

08007146 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8007146:	b480      	push	{r7}
 8007148:	b083      	sub	sp, #12
 800714a:	af00      	add	r7, sp, #0
 800714c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800714e:	bf00      	nop
 8007150:	370c      	adds	r7, #12
 8007152:	46bd      	mov	sp, r7
 8007154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007158:	4770      	bx	lr
	...

0800715c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800715c:	b480      	push	{r7}
 800715e:	b085      	sub	sp, #20
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800716a:	b2db      	uxtb	r3, r3
 800716c:	2b01      	cmp	r3, #1
 800716e:	d001      	beq.n	8007174 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007170:	2301      	movs	r3, #1
 8007172:	e072      	b.n	800725a <HAL_TIM_Base_Start_IT+0xfe>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2202      	movs	r2, #2
 8007178:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	68da      	ldr	r2, [r3, #12]
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f042 0201 	orr.w	r2, r2, #1
 800718a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	4a35      	ldr	r2, [pc, #212]	@ (8007268 <HAL_TIM_Base_Start_IT+0x10c>)
 8007192:	4293      	cmp	r3, r2
 8007194:	d040      	beq.n	8007218 <HAL_TIM_Base_Start_IT+0xbc>
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	4a34      	ldr	r2, [pc, #208]	@ (800726c <HAL_TIM_Base_Start_IT+0x110>)
 800719c:	4293      	cmp	r3, r2
 800719e:	d03b      	beq.n	8007218 <HAL_TIM_Base_Start_IT+0xbc>
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80071a8:	d036      	beq.n	8007218 <HAL_TIM_Base_Start_IT+0xbc>
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80071b2:	d031      	beq.n	8007218 <HAL_TIM_Base_Start_IT+0xbc>
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	4a2d      	ldr	r2, [pc, #180]	@ (8007270 <HAL_TIM_Base_Start_IT+0x114>)
 80071ba:	4293      	cmp	r3, r2
 80071bc:	d02c      	beq.n	8007218 <HAL_TIM_Base_Start_IT+0xbc>
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	4a2c      	ldr	r2, [pc, #176]	@ (8007274 <HAL_TIM_Base_Start_IT+0x118>)
 80071c4:	4293      	cmp	r3, r2
 80071c6:	d027      	beq.n	8007218 <HAL_TIM_Base_Start_IT+0xbc>
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	4a2a      	ldr	r2, [pc, #168]	@ (8007278 <HAL_TIM_Base_Start_IT+0x11c>)
 80071ce:	4293      	cmp	r3, r2
 80071d0:	d022      	beq.n	8007218 <HAL_TIM_Base_Start_IT+0xbc>
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	4a29      	ldr	r2, [pc, #164]	@ (800727c <HAL_TIM_Base_Start_IT+0x120>)
 80071d8:	4293      	cmp	r3, r2
 80071da:	d01d      	beq.n	8007218 <HAL_TIM_Base_Start_IT+0xbc>
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	4a27      	ldr	r2, [pc, #156]	@ (8007280 <HAL_TIM_Base_Start_IT+0x124>)
 80071e2:	4293      	cmp	r3, r2
 80071e4:	d018      	beq.n	8007218 <HAL_TIM_Base_Start_IT+0xbc>
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	4a26      	ldr	r2, [pc, #152]	@ (8007284 <HAL_TIM_Base_Start_IT+0x128>)
 80071ec:	4293      	cmp	r3, r2
 80071ee:	d013      	beq.n	8007218 <HAL_TIM_Base_Start_IT+0xbc>
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	4a24      	ldr	r2, [pc, #144]	@ (8007288 <HAL_TIM_Base_Start_IT+0x12c>)
 80071f6:	4293      	cmp	r3, r2
 80071f8:	d00e      	beq.n	8007218 <HAL_TIM_Base_Start_IT+0xbc>
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	4a23      	ldr	r2, [pc, #140]	@ (800728c <HAL_TIM_Base_Start_IT+0x130>)
 8007200:	4293      	cmp	r3, r2
 8007202:	d009      	beq.n	8007218 <HAL_TIM_Base_Start_IT+0xbc>
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	4a21      	ldr	r2, [pc, #132]	@ (8007290 <HAL_TIM_Base_Start_IT+0x134>)
 800720a:	4293      	cmp	r3, r2
 800720c:	d004      	beq.n	8007218 <HAL_TIM_Base_Start_IT+0xbc>
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	4a20      	ldr	r2, [pc, #128]	@ (8007294 <HAL_TIM_Base_Start_IT+0x138>)
 8007214:	4293      	cmp	r3, r2
 8007216:	d115      	bne.n	8007244 <HAL_TIM_Base_Start_IT+0xe8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	689a      	ldr	r2, [r3, #8]
 800721e:	4b1e      	ldr	r3, [pc, #120]	@ (8007298 <HAL_TIM_Base_Start_IT+0x13c>)
 8007220:	4013      	ands	r3, r2
 8007222:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	2b06      	cmp	r3, #6
 8007228:	d015      	beq.n	8007256 <HAL_TIM_Base_Start_IT+0xfa>
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007230:	d011      	beq.n	8007256 <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	681a      	ldr	r2, [r3, #0]
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	f042 0201 	orr.w	r2, r2, #1
 8007240:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007242:	e008      	b.n	8007256 <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	681a      	ldr	r2, [r3, #0]
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	f042 0201 	orr.w	r2, r2, #1
 8007252:	601a      	str	r2, [r3, #0]
 8007254:	e000      	b.n	8007258 <HAL_TIM_Base_Start_IT+0xfc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007256:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007258:	2300      	movs	r3, #0
}
 800725a:	4618      	mov	r0, r3
 800725c:	3714      	adds	r7, #20
 800725e:	46bd      	mov	sp, r7
 8007260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007264:	4770      	bx	lr
 8007266:	bf00      	nop
 8007268:	40012c00 	.word	0x40012c00
 800726c:	50012c00 	.word	0x50012c00
 8007270:	40000400 	.word	0x40000400
 8007274:	50000400 	.word	0x50000400
 8007278:	40000800 	.word	0x40000800
 800727c:	50000800 	.word	0x50000800
 8007280:	40000c00 	.word	0x40000c00
 8007284:	50000c00 	.word	0x50000c00
 8007288:	40013400 	.word	0x40013400
 800728c:	50013400 	.word	0x50013400
 8007290:	40014000 	.word	0x40014000
 8007294:	50014000 	.word	0x50014000
 8007298:	00010007 	.word	0x00010007

0800729c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800729c:	b580      	push	{r7, lr}
 800729e:	b084      	sub	sp, #16
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	68db      	ldr	r3, [r3, #12]
 80072aa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	691b      	ldr	r3, [r3, #16]
 80072b2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80072b4:	68bb      	ldr	r3, [r7, #8]
 80072b6:	f003 0302 	and.w	r3, r3, #2
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d020      	beq.n	8007300 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	f003 0302 	and.w	r3, r3, #2
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d01b      	beq.n	8007300 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	f06f 0202 	mvn.w	r2, #2
 80072d0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	2201      	movs	r2, #1
 80072d6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	699b      	ldr	r3, [r3, #24]
 80072de:	f003 0303 	and.w	r3, r3, #3
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d003      	beq.n	80072ee <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80072e6:	6878      	ldr	r0, [r7, #4]
 80072e8:	f000 f931 	bl	800754e <HAL_TIM_IC_CaptureCallback>
 80072ec:	e005      	b.n	80072fa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80072ee:	6878      	ldr	r0, [r7, #4]
 80072f0:	f000 f923 	bl	800753a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80072f4:	6878      	ldr	r0, [r7, #4]
 80072f6:	f000 f934 	bl	8007562 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	2200      	movs	r2, #0
 80072fe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007300:	68bb      	ldr	r3, [r7, #8]
 8007302:	f003 0304 	and.w	r3, r3, #4
 8007306:	2b00      	cmp	r3, #0
 8007308:	d020      	beq.n	800734c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	f003 0304 	and.w	r3, r3, #4
 8007310:	2b00      	cmp	r3, #0
 8007312:	d01b      	beq.n	800734c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f06f 0204 	mvn.w	r2, #4
 800731c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	2202      	movs	r2, #2
 8007322:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	699b      	ldr	r3, [r3, #24]
 800732a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800732e:	2b00      	cmp	r3, #0
 8007330:	d003      	beq.n	800733a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007332:	6878      	ldr	r0, [r7, #4]
 8007334:	f000 f90b 	bl	800754e <HAL_TIM_IC_CaptureCallback>
 8007338:	e005      	b.n	8007346 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800733a:	6878      	ldr	r0, [r7, #4]
 800733c:	f000 f8fd 	bl	800753a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007340:	6878      	ldr	r0, [r7, #4]
 8007342:	f000 f90e 	bl	8007562 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	2200      	movs	r2, #0
 800734a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800734c:	68bb      	ldr	r3, [r7, #8]
 800734e:	f003 0308 	and.w	r3, r3, #8
 8007352:	2b00      	cmp	r3, #0
 8007354:	d020      	beq.n	8007398 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	f003 0308 	and.w	r3, r3, #8
 800735c:	2b00      	cmp	r3, #0
 800735e:	d01b      	beq.n	8007398 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	f06f 0208 	mvn.w	r2, #8
 8007368:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2204      	movs	r2, #4
 800736e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	69db      	ldr	r3, [r3, #28]
 8007376:	f003 0303 	and.w	r3, r3, #3
 800737a:	2b00      	cmp	r3, #0
 800737c:	d003      	beq.n	8007386 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800737e:	6878      	ldr	r0, [r7, #4]
 8007380:	f000 f8e5 	bl	800754e <HAL_TIM_IC_CaptureCallback>
 8007384:	e005      	b.n	8007392 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007386:	6878      	ldr	r0, [r7, #4]
 8007388:	f000 f8d7 	bl	800753a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800738c:	6878      	ldr	r0, [r7, #4]
 800738e:	f000 f8e8 	bl	8007562 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	2200      	movs	r2, #0
 8007396:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007398:	68bb      	ldr	r3, [r7, #8]
 800739a:	f003 0310 	and.w	r3, r3, #16
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d020      	beq.n	80073e4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	f003 0310 	and.w	r3, r3, #16
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d01b      	beq.n	80073e4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	f06f 0210 	mvn.w	r2, #16
 80073b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	2208      	movs	r2, #8
 80073ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	69db      	ldr	r3, [r3, #28]
 80073c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d003      	beq.n	80073d2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80073ca:	6878      	ldr	r0, [r7, #4]
 80073cc:	f000 f8bf 	bl	800754e <HAL_TIM_IC_CaptureCallback>
 80073d0:	e005      	b.n	80073de <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80073d2:	6878      	ldr	r0, [r7, #4]
 80073d4:	f000 f8b1 	bl	800753a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80073d8:	6878      	ldr	r0, [r7, #4]
 80073da:	f000 f8c2 	bl	8007562 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	2200      	movs	r2, #0
 80073e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80073e4:	68bb      	ldr	r3, [r7, #8]
 80073e6:	f003 0301 	and.w	r3, r3, #1
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d00c      	beq.n	8007408 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	f003 0301 	and.w	r3, r3, #1
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d007      	beq.n	8007408 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	f06f 0201 	mvn.w	r2, #1
 8007400:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007402:	6878      	ldr	r0, [r7, #4]
 8007404:	f7f9 fe7a 	bl	80010fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007408:	68bb      	ldr	r3, [r7, #8]
 800740a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800740e:	2b00      	cmp	r3, #0
 8007410:	d104      	bne.n	800741c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8007412:	68bb      	ldr	r3, [r7, #8]
 8007414:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007418:	2b00      	cmp	r3, #0
 800741a:	d00c      	beq.n	8007436 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007422:	2b00      	cmp	r3, #0
 8007424:	d007      	beq.n	8007436 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800742e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007430:	6878      	ldr	r0, [r7, #4]
 8007432:	f000 f9bb 	bl	80077ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007436:	68bb      	ldr	r3, [r7, #8]
 8007438:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800743c:	2b00      	cmp	r3, #0
 800743e:	d00c      	beq.n	800745a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007446:	2b00      	cmp	r3, #0
 8007448:	d007      	beq.n	800745a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8007452:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007454:	6878      	ldr	r0, [r7, #4]
 8007456:	f000 f9b3 	bl	80077c0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800745a:	68bb      	ldr	r3, [r7, #8]
 800745c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007460:	2b00      	cmp	r3, #0
 8007462:	d00c      	beq.n	800747e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800746a:	2b00      	cmp	r3, #0
 800746c:	d007      	beq.n	800747e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007476:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007478:	6878      	ldr	r0, [r7, #4]
 800747a:	f000 f87c 	bl	8007576 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800747e:	68bb      	ldr	r3, [r7, #8]
 8007480:	f003 0320 	and.w	r3, r3, #32
 8007484:	2b00      	cmp	r3, #0
 8007486:	d00c      	beq.n	80074a2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	f003 0320 	and.w	r3, r3, #32
 800748e:	2b00      	cmp	r3, #0
 8007490:	d007      	beq.n	80074a2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	f06f 0220 	mvn.w	r2, #32
 800749a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800749c:	6878      	ldr	r0, [r7, #4]
 800749e:	f000 f97b 	bl	8007798 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80074a2:	68bb      	ldr	r3, [r7, #8]
 80074a4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d00c      	beq.n	80074c6 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d007      	beq.n	80074c6 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 80074be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80074c0:	6878      	ldr	r0, [r7, #4]
 80074c2:	f000 f987 	bl	80077d4 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80074c6:	68bb      	ldr	r3, [r7, #8]
 80074c8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d00c      	beq.n	80074ea <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d007      	beq.n	80074ea <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 80074e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80074e4:	6878      	ldr	r0, [r7, #4]
 80074e6:	f000 f97f 	bl	80077e8 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80074ea:	68bb      	ldr	r3, [r7, #8]
 80074ec:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d00c      	beq.n	800750e <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d007      	beq.n	800750e <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8007506:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8007508:	6878      	ldr	r0, [r7, #4]
 800750a:	f000 f977 	bl	80077fc <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800750e:	68bb      	ldr	r3, [r7, #8]
 8007510:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007514:	2b00      	cmp	r3, #0
 8007516:	d00c      	beq.n	8007532 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800751e:	2b00      	cmp	r3, #0
 8007520:	d007      	beq.n	8007532 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800752a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800752c:	6878      	ldr	r0, [r7, #4]
 800752e:	f000 f96f 	bl	8007810 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007532:	bf00      	nop
 8007534:	3710      	adds	r7, #16
 8007536:	46bd      	mov	sp, r7
 8007538:	bd80      	pop	{r7, pc}

0800753a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800753a:	b480      	push	{r7}
 800753c:	b083      	sub	sp, #12
 800753e:	af00      	add	r7, sp, #0
 8007540:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007542:	bf00      	nop
 8007544:	370c      	adds	r7, #12
 8007546:	46bd      	mov	sp, r7
 8007548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754c:	4770      	bx	lr

0800754e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800754e:	b480      	push	{r7}
 8007550:	b083      	sub	sp, #12
 8007552:	af00      	add	r7, sp, #0
 8007554:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007556:	bf00      	nop
 8007558:	370c      	adds	r7, #12
 800755a:	46bd      	mov	sp, r7
 800755c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007560:	4770      	bx	lr

08007562 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007562:	b480      	push	{r7}
 8007564:	b083      	sub	sp, #12
 8007566:	af00      	add	r7, sp, #0
 8007568:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800756a:	bf00      	nop
 800756c:	370c      	adds	r7, #12
 800756e:	46bd      	mov	sp, r7
 8007570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007574:	4770      	bx	lr

08007576 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007576:	b480      	push	{r7}
 8007578:	b083      	sub	sp, #12
 800757a:	af00      	add	r7, sp, #0
 800757c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800757e:	bf00      	nop
 8007580:	370c      	adds	r7, #12
 8007582:	46bd      	mov	sp, r7
 8007584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007588:	4770      	bx	lr
	...

0800758c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800758c:	b480      	push	{r7}
 800758e:	b085      	sub	sp, #20
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]
 8007594:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	4a6e      	ldr	r2, [pc, #440]	@ (8007758 <TIM_Base_SetConfig+0x1cc>)
 80075a0:	4293      	cmp	r3, r2
 80075a2:	d02b      	beq.n	80075fc <TIM_Base_SetConfig+0x70>
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	4a6d      	ldr	r2, [pc, #436]	@ (800775c <TIM_Base_SetConfig+0x1d0>)
 80075a8:	4293      	cmp	r3, r2
 80075aa:	d027      	beq.n	80075fc <TIM_Base_SetConfig+0x70>
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80075b2:	d023      	beq.n	80075fc <TIM_Base_SetConfig+0x70>
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80075ba:	d01f      	beq.n	80075fc <TIM_Base_SetConfig+0x70>
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	4a68      	ldr	r2, [pc, #416]	@ (8007760 <TIM_Base_SetConfig+0x1d4>)
 80075c0:	4293      	cmp	r3, r2
 80075c2:	d01b      	beq.n	80075fc <TIM_Base_SetConfig+0x70>
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	4a67      	ldr	r2, [pc, #412]	@ (8007764 <TIM_Base_SetConfig+0x1d8>)
 80075c8:	4293      	cmp	r3, r2
 80075ca:	d017      	beq.n	80075fc <TIM_Base_SetConfig+0x70>
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	4a66      	ldr	r2, [pc, #408]	@ (8007768 <TIM_Base_SetConfig+0x1dc>)
 80075d0:	4293      	cmp	r3, r2
 80075d2:	d013      	beq.n	80075fc <TIM_Base_SetConfig+0x70>
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	4a65      	ldr	r2, [pc, #404]	@ (800776c <TIM_Base_SetConfig+0x1e0>)
 80075d8:	4293      	cmp	r3, r2
 80075da:	d00f      	beq.n	80075fc <TIM_Base_SetConfig+0x70>
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	4a64      	ldr	r2, [pc, #400]	@ (8007770 <TIM_Base_SetConfig+0x1e4>)
 80075e0:	4293      	cmp	r3, r2
 80075e2:	d00b      	beq.n	80075fc <TIM_Base_SetConfig+0x70>
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	4a63      	ldr	r2, [pc, #396]	@ (8007774 <TIM_Base_SetConfig+0x1e8>)
 80075e8:	4293      	cmp	r3, r2
 80075ea:	d007      	beq.n	80075fc <TIM_Base_SetConfig+0x70>
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	4a62      	ldr	r2, [pc, #392]	@ (8007778 <TIM_Base_SetConfig+0x1ec>)
 80075f0:	4293      	cmp	r3, r2
 80075f2:	d003      	beq.n	80075fc <TIM_Base_SetConfig+0x70>
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	4a61      	ldr	r2, [pc, #388]	@ (800777c <TIM_Base_SetConfig+0x1f0>)
 80075f8:	4293      	cmp	r3, r2
 80075fa:	d108      	bne.n	800760e <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007602:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007604:	683b      	ldr	r3, [r7, #0]
 8007606:	685b      	ldr	r3, [r3, #4]
 8007608:	68fa      	ldr	r2, [r7, #12]
 800760a:	4313      	orrs	r3, r2
 800760c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	4a51      	ldr	r2, [pc, #324]	@ (8007758 <TIM_Base_SetConfig+0x1cc>)
 8007612:	4293      	cmp	r3, r2
 8007614:	d043      	beq.n	800769e <TIM_Base_SetConfig+0x112>
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	4a50      	ldr	r2, [pc, #320]	@ (800775c <TIM_Base_SetConfig+0x1d0>)
 800761a:	4293      	cmp	r3, r2
 800761c:	d03f      	beq.n	800769e <TIM_Base_SetConfig+0x112>
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007624:	d03b      	beq.n	800769e <TIM_Base_SetConfig+0x112>
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800762c:	d037      	beq.n	800769e <TIM_Base_SetConfig+0x112>
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	4a4b      	ldr	r2, [pc, #300]	@ (8007760 <TIM_Base_SetConfig+0x1d4>)
 8007632:	4293      	cmp	r3, r2
 8007634:	d033      	beq.n	800769e <TIM_Base_SetConfig+0x112>
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	4a4a      	ldr	r2, [pc, #296]	@ (8007764 <TIM_Base_SetConfig+0x1d8>)
 800763a:	4293      	cmp	r3, r2
 800763c:	d02f      	beq.n	800769e <TIM_Base_SetConfig+0x112>
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	4a49      	ldr	r2, [pc, #292]	@ (8007768 <TIM_Base_SetConfig+0x1dc>)
 8007642:	4293      	cmp	r3, r2
 8007644:	d02b      	beq.n	800769e <TIM_Base_SetConfig+0x112>
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	4a48      	ldr	r2, [pc, #288]	@ (800776c <TIM_Base_SetConfig+0x1e0>)
 800764a:	4293      	cmp	r3, r2
 800764c:	d027      	beq.n	800769e <TIM_Base_SetConfig+0x112>
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	4a47      	ldr	r2, [pc, #284]	@ (8007770 <TIM_Base_SetConfig+0x1e4>)
 8007652:	4293      	cmp	r3, r2
 8007654:	d023      	beq.n	800769e <TIM_Base_SetConfig+0x112>
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	4a46      	ldr	r2, [pc, #280]	@ (8007774 <TIM_Base_SetConfig+0x1e8>)
 800765a:	4293      	cmp	r3, r2
 800765c:	d01f      	beq.n	800769e <TIM_Base_SetConfig+0x112>
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	4a45      	ldr	r2, [pc, #276]	@ (8007778 <TIM_Base_SetConfig+0x1ec>)
 8007662:	4293      	cmp	r3, r2
 8007664:	d01b      	beq.n	800769e <TIM_Base_SetConfig+0x112>
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	4a44      	ldr	r2, [pc, #272]	@ (800777c <TIM_Base_SetConfig+0x1f0>)
 800766a:	4293      	cmp	r3, r2
 800766c:	d017      	beq.n	800769e <TIM_Base_SetConfig+0x112>
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	4a43      	ldr	r2, [pc, #268]	@ (8007780 <TIM_Base_SetConfig+0x1f4>)
 8007672:	4293      	cmp	r3, r2
 8007674:	d013      	beq.n	800769e <TIM_Base_SetConfig+0x112>
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	4a42      	ldr	r2, [pc, #264]	@ (8007784 <TIM_Base_SetConfig+0x1f8>)
 800767a:	4293      	cmp	r3, r2
 800767c:	d00f      	beq.n	800769e <TIM_Base_SetConfig+0x112>
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	4a41      	ldr	r2, [pc, #260]	@ (8007788 <TIM_Base_SetConfig+0x1fc>)
 8007682:	4293      	cmp	r3, r2
 8007684:	d00b      	beq.n	800769e <TIM_Base_SetConfig+0x112>
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	4a40      	ldr	r2, [pc, #256]	@ (800778c <TIM_Base_SetConfig+0x200>)
 800768a:	4293      	cmp	r3, r2
 800768c:	d007      	beq.n	800769e <TIM_Base_SetConfig+0x112>
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	4a3f      	ldr	r2, [pc, #252]	@ (8007790 <TIM_Base_SetConfig+0x204>)
 8007692:	4293      	cmp	r3, r2
 8007694:	d003      	beq.n	800769e <TIM_Base_SetConfig+0x112>
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	4a3e      	ldr	r2, [pc, #248]	@ (8007794 <TIM_Base_SetConfig+0x208>)
 800769a:	4293      	cmp	r3, r2
 800769c:	d108      	bne.n	80076b0 <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80076a4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80076a6:	683b      	ldr	r3, [r7, #0]
 80076a8:	68db      	ldr	r3, [r3, #12]
 80076aa:	68fa      	ldr	r2, [r7, #12]
 80076ac:	4313      	orrs	r3, r2
 80076ae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80076b6:	683b      	ldr	r3, [r7, #0]
 80076b8:	695b      	ldr	r3, [r3, #20]
 80076ba:	4313      	orrs	r3, r2
 80076bc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	68fa      	ldr	r2, [r7, #12]
 80076c2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	689a      	ldr	r2, [r3, #8]
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80076cc:	683b      	ldr	r3, [r7, #0]
 80076ce:	681a      	ldr	r2, [r3, #0]
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	4a20      	ldr	r2, [pc, #128]	@ (8007758 <TIM_Base_SetConfig+0x1cc>)
 80076d8:	4293      	cmp	r3, r2
 80076da:	d023      	beq.n	8007724 <TIM_Base_SetConfig+0x198>
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	4a1f      	ldr	r2, [pc, #124]	@ (800775c <TIM_Base_SetConfig+0x1d0>)
 80076e0:	4293      	cmp	r3, r2
 80076e2:	d01f      	beq.n	8007724 <TIM_Base_SetConfig+0x198>
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	4a24      	ldr	r2, [pc, #144]	@ (8007778 <TIM_Base_SetConfig+0x1ec>)
 80076e8:	4293      	cmp	r3, r2
 80076ea:	d01b      	beq.n	8007724 <TIM_Base_SetConfig+0x198>
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	4a23      	ldr	r2, [pc, #140]	@ (800777c <TIM_Base_SetConfig+0x1f0>)
 80076f0:	4293      	cmp	r3, r2
 80076f2:	d017      	beq.n	8007724 <TIM_Base_SetConfig+0x198>
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	4a22      	ldr	r2, [pc, #136]	@ (8007780 <TIM_Base_SetConfig+0x1f4>)
 80076f8:	4293      	cmp	r3, r2
 80076fa:	d013      	beq.n	8007724 <TIM_Base_SetConfig+0x198>
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	4a21      	ldr	r2, [pc, #132]	@ (8007784 <TIM_Base_SetConfig+0x1f8>)
 8007700:	4293      	cmp	r3, r2
 8007702:	d00f      	beq.n	8007724 <TIM_Base_SetConfig+0x198>
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	4a20      	ldr	r2, [pc, #128]	@ (8007788 <TIM_Base_SetConfig+0x1fc>)
 8007708:	4293      	cmp	r3, r2
 800770a:	d00b      	beq.n	8007724 <TIM_Base_SetConfig+0x198>
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	4a1f      	ldr	r2, [pc, #124]	@ (800778c <TIM_Base_SetConfig+0x200>)
 8007710:	4293      	cmp	r3, r2
 8007712:	d007      	beq.n	8007724 <TIM_Base_SetConfig+0x198>
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	4a1e      	ldr	r2, [pc, #120]	@ (8007790 <TIM_Base_SetConfig+0x204>)
 8007718:	4293      	cmp	r3, r2
 800771a:	d003      	beq.n	8007724 <TIM_Base_SetConfig+0x198>
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	4a1d      	ldr	r2, [pc, #116]	@ (8007794 <TIM_Base_SetConfig+0x208>)
 8007720:	4293      	cmp	r3, r2
 8007722:	d103      	bne.n	800772c <TIM_Base_SetConfig+0x1a0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007724:	683b      	ldr	r3, [r7, #0]
 8007726:	691a      	ldr	r2, [r3, #16]
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2201      	movs	r2, #1
 8007730:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	691b      	ldr	r3, [r3, #16]
 8007736:	f003 0301 	and.w	r3, r3, #1
 800773a:	2b01      	cmp	r3, #1
 800773c:	d105      	bne.n	800774a <TIM_Base_SetConfig+0x1be>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	691b      	ldr	r3, [r3, #16]
 8007742:	f023 0201 	bic.w	r2, r3, #1
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	611a      	str	r2, [r3, #16]
  }
}
 800774a:	bf00      	nop
 800774c:	3714      	adds	r7, #20
 800774e:	46bd      	mov	sp, r7
 8007750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007754:	4770      	bx	lr
 8007756:	bf00      	nop
 8007758:	40012c00 	.word	0x40012c00
 800775c:	50012c00 	.word	0x50012c00
 8007760:	40000400 	.word	0x40000400
 8007764:	50000400 	.word	0x50000400
 8007768:	40000800 	.word	0x40000800
 800776c:	50000800 	.word	0x50000800
 8007770:	40000c00 	.word	0x40000c00
 8007774:	50000c00 	.word	0x50000c00
 8007778:	40013400 	.word	0x40013400
 800777c:	50013400 	.word	0x50013400
 8007780:	40014000 	.word	0x40014000
 8007784:	50014000 	.word	0x50014000
 8007788:	40014400 	.word	0x40014400
 800778c:	50014400 	.word	0x50014400
 8007790:	40014800 	.word	0x40014800
 8007794:	50014800 	.word	0x50014800

08007798 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007798:	b480      	push	{r7}
 800779a:	b083      	sub	sp, #12
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80077a0:	bf00      	nop
 80077a2:	370c      	adds	r7, #12
 80077a4:	46bd      	mov	sp, r7
 80077a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077aa:	4770      	bx	lr

080077ac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80077ac:	b480      	push	{r7}
 80077ae:	b083      	sub	sp, #12
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80077b4:	bf00      	nop
 80077b6:	370c      	adds	r7, #12
 80077b8:	46bd      	mov	sp, r7
 80077ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077be:	4770      	bx	lr

080077c0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80077c0:	b480      	push	{r7}
 80077c2:	b083      	sub	sp, #12
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80077c8:	bf00      	nop
 80077ca:	370c      	adds	r7, #12
 80077cc:	46bd      	mov	sp, r7
 80077ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d2:	4770      	bx	lr

080077d4 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80077d4:	b480      	push	{r7}
 80077d6:	b083      	sub	sp, #12
 80077d8:	af00      	add	r7, sp, #0
 80077da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80077dc:	bf00      	nop
 80077de:	370c      	adds	r7, #12
 80077e0:	46bd      	mov	sp, r7
 80077e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e6:	4770      	bx	lr

080077e8 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80077e8:	b480      	push	{r7}
 80077ea:	b083      	sub	sp, #12
 80077ec:	af00      	add	r7, sp, #0
 80077ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80077f0:	bf00      	nop
 80077f2:	370c      	adds	r7, #12
 80077f4:	46bd      	mov	sp, r7
 80077f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fa:	4770      	bx	lr

080077fc <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80077fc:	b480      	push	{r7}
 80077fe:	b083      	sub	sp, #12
 8007800:	af00      	add	r7, sp, #0
 8007802:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8007804:	bf00      	nop
 8007806:	370c      	adds	r7, #12
 8007808:	46bd      	mov	sp, r7
 800780a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780e:	4770      	bx	lr

08007810 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8007810:	b480      	push	{r7}
 8007812:	b083      	sub	sp, #12
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8007818:	bf00      	nop
 800781a:	370c      	adds	r7, #12
 800781c:	46bd      	mov	sp, r7
 800781e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007822:	4770      	bx	lr

08007824 <LL_EXTI_EnableIT_0_31>:
{
 8007824:	b480      	push	{r7}
 8007826:	b083      	sub	sp, #12
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 800782c:	4b06      	ldr	r3, [pc, #24]	@ (8007848 <LL_EXTI_EnableIT_0_31+0x24>)
 800782e:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8007832:	4905      	ldr	r1, [pc, #20]	@ (8007848 <LL_EXTI_EnableIT_0_31+0x24>)
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	4313      	orrs	r3, r2
 8007838:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 800783c:	bf00      	nop
 800783e:	370c      	adds	r7, #12
 8007840:	46bd      	mov	sp, r7
 8007842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007846:	4770      	bx	lr
 8007848:	46022000 	.word	0x46022000

0800784c <LL_EXTI_DisableIT_0_31>:
{
 800784c:	b480      	push	{r7}
 800784e:	b083      	sub	sp, #12
 8007850:	af00      	add	r7, sp, #0
 8007852:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8007854:	4b07      	ldr	r3, [pc, #28]	@ (8007874 <LL_EXTI_DisableIT_0_31+0x28>)
 8007856:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	43db      	mvns	r3, r3
 800785e:	4905      	ldr	r1, [pc, #20]	@ (8007874 <LL_EXTI_DisableIT_0_31+0x28>)
 8007860:	4013      	ands	r3, r2
 8007862:	f8c1 3080 	str.w	r3, [r1, #128]	@ 0x80
}
 8007866:	bf00      	nop
 8007868:	370c      	adds	r7, #12
 800786a:	46bd      	mov	sp, r7
 800786c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007870:	4770      	bx	lr
 8007872:	bf00      	nop
 8007874:	46022000 	.word	0x46022000

08007878 <LL_EXTI_EnableEvent_0_31>:
{
 8007878:	b480      	push	{r7}
 800787a:	b083      	sub	sp, #12
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8007880:	4b06      	ldr	r3, [pc, #24]	@ (800789c <LL_EXTI_EnableEvent_0_31+0x24>)
 8007882:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 8007886:	4905      	ldr	r1, [pc, #20]	@ (800789c <LL_EXTI_EnableEvent_0_31+0x24>)
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	4313      	orrs	r3, r2
 800788c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
}
 8007890:	bf00      	nop
 8007892:	370c      	adds	r7, #12
 8007894:	46bd      	mov	sp, r7
 8007896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789a:	4770      	bx	lr
 800789c:	46022000 	.word	0x46022000

080078a0 <LL_EXTI_DisableEvent_0_31>:
{
 80078a0:	b480      	push	{r7}
 80078a2:	b083      	sub	sp, #12
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 80078a8:	4b07      	ldr	r3, [pc, #28]	@ (80078c8 <LL_EXTI_DisableEvent_0_31+0x28>)
 80078aa:	f8d3 2084 	ldr.w	r2, [r3, #132]	@ 0x84
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	43db      	mvns	r3, r3
 80078b2:	4905      	ldr	r1, [pc, #20]	@ (80078c8 <LL_EXTI_DisableEvent_0_31+0x28>)
 80078b4:	4013      	ands	r3, r2
 80078b6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
}
 80078ba:	bf00      	nop
 80078bc:	370c      	adds	r7, #12
 80078be:	46bd      	mov	sp, r7
 80078c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c4:	4770      	bx	lr
 80078c6:	bf00      	nop
 80078c8:	46022000 	.word	0x46022000

080078cc <LL_EXTI_EnableRisingTrig_0_31>:
{
 80078cc:	b480      	push	{r7}
 80078ce:	b083      	sub	sp, #12
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80078d4:	4b05      	ldr	r3, [pc, #20]	@ (80078ec <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80078d6:	681a      	ldr	r2, [r3, #0]
 80078d8:	4904      	ldr	r1, [pc, #16]	@ (80078ec <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	4313      	orrs	r3, r2
 80078de:	600b      	str	r3, [r1, #0]
}
 80078e0:	bf00      	nop
 80078e2:	370c      	adds	r7, #12
 80078e4:	46bd      	mov	sp, r7
 80078e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ea:	4770      	bx	lr
 80078ec:	46022000 	.word	0x46022000

080078f0 <LL_EXTI_DisableRisingTrig_0_31>:
{
 80078f0:	b480      	push	{r7}
 80078f2:	b083      	sub	sp, #12
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 80078f8:	4b06      	ldr	r3, [pc, #24]	@ (8007914 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80078fa:	681a      	ldr	r2, [r3, #0]
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	43db      	mvns	r3, r3
 8007900:	4904      	ldr	r1, [pc, #16]	@ (8007914 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8007902:	4013      	ands	r3, r2
 8007904:	600b      	str	r3, [r1, #0]
}
 8007906:	bf00      	nop
 8007908:	370c      	adds	r7, #12
 800790a:	46bd      	mov	sp, r7
 800790c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007910:	4770      	bx	lr
 8007912:	bf00      	nop
 8007914:	46022000 	.word	0x46022000

08007918 <LL_EXTI_EnableFallingTrig_0_31>:
{
 8007918:	b480      	push	{r7}
 800791a:	b083      	sub	sp, #12
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8007920:	4b05      	ldr	r3, [pc, #20]	@ (8007938 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8007922:	685a      	ldr	r2, [r3, #4]
 8007924:	4904      	ldr	r1, [pc, #16]	@ (8007938 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	4313      	orrs	r3, r2
 800792a:	604b      	str	r3, [r1, #4]
}
 800792c:	bf00      	nop
 800792e:	370c      	adds	r7, #12
 8007930:	46bd      	mov	sp, r7
 8007932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007936:	4770      	bx	lr
 8007938:	46022000 	.word	0x46022000

0800793c <LL_EXTI_DisableFallingTrig_0_31>:
{
 800793c:	b480      	push	{r7}
 800793e:	b083      	sub	sp, #12
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8007944:	4b06      	ldr	r3, [pc, #24]	@ (8007960 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8007946:	685a      	ldr	r2, [r3, #4]
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	43db      	mvns	r3, r3
 800794c:	4904      	ldr	r1, [pc, #16]	@ (8007960 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800794e:	4013      	ands	r3, r2
 8007950:	604b      	str	r3, [r1, #4]
}
 8007952:	bf00      	nop
 8007954:	370c      	adds	r7, #12
 8007956:	46bd      	mov	sp, r7
 8007958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795c:	4770      	bx	lr
 800795e:	bf00      	nop
 8007960:	46022000 	.word	0x46022000

08007964 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: EXTI registers are initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8007964:	b580      	push	{r7, lr}
 8007966:	b084      	sub	sp, #16
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
  ErrorStatus status = SUCCESS;
 800796c:	2300      	movs	r3, #0
 800796e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_EXTI_LINE_0_31(EXTI_InitStruct->Line_0_31));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	791b      	ldrb	r3, [r3, #4]
 8007974:	2b00      	cmp	r3, #0
 8007976:	d065      	beq.n	8007a44 <LL_EXTI_Init+0xe0>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	2b00      	cmp	r3, #0
 800797e:	d06b      	beq.n	8007a58 <LL_EXTI_Init+0xf4>
    {
      switch (EXTI_InitStruct->Mode)
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	795b      	ldrb	r3, [r3, #5]
 8007984:	2b02      	cmp	r3, #2
 8007986:	d01c      	beq.n	80079c2 <LL_EXTI_Init+0x5e>
 8007988:	2b02      	cmp	r3, #2
 800798a:	dc25      	bgt.n	80079d8 <LL_EXTI_Init+0x74>
 800798c:	2b00      	cmp	r3, #0
 800798e:	d002      	beq.n	8007996 <LL_EXTI_Init+0x32>
 8007990:	2b01      	cmp	r3, #1
 8007992:	d00b      	beq.n	80079ac <LL_EXTI_Init+0x48>
 8007994:	e020      	b.n	80079d8 <LL_EXTI_Init+0x74>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	4618      	mov	r0, r3
 800799c:	f7ff ff80 	bl	80078a0 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	4618      	mov	r0, r3
 80079a6:	f7ff ff3d 	bl	8007824 <LL_EXTI_EnableIT_0_31>
          break;
 80079aa:	e018      	b.n	80079de <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	4618      	mov	r0, r3
 80079b2:	f7ff ff4b 	bl	800784c <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	4618      	mov	r0, r3
 80079bc:	f7ff ff5c 	bl	8007878 <LL_EXTI_EnableEvent_0_31>
          break;
 80079c0:	e00d      	b.n	80079de <LL_EXTI_Init+0x7a>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	4618      	mov	r0, r3
 80079c8:	f7ff ff2c 	bl	8007824 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	4618      	mov	r0, r3
 80079d2:	f7ff ff51 	bl	8007878 <LL_EXTI_EnableEvent_0_31>
          break;
 80079d6:	e002      	b.n	80079de <LL_EXTI_Init+0x7a>
        default:
          status = ERROR;
 80079d8:	2301      	movs	r3, #1
 80079da:	73fb      	strb	r3, [r7, #15]
          break;
 80079dc:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	799b      	ldrb	r3, [r3, #6]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d038      	beq.n	8007a58 <LL_EXTI_Init+0xf4>
      {
        switch (EXTI_InitStruct->Trigger)
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	799b      	ldrb	r3, [r3, #6]
 80079ea:	2b03      	cmp	r3, #3
 80079ec:	d01c      	beq.n	8007a28 <LL_EXTI_Init+0xc4>
 80079ee:	2b03      	cmp	r3, #3
 80079f0:	dc25      	bgt.n	8007a3e <LL_EXTI_Init+0xda>
 80079f2:	2b01      	cmp	r3, #1
 80079f4:	d002      	beq.n	80079fc <LL_EXTI_Init+0x98>
 80079f6:	2b02      	cmp	r3, #2
 80079f8:	d00b      	beq.n	8007a12 <LL_EXTI_Init+0xae>
 80079fa:	e020      	b.n	8007a3e <LL_EXTI_Init+0xda>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	4618      	mov	r0, r3
 8007a02:	f7ff ff9b 	bl	800793c <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	f7ff ff5e 	bl	80078cc <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8007a10:	e022      	b.n	8007a58 <LL_EXTI_Init+0xf4>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	4618      	mov	r0, r3
 8007a18:	f7ff ff6a 	bl	80078f0 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	4618      	mov	r0, r3
 8007a22:	f7ff ff79 	bl	8007918 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8007a26:	e017      	b.n	8007a58 <LL_EXTI_Init+0xf4>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	f7ff ff4d 	bl	80078cc <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	4618      	mov	r0, r3
 8007a38:	f7ff ff6e 	bl	8007918 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8007a3c:	e00c      	b.n	8007a58 <LL_EXTI_Init+0xf4>
          default:
            status = ERROR;
 8007a3e:	2301      	movs	r3, #1
 8007a40:	73fb      	strb	r3, [r7, #15]
            break;
 8007a42:	e009      	b.n	8007a58 <LL_EXTI_Init+0xf4>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	4618      	mov	r0, r3
 8007a4a:	f7ff feff 	bl	800784c <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	4618      	mov	r0, r3
 8007a54:	f7ff ff24 	bl	80078a0 <LL_EXTI_DisableEvent_0_31>
  }
  return status;
 8007a58:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	3710      	adds	r7, #16
 8007a5e:	46bd      	mov	sp, r7
 8007a60:	bd80      	pop	{r7, pc}

08007a62 <LL_GPIO_SetPinMode>:
{
 8007a62:	b480      	push	{r7}
 8007a64:	b08b      	sub	sp, #44	@ 0x2c
 8007a66:	af00      	add	r7, sp, #0
 8007a68:	60f8      	str	r0, [r7, #12]
 8007a6a:	60b9      	str	r1, [r7, #8]
 8007a6c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * GPIO_MODER_MODE1_Pos)),
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	681a      	ldr	r2, [r3, #0]
 8007a72:	68bb      	ldr	r3, [r7, #8]
 8007a74:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007a76:	697b      	ldr	r3, [r7, #20]
 8007a78:	fa93 f3a3 	rbit	r3, r3
 8007a7c:	613b      	str	r3, [r7, #16]
  return result;
 8007a7e:	693b      	ldr	r3, [r7, #16]
 8007a80:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8007a82:	69bb      	ldr	r3, [r7, #24]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d101      	bne.n	8007a8c <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8007a88:	2320      	movs	r3, #32
 8007a8a:	e003      	b.n	8007a94 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8007a8c:	69bb      	ldr	r3, [r7, #24]
 8007a8e:	fab3 f383 	clz	r3, r3
 8007a92:	b2db      	uxtb	r3, r3
 8007a94:	005b      	lsls	r3, r3, #1
 8007a96:	2103      	movs	r1, #3
 8007a98:	fa01 f303 	lsl.w	r3, r1, r3
 8007a9c:	43db      	mvns	r3, r3
 8007a9e:	401a      	ands	r2, r3
 8007aa0:	68bb      	ldr	r3, [r7, #8]
 8007aa2:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007aa4:	6a3b      	ldr	r3, [r7, #32]
 8007aa6:	fa93 f3a3 	rbit	r3, r3
 8007aaa:	61fb      	str	r3, [r7, #28]
  return result;
 8007aac:	69fb      	ldr	r3, [r7, #28]
 8007aae:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8007ab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d101      	bne.n	8007aba <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8007ab6:	2320      	movs	r3, #32
 8007ab8:	e003      	b.n	8007ac2 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8007aba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007abc:	fab3 f383 	clz	r3, r3
 8007ac0:	b2db      	uxtb	r3, r3
 8007ac2:	005b      	lsls	r3, r3, #1
 8007ac4:	6879      	ldr	r1, [r7, #4]
 8007ac6:	fa01 f303 	lsl.w	r3, r1, r3
 8007aca:	431a      	orrs	r2, r3
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	601a      	str	r2, [r3, #0]
}
 8007ad0:	bf00      	nop
 8007ad2:	372c      	adds	r7, #44	@ 0x2c
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ada:	4770      	bx	lr

08007adc <LL_GPIO_SetPinOutputType>:
{
 8007adc:	b480      	push	{r7}
 8007ade:	b085      	sub	sp, #20
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	60f8      	str	r0, [r7, #12]
 8007ae4:	60b9      	str	r1, [r7, #8]
 8007ae6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	685a      	ldr	r2, [r3, #4]
 8007aec:	68bb      	ldr	r3, [r7, #8]
 8007aee:	43db      	mvns	r3, r3
 8007af0:	401a      	ands	r2, r3
 8007af2:	68bb      	ldr	r3, [r7, #8]
 8007af4:	6879      	ldr	r1, [r7, #4]
 8007af6:	fb01 f303 	mul.w	r3, r1, r3
 8007afa:	431a      	orrs	r2, r3
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	605a      	str	r2, [r3, #4]
}
 8007b00:	bf00      	nop
 8007b02:	3714      	adds	r7, #20
 8007b04:	46bd      	mov	sp, r7
 8007b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0a:	4770      	bx	lr

08007b0c <LL_GPIO_SetPinSpeed>:
{
 8007b0c:	b480      	push	{r7}
 8007b0e:	b08b      	sub	sp, #44	@ 0x2c
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	60f8      	str	r0, [r7, #12]
 8007b14:	60b9      	str	r1, [r7, #8]
 8007b16:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * GPIO_OSPEEDR_OSPEED1_Pos)),
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	689a      	ldr	r2, [r3, #8]
 8007b1c:	68bb      	ldr	r3, [r7, #8]
 8007b1e:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007b20:	697b      	ldr	r3, [r7, #20]
 8007b22:	fa93 f3a3 	rbit	r3, r3
 8007b26:	613b      	str	r3, [r7, #16]
  return result;
 8007b28:	693b      	ldr	r3, [r7, #16]
 8007b2a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8007b2c:	69bb      	ldr	r3, [r7, #24]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d101      	bne.n	8007b36 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8007b32:	2320      	movs	r3, #32
 8007b34:	e003      	b.n	8007b3e <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8007b36:	69bb      	ldr	r3, [r7, #24]
 8007b38:	fab3 f383 	clz	r3, r3
 8007b3c:	b2db      	uxtb	r3, r3
 8007b3e:	005b      	lsls	r3, r3, #1
 8007b40:	2103      	movs	r1, #3
 8007b42:	fa01 f303 	lsl.w	r3, r1, r3
 8007b46:	43db      	mvns	r3, r3
 8007b48:	401a      	ands	r2, r3
 8007b4a:	68bb      	ldr	r3, [r7, #8]
 8007b4c:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007b4e:	6a3b      	ldr	r3, [r7, #32]
 8007b50:	fa93 f3a3 	rbit	r3, r3
 8007b54:	61fb      	str	r3, [r7, #28]
  return result;
 8007b56:	69fb      	ldr	r3, [r7, #28]
 8007b58:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8007b5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d101      	bne.n	8007b64 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8007b60:	2320      	movs	r3, #32
 8007b62:	e003      	b.n	8007b6c <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8007b64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b66:	fab3 f383 	clz	r3, r3
 8007b6a:	b2db      	uxtb	r3, r3
 8007b6c:	005b      	lsls	r3, r3, #1
 8007b6e:	6879      	ldr	r1, [r7, #4]
 8007b70:	fa01 f303 	lsl.w	r3, r1, r3
 8007b74:	431a      	orrs	r2, r3
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	609a      	str	r2, [r3, #8]
}
 8007b7a:	bf00      	nop
 8007b7c:	372c      	adds	r7, #44	@ 0x2c
 8007b7e:	46bd      	mov	sp, r7
 8007b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b84:	4770      	bx	lr

08007b86 <LL_GPIO_SetPinPull>:
{
 8007b86:	b480      	push	{r7}
 8007b88:	b08b      	sub	sp, #44	@ 0x2c
 8007b8a:	af00      	add	r7, sp, #0
 8007b8c:	60f8      	str	r0, [r7, #12]
 8007b8e:	60b9      	str	r1, [r7, #8]
 8007b90:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * GPIO_PUPDR_PUPD1_Pos)),
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	68da      	ldr	r2, [r3, #12]
 8007b96:	68bb      	ldr	r3, [r7, #8]
 8007b98:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007b9a:	697b      	ldr	r3, [r7, #20]
 8007b9c:	fa93 f3a3 	rbit	r3, r3
 8007ba0:	613b      	str	r3, [r7, #16]
  return result;
 8007ba2:	693b      	ldr	r3, [r7, #16]
 8007ba4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8007ba6:	69bb      	ldr	r3, [r7, #24]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d101      	bne.n	8007bb0 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8007bac:	2320      	movs	r3, #32
 8007bae:	e003      	b.n	8007bb8 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8007bb0:	69bb      	ldr	r3, [r7, #24]
 8007bb2:	fab3 f383 	clz	r3, r3
 8007bb6:	b2db      	uxtb	r3, r3
 8007bb8:	005b      	lsls	r3, r3, #1
 8007bba:	2103      	movs	r1, #3
 8007bbc:	fa01 f303 	lsl.w	r3, r1, r3
 8007bc0:	43db      	mvns	r3, r3
 8007bc2:	401a      	ands	r2, r3
 8007bc4:	68bb      	ldr	r3, [r7, #8]
 8007bc6:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007bc8:	6a3b      	ldr	r3, [r7, #32]
 8007bca:	fa93 f3a3 	rbit	r3, r3
 8007bce:	61fb      	str	r3, [r7, #28]
  return result;
 8007bd0:	69fb      	ldr	r3, [r7, #28]
 8007bd2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8007bd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d101      	bne.n	8007bde <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8007bda:	2320      	movs	r3, #32
 8007bdc:	e003      	b.n	8007be6 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8007bde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007be0:	fab3 f383 	clz	r3, r3
 8007be4:	b2db      	uxtb	r3, r3
 8007be6:	005b      	lsls	r3, r3, #1
 8007be8:	6879      	ldr	r1, [r7, #4]
 8007bea:	fa01 f303 	lsl.w	r3, r1, r3
 8007bee:	431a      	orrs	r2, r3
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	60da      	str	r2, [r3, #12]
}
 8007bf4:	bf00      	nop
 8007bf6:	372c      	adds	r7, #44	@ 0x2c
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfe:	4770      	bx	lr

08007c00 <LL_GPIO_SetAFPin_0_7>:
{
 8007c00:	b480      	push	{r7}
 8007c02:	b08b      	sub	sp, #44	@ 0x2c
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	60f8      	str	r0, [r7, #12]
 8007c08:	60b9      	str	r1, [r7, #8]
 8007c0a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * GPIO_AFRL_AFSEL1_Pos)),
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	6a1a      	ldr	r2, [r3, #32]
 8007c10:	68bb      	ldr	r3, [r7, #8]
 8007c12:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007c14:	697b      	ldr	r3, [r7, #20]
 8007c16:	fa93 f3a3 	rbit	r3, r3
 8007c1a:	613b      	str	r3, [r7, #16]
  return result;
 8007c1c:	693b      	ldr	r3, [r7, #16]
 8007c1e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8007c20:	69bb      	ldr	r3, [r7, #24]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d101      	bne.n	8007c2a <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8007c26:	2320      	movs	r3, #32
 8007c28:	e003      	b.n	8007c32 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8007c2a:	69bb      	ldr	r3, [r7, #24]
 8007c2c:	fab3 f383 	clz	r3, r3
 8007c30:	b2db      	uxtb	r3, r3
 8007c32:	009b      	lsls	r3, r3, #2
 8007c34:	210f      	movs	r1, #15
 8007c36:	fa01 f303 	lsl.w	r3, r1, r3
 8007c3a:	43db      	mvns	r3, r3
 8007c3c:	401a      	ands	r2, r3
 8007c3e:	68bb      	ldr	r3, [r7, #8]
 8007c40:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007c42:	6a3b      	ldr	r3, [r7, #32]
 8007c44:	fa93 f3a3 	rbit	r3, r3
 8007c48:	61fb      	str	r3, [r7, #28]
  return result;
 8007c4a:	69fb      	ldr	r3, [r7, #28]
 8007c4c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8007c4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d101      	bne.n	8007c58 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8007c54:	2320      	movs	r3, #32
 8007c56:	e003      	b.n	8007c60 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8007c58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c5a:	fab3 f383 	clz	r3, r3
 8007c5e:	b2db      	uxtb	r3, r3
 8007c60:	009b      	lsls	r3, r3, #2
 8007c62:	6879      	ldr	r1, [r7, #4]
 8007c64:	fa01 f303 	lsl.w	r3, r1, r3
 8007c68:	431a      	orrs	r2, r3
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	621a      	str	r2, [r3, #32]
}
 8007c6e:	bf00      	nop
 8007c70:	372c      	adds	r7, #44	@ 0x2c
 8007c72:	46bd      	mov	sp, r7
 8007c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c78:	4770      	bx	lr

08007c7a <LL_GPIO_SetAFPin_8_15>:
{
 8007c7a:	b480      	push	{r7}
 8007c7c:	b08b      	sub	sp, #44	@ 0x2c
 8007c7e:	af00      	add	r7, sp, #0
 8007c80:	60f8      	str	r0, [r7, #12]
 8007c82:	60b9      	str	r1, [r7, #8]
 8007c84:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * GPIO_AFRH_AFSEL9_Pos)),
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007c8a:	68bb      	ldr	r3, [r7, #8]
 8007c8c:	0a1b      	lsrs	r3, r3, #8
 8007c8e:	617b      	str	r3, [r7, #20]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007c90:	697b      	ldr	r3, [r7, #20]
 8007c92:	fa93 f3a3 	rbit	r3, r3
 8007c96:	613b      	str	r3, [r7, #16]
  return result;
 8007c98:	693b      	ldr	r3, [r7, #16]
 8007c9a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8007c9c:	69bb      	ldr	r3, [r7, #24]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d101      	bne.n	8007ca6 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8007ca2:	2320      	movs	r3, #32
 8007ca4:	e003      	b.n	8007cae <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8007ca6:	69bb      	ldr	r3, [r7, #24]
 8007ca8:	fab3 f383 	clz	r3, r3
 8007cac:	b2db      	uxtb	r3, r3
 8007cae:	009b      	lsls	r3, r3, #2
 8007cb0:	210f      	movs	r1, #15
 8007cb2:	fa01 f303 	lsl.w	r3, r1, r3
 8007cb6:	43db      	mvns	r3, r3
 8007cb8:	401a      	ands	r2, r3
 8007cba:	68bb      	ldr	r3, [r7, #8]
 8007cbc:	0a1b      	lsrs	r3, r3, #8
 8007cbe:	623b      	str	r3, [r7, #32]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007cc0:	6a3b      	ldr	r3, [r7, #32]
 8007cc2:	fa93 f3a3 	rbit	r3, r3
 8007cc6:	61fb      	str	r3, [r7, #28]
  return result;
 8007cc8:	69fb      	ldr	r3, [r7, #28]
 8007cca:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8007ccc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d101      	bne.n	8007cd6 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8007cd2:	2320      	movs	r3, #32
 8007cd4:	e003      	b.n	8007cde <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8007cd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cd8:	fab3 f383 	clz	r3, r3
 8007cdc:	b2db      	uxtb	r3, r3
 8007cde:	009b      	lsls	r3, r3, #2
 8007ce0:	6879      	ldr	r1, [r7, #4]
 8007ce2:	fa01 f303 	lsl.w	r3, r1, r3
 8007ce6:	431a      	orrs	r2, r3
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8007cec:	bf00      	nop
 8007cee:	372c      	adds	r7, #44	@ 0x2c
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf6:	4770      	bx	lr

08007cf8 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	b08a      	sub	sp, #40	@ 0x28
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6078      	str	r0, [r7, #4]
 8007d00:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8007d02:	683b      	ldr	r3, [r7, #0]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	61bb      	str	r3, [r7, #24]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007d08:	69bb      	ldr	r3, [r7, #24]
 8007d0a:	fa93 f3a3 	rbit	r3, r3
 8007d0e:	617b      	str	r3, [r7, #20]
  return result;
 8007d10:	697b      	ldr	r3, [r7, #20]
 8007d12:	61fb      	str	r3, [r7, #28]
  if (value == 0U)
 8007d14:	69fb      	ldr	r3, [r7, #28]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d101      	bne.n	8007d1e <LL_GPIO_Init+0x26>
    return 32U;
 8007d1a:	2320      	movs	r3, #32
 8007d1c:	e003      	b.n	8007d26 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8007d1e:	69fb      	ldr	r3, [r7, #28]
 8007d20:	fab3 f383 	clz	r3, r3
 8007d24:	b2db      	uxtb	r3, r3
 8007d26:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0U)
 8007d28:	e058      	b.n	8007ddc <LL_GPIO_Init+0xe4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (1UL << pinpos);
 8007d2a:	683b      	ldr	r3, [r7, #0]
 8007d2c:	681a      	ldr	r2, [r3, #0]
 8007d2e:	2101      	movs	r1, #1
 8007d30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d32:	fa01 f303 	lsl.w	r3, r1, r3
 8007d36:	4013      	ands	r3, r2
 8007d38:	623b      	str	r3, [r7, #32]

    if (currentpin != 0U)
 8007d3a:	6a3b      	ldr	r3, [r7, #32]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d04a      	beq.n	8007dd6 <LL_GPIO_Init+0xde>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8007d40:	683b      	ldr	r3, [r7, #0]
 8007d42:	685b      	ldr	r3, [r3, #4]
 8007d44:	2b01      	cmp	r3, #1
 8007d46:	d003      	beq.n	8007d50 <LL_GPIO_Init+0x58>
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	685b      	ldr	r3, [r3, #4]
 8007d4c:	2b02      	cmp	r3, #2
 8007d4e:	d10e      	bne.n	8007d6e <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8007d50:	683b      	ldr	r3, [r7, #0]
 8007d52:	689b      	ldr	r3, [r3, #8]
 8007d54:	461a      	mov	r2, r3
 8007d56:	6a39      	ldr	r1, [r7, #32]
 8007d58:	6878      	ldr	r0, [r7, #4]
 8007d5a:	f7ff fed7 	bl	8007b0c <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8007d5e:	683b      	ldr	r3, [r7, #0]
 8007d60:	6819      	ldr	r1, [r3, #0]
 8007d62:	683b      	ldr	r3, [r7, #0]
 8007d64:	68db      	ldr	r3, [r3, #12]
 8007d66:	461a      	mov	r2, r3
 8007d68:	6878      	ldr	r0, [r7, #4]
 8007d6a:	f7ff feb7 	bl	8007adc <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8007d6e:	683b      	ldr	r3, [r7, #0]
 8007d70:	691b      	ldr	r3, [r3, #16]
 8007d72:	461a      	mov	r2, r3
 8007d74:	6a39      	ldr	r1, [r7, #32]
 8007d76:	6878      	ldr	r0, [r7, #4]
 8007d78:	f7ff ff05 	bl	8007b86 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8007d7c:	683b      	ldr	r3, [r7, #0]
 8007d7e:	685b      	ldr	r3, [r3, #4]
 8007d80:	2b02      	cmp	r3, #2
 8007d82:	d121      	bne.n	8007dc8 <LL_GPIO_Init+0xd0>
 8007d84:	6a3b      	ldr	r3, [r7, #32]
 8007d86:	60fb      	str	r3, [r7, #12]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	fa93 f3a3 	rbit	r3, r3
 8007d8e:	60bb      	str	r3, [r7, #8]
  return result;
 8007d90:	68bb      	ldr	r3, [r7, #8]
 8007d92:	613b      	str	r3, [r7, #16]
  if (value == 0U)
 8007d94:	693b      	ldr	r3, [r7, #16]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d101      	bne.n	8007d9e <LL_GPIO_Init+0xa6>
    return 32U;
 8007d9a:	2320      	movs	r3, #32
 8007d9c:	e003      	b.n	8007da6 <LL_GPIO_Init+0xae>
  return __builtin_clz(value);
 8007d9e:	693b      	ldr	r3, [r7, #16]
 8007da0:	fab3 f383 	clz	r3, r3
 8007da4:	b2db      	uxtb	r3, r3
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 8U)
 8007da6:	2b07      	cmp	r3, #7
 8007da8:	d807      	bhi.n	8007dba <LL_GPIO_Init+0xc2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8007daa:	683b      	ldr	r3, [r7, #0]
 8007dac:	695b      	ldr	r3, [r3, #20]
 8007dae:	461a      	mov	r2, r3
 8007db0:	6a39      	ldr	r1, [r7, #32]
 8007db2:	6878      	ldr	r0, [r7, #4]
 8007db4:	f7ff ff24 	bl	8007c00 <LL_GPIO_SetAFPin_0_7>
 8007db8:	e006      	b.n	8007dc8 <LL_GPIO_Init+0xd0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8007dba:	683b      	ldr	r3, [r7, #0]
 8007dbc:	695b      	ldr	r3, [r3, #20]
 8007dbe:	461a      	mov	r2, r3
 8007dc0:	6a39      	ldr	r1, [r7, #32]
 8007dc2:	6878      	ldr	r0, [r7, #4]
 8007dc4:	f7ff ff59 	bl	8007c7a <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8007dc8:	683b      	ldr	r3, [r7, #0]
 8007dca:	685b      	ldr	r3, [r3, #4]
 8007dcc:	461a      	mov	r2, r3
 8007dce:	6a39      	ldr	r1, [r7, #32]
 8007dd0:	6878      	ldr	r0, [r7, #4]
 8007dd2:	f7ff fe46 	bl	8007a62 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8007dd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dd8:	3301      	adds	r3, #1
 8007dda:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0U)
 8007ddc:	683b      	ldr	r3, [r7, #0]
 8007dde:	681a      	ldr	r2, [r3, #0]
 8007de0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007de2:	fa22 f303 	lsr.w	r3, r2, r3
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d19f      	bne.n	8007d2a <LL_GPIO_Init+0x32>
  }
  return (SUCCESS);
 8007dea:	2300      	movs	r3, #0
}
 8007dec:	4618      	mov	r0, r3
 8007dee:	3728      	adds	r7, #40	@ 0x28
 8007df0:	46bd      	mov	sp, r7
 8007df2:	bd80      	pop	{r7, pc}

08007df4 <LL_LPUART_IsEnabled>:
{
 8007df4:	b480      	push	{r7}
 8007df6:	b083      	sub	sp, #12
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(LPUARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	f003 0301 	and.w	r3, r3, #1
 8007e04:	2b01      	cmp	r3, #1
 8007e06:	d101      	bne.n	8007e0c <LL_LPUART_IsEnabled+0x18>
 8007e08:	2301      	movs	r3, #1
 8007e0a:	e000      	b.n	8007e0e <LL_LPUART_IsEnabled+0x1a>
 8007e0c:	2300      	movs	r3, #0
}
 8007e0e:	4618      	mov	r0, r3
 8007e10:	370c      	adds	r7, #12
 8007e12:	46bd      	mov	sp, r7
 8007e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e18:	4770      	bx	lr

08007e1a <LL_LPUART_SetPrescaler>:
  *         @arg @ref LL_LPUART_PRESCALER_DIV128
  *         @arg @ref LL_LPUART_PRESCALER_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_SetPrescaler(USART_TypeDef *LPUARTx, uint32_t PrescalerValue)
{
 8007e1a:	b480      	push	{r7}
 8007e1c:	b083      	sub	sp, #12
 8007e1e:	af00      	add	r7, sp, #0
 8007e20:	6078      	str	r0, [r7, #4]
 8007e22:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPUARTx->PRESC, USART_PRESC_PRESCALER, (uint16_t)PrescalerValue);
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e28:	f023 030f 	bic.w	r3, r3, #15
 8007e2c:	683a      	ldr	r2, [r7, #0]
 8007e2e:	b292      	uxth	r2, r2
 8007e30:	431a      	orrs	r2, r3
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8007e36:	bf00      	nop
 8007e38:	370c      	adds	r7, #12
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e40:	4770      	bx	lr

08007e42 <LL_LPUART_SetStopBitsLength>:
  *         @arg @ref LL_LPUART_STOPBITS_1
  *         @arg @ref LL_LPUART_STOPBITS_2
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_SetStopBitsLength(USART_TypeDef *LPUARTx, uint32_t StopBits)
{
 8007e42:	b480      	push	{r7}
 8007e44:	b083      	sub	sp, #12
 8007e46:	af00      	add	r7, sp, #0
 8007e48:	6078      	str	r0, [r7, #4]
 8007e4a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPUARTx->CR2, USART_CR2_STOP, StopBits);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	685b      	ldr	r3, [r3, #4]
 8007e50:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8007e54:	683b      	ldr	r3, [r7, #0]
 8007e56:	431a      	orrs	r2, r3
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	605a      	str	r2, [r3, #4]
}
 8007e5c:	bf00      	nop
 8007e5e:	370c      	adds	r7, #12
 8007e60:	46bd      	mov	sp, r7
 8007e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e66:	4770      	bx	lr

08007e68 <LL_LPUART_SetHWFlowCtrl>:
  *         @arg @ref LL_LPUART_HWCONTROL_CTS
  *         @arg @ref LL_LPUART_HWCONTROL_RTS_CTS
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_SetHWFlowCtrl(USART_TypeDef *LPUARTx, uint32_t HardwareFlowControl)
{
 8007e68:	b480      	push	{r7}
 8007e6a:	b083      	sub	sp, #12
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
 8007e70:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPUARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	689b      	ldr	r3, [r3, #8]
 8007e76:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007e7a:	683b      	ldr	r3, [r7, #0]
 8007e7c:	431a      	orrs	r2, r3
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	609a      	str	r2, [r3, #8]
}
 8007e82:	bf00      	nop
 8007e84:	370c      	adds	r7, #12
 8007e86:	46bd      	mov	sp, r7
 8007e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e8c:	4770      	bx	lr
	...

08007e90 <LL_LPUART_SetBaudRate>:
  * @param  BaudRate Baud Rate
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_SetBaudRate(USART_TypeDef *LPUARTx, uint32_t PeriphClk, uint32_t PrescalerValue,
                                           uint32_t BaudRate)
{
 8007e90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007e94:	b088      	sub	sp, #32
 8007e96:	af00      	add	r7, sp, #0
 8007e98:	61f8      	str	r0, [r7, #28]
 8007e9a:	61b9      	str	r1, [r7, #24]
 8007e9c:	617a      	str	r2, [r7, #20]
 8007e9e:	613b      	str	r3, [r7, #16]
  if (BaudRate != 0U)
 8007ea0:	693b      	ldr	r3, [r7, #16]
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d039      	beq.n	8007f1a <LL_LPUART_SetBaudRate+0x8a>
  {
    LPUARTx->BRR = __LL_LPUART_DIV(PeriphClk, PrescalerValue, BaudRate);
 8007ea6:	69bb      	ldr	r3, [r7, #24]
 8007ea8:	2200      	movs	r2, #0
 8007eaa:	60bb      	str	r3, [r7, #8]
 8007eac:	60fa      	str	r2, [r7, #12]
 8007eae:	697b      	ldr	r3, [r7, #20]
 8007eb0:	b29b      	uxth	r3, r3
 8007eb2:	461a      	mov	r2, r3
 8007eb4:	4b1b      	ldr	r3, [pc, #108]	@ (8007f24 <LL_LPUART_SetBaudRate+0x94>)
 8007eb6:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8007eba:	b29b      	uxth	r3, r3
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	603b      	str	r3, [r7, #0]
 8007ec0:	607a      	str	r2, [r7, #4]
 8007ec2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ec6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007eca:	f7f8 f9d5 	bl	8000278 <__aeabi_uldivmod>
 8007ece:	4602      	mov	r2, r0
 8007ed0:	460b      	mov	r3, r1
 8007ed2:	4610      	mov	r0, r2
 8007ed4:	4619      	mov	r1, r3
 8007ed6:	f04f 0200 	mov.w	r2, #0
 8007eda:	f04f 0300 	mov.w	r3, #0
 8007ede:	020b      	lsls	r3, r1, #8
 8007ee0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007ee4:	0202      	lsls	r2, r0, #8
 8007ee6:	6939      	ldr	r1, [r7, #16]
 8007ee8:	0849      	lsrs	r1, r1, #1
 8007eea:	2000      	movs	r0, #0
 8007eec:	460c      	mov	r4, r1
 8007eee:	4605      	mov	r5, r0
 8007ef0:	eb12 0804 	adds.w	r8, r2, r4
 8007ef4:	eb43 0905 	adc.w	r9, r3, r5
 8007ef8:	693b      	ldr	r3, [r7, #16]
 8007efa:	2200      	movs	r2, #0
 8007efc:	469a      	mov	sl, r3
 8007efe:	4693      	mov	fp, r2
 8007f00:	4652      	mov	r2, sl
 8007f02:	465b      	mov	r3, fp
 8007f04:	4640      	mov	r0, r8
 8007f06:	4649      	mov	r1, r9
 8007f08:	f7f8 f9b6 	bl	8000278 <__aeabi_uldivmod>
 8007f0c:	4602      	mov	r2, r0
 8007f0e:	460b      	mov	r3, r1
 8007f10:	4613      	mov	r3, r2
 8007f12:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8007f16:	69fb      	ldr	r3, [r7, #28]
 8007f18:	60da      	str	r2, [r3, #12]
  }
}
 8007f1a:	bf00      	nop
 8007f1c:	3720      	adds	r7, #32
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007f24:	0800935c 	.word	0x0800935c

08007f28 <LL_LPUART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: LPUART registers are initialized according to LPUART_InitStruct content
  *          - ERROR: Problem occurred during LPUART Registers initialization
  */
ErrorStatus LL_LPUART_Init(USART_TypeDef *LPUARTx, const LL_LPUART_InitTypeDef *LPUART_InitStruct)
{
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	b084      	sub	sp, #16
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]
 8007f30:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8007f32:	2301      	movs	r3, #1
 8007f34:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_LPUART_DIRECTION(LPUART_InitStruct->TransferDirection));
  assert_param(IS_LL_LPUART_HWCONTROL(LPUART_InitStruct->HardwareFlowControl));

  /* LPUART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers. Otherwise (LPUART not in Disabled state) => return ERROR */
  if (LL_LPUART_IsEnabled(LPUARTx) == 0U)
 8007f36:	6878      	ldr	r0, [r7, #4]
 8007f38:	f7ff ff5c 	bl	8007df4 <LL_LPUART_IsEnabled>
 8007f3c:	4603      	mov	r3, r0
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d135      	bne.n	8007fae <LL_LPUART_Init+0x86>
     * Configure LPUARTx CR1 (LPUART Word Length, Parity and Transfer Direction bits) with parameters:
     * - DataWidth:          USART_CR1_M bits according to LPUART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to LPUART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to LPUART_InitStruct->TransferDirection value
     */
    MODIFY_REG(LPUARTx->CR1,
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681a      	ldr	r2, [r3, #0]
 8007f46:	4b1c      	ldr	r3, [pc, #112]	@ (8007fb8 <LL_LPUART_Init+0x90>)
 8007f48:	4013      	ands	r3, r2
 8007f4a:	683a      	ldr	r2, [r7, #0]
 8007f4c:	6891      	ldr	r1, [r2, #8]
 8007f4e:	683a      	ldr	r2, [r7, #0]
 8007f50:	6912      	ldr	r2, [r2, #16]
 8007f52:	4311      	orrs	r1, r2
 8007f54:	683a      	ldr	r2, [r7, #0]
 8007f56:	6952      	ldr	r2, [r2, #20]
 8007f58:	430a      	orrs	r2, r1
 8007f5a:	431a      	orrs	r2, r3
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	601a      	str	r2, [r3, #0]

    /*---------------------------- LPUART CR2 Configuration -----------------------
     * Configure LPUARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to LPUART_InitStruct->StopBits value.
     */
    LL_LPUART_SetStopBitsLength(LPUARTx, LPUART_InitStruct->StopBits);
 8007f60:	683b      	ldr	r3, [r7, #0]
 8007f62:	68db      	ldr	r3, [r3, #12]
 8007f64:	4619      	mov	r1, r3
 8007f66:	6878      	ldr	r0, [r7, #4]
 8007f68:	f7ff ff6b 	bl	8007e42 <LL_LPUART_SetStopBitsLength>
    /*---------------------------- LPUART CR3 Configuration -----------------------
     * Configure LPUARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according
     *   to LPUART_InitStruct->HardwareFlowControl value.
     */
    LL_LPUART_SetHWFlowCtrl(LPUARTx, LPUART_InitStruct->HardwareFlowControl);
 8007f6c:	683b      	ldr	r3, [r7, #0]
 8007f6e:	699b      	ldr	r3, [r3, #24]
 8007f70:	4619      	mov	r1, r3
 8007f72:	6878      	ldr	r0, [r7, #4]
 8007f74:	f7ff ff78 	bl	8007e68 <LL_LPUART_SetHWFlowCtrl>

    /*---------------------------- LPUART BRR Configuration -----------------------
     * Retrieve Clock frequency used for LPUART Peripheral
     */
    periphclk = LL_RCC_GetLPUARTClockFreq(LL_RCC_LPUART1_CLKSOURCE);
 8007f78:	2007      	movs	r0, #7
 8007f7a:	f000 faa5 	bl	80084c8 <LL_RCC_GetLPUARTClockFreq>
 8007f7e:	60b8      	str	r0, [r7, #8]
    /* Configure the LPUART Baud Rate :
       - prescaler value is required
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8007f80:	68bb      	ldr	r3, [r7, #8]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d00d      	beq.n	8007fa2 <LL_LPUART_Init+0x7a>
        && (LPUART_InitStruct->BaudRate != 0U))
 8007f86:	683b      	ldr	r3, [r7, #0]
 8007f88:	685b      	ldr	r3, [r3, #4]
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d009      	beq.n	8007fa2 <LL_LPUART_Init+0x7a>
    {
      status = SUCCESS;
 8007f8e:	2300      	movs	r3, #0
 8007f90:	73fb      	strb	r3, [r7, #15]
      LL_LPUART_SetBaudRate(LPUARTx,
                            periphclk,
                            LPUART_InitStruct->PrescalerValue,
 8007f92:	683b      	ldr	r3, [r7, #0]
 8007f94:	681a      	ldr	r2, [r3, #0]
                            LPUART_InitStruct->BaudRate);
 8007f96:	683b      	ldr	r3, [r7, #0]
 8007f98:	685b      	ldr	r3, [r3, #4]
      LL_LPUART_SetBaudRate(LPUARTx,
 8007f9a:	68b9      	ldr	r1, [r7, #8]
 8007f9c:	6878      	ldr	r0, [r7, #4]
 8007f9e:	f7ff ff77 	bl	8007e90 <LL_LPUART_SetBaudRate>

    /*---------------------------- LPUART PRESC Configuration -----------------------
     * Configure LPUARTx PRESC (Prescaler) with parameters:
     * - PrescalerValue: LPUART_PRESC_PRESCALER bits according to LPUART_InitStruct->PrescalerValue value.
     */
    LL_LPUART_SetPrescaler(LPUARTx, LPUART_InitStruct->PrescalerValue);
 8007fa2:	683b      	ldr	r3, [r7, #0]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	4619      	mov	r1, r3
 8007fa8:	6878      	ldr	r0, [r7, #4]
 8007faa:	f7ff ff36 	bl	8007e1a <LL_LPUART_SetPrescaler>
  }

  return (status);
 8007fae:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	3710      	adds	r7, #16
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	bd80      	pop	{r7, pc}
 8007fb8:	efffe9f3 	.word	0xefffe9f3

08007fbc <LL_RCC_HSI_IsReady>:
{
 8007fbc:	b480      	push	{r7}
 8007fbe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8007fc0:	4b07      	ldr	r3, [pc, #28]	@ (8007fe0 <LL_RCC_HSI_IsReady+0x24>)
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007fc8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007fcc:	d101      	bne.n	8007fd2 <LL_RCC_HSI_IsReady+0x16>
 8007fce:	2301      	movs	r3, #1
 8007fd0:	e000      	b.n	8007fd4 <LL_RCC_HSI_IsReady+0x18>
 8007fd2:	2300      	movs	r3, #0
}
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fdc:	4770      	bx	lr
 8007fde:	bf00      	nop
 8007fe0:	46020c00 	.word	0x46020c00

08007fe4 <LL_RCC_LSE_IsReady>:
{
 8007fe4:	b480      	push	{r7}
 8007fe6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RCC_BDCR_LSERDY) ? 1UL : 0UL);
 8007fe8:	4b07      	ldr	r3, [pc, #28]	@ (8008008 <LL_RCC_LSE_IsReady+0x24>)
 8007fea:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8007fee:	f003 0302 	and.w	r3, r3, #2
 8007ff2:	2b02      	cmp	r3, #2
 8007ff4:	d101      	bne.n	8007ffa <LL_RCC_LSE_IsReady+0x16>
 8007ff6:	2301      	movs	r3, #1
 8007ff8:	e000      	b.n	8007ffc <LL_RCC_LSE_IsReady+0x18>
 8007ffa:	2300      	movs	r3, #0
}
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	46bd      	mov	sp, r7
 8008000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008004:	4770      	bx	lr
 8008006:	bf00      	nop
 8008008:	46020c00 	.word	0x46020c00

0800800c <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 800800c:	b480      	push	{r7}
 800800e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == RCC_ICSCR1_MSIRGSEL) ? 1UL : 0UL);
 8008010:	4b07      	ldr	r3, [pc, #28]	@ (8008030 <LL_RCC_MSI_IsEnabledRangeSelect+0x24>)
 8008012:	689b      	ldr	r3, [r3, #8]
 8008014:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008018:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800801c:	d101      	bne.n	8008022 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 800801e:	2301      	movs	r3, #1
 8008020:	e000      	b.n	8008024 <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8008022:	2300      	movs	r3, #0
}
 8008024:	4618      	mov	r0, r3
 8008026:	46bd      	mov	sp, r7
 8008028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802c:	4770      	bx	lr
 800802e:	bf00      	nop
 8008030:	46020c00 	.word	0x46020c00

08008034 <LL_RCC_MSIS_GetRange>:
{
 8008034:	b480      	push	{r7}
 8008036:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSISRANGE));
 8008038:	4b04      	ldr	r3, [pc, #16]	@ (800804c <LL_RCC_MSIS_GetRange+0x18>)
 800803a:	689b      	ldr	r3, [r3, #8]
 800803c:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
}
 8008040:	4618      	mov	r0, r3
 8008042:	46bd      	mov	sp, r7
 8008044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008048:	4770      	bx	lr
 800804a:	bf00      	nop
 800804c:	46020c00 	.word	0x46020c00

08008050 <LL_RCC_MSIS_GetRangeAfterStandby>:
{
 8008050:	b480      	push	{r7}
 8008052:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISSRANGE));
 8008054:	4b04      	ldr	r3, [pc, #16]	@ (8008068 <LL_RCC_MSIS_GetRangeAfterStandby+0x18>)
 8008056:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800805a:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
}
 800805e:	4618      	mov	r0, r3
 8008060:	46bd      	mov	sp, r7
 8008062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008066:	4770      	bx	lr
 8008068:	46020c00 	.word	0x46020c00

0800806c <LL_RCC_GetSysClkSource>:
{
 800806c:	b480      	push	{r7}
 800806e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR1, RCC_CFGR1_SWS));
 8008070:	4b04      	ldr	r3, [pc, #16]	@ (8008084 <LL_RCC_GetSysClkSource+0x18>)
 8008072:	69db      	ldr	r3, [r3, #28]
 8008074:	f003 030c 	and.w	r3, r3, #12
}
 8008078:	4618      	mov	r0, r3
 800807a:	46bd      	mov	sp, r7
 800807c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008080:	4770      	bx	lr
 8008082:	bf00      	nop
 8008084:	46020c00 	.word	0x46020c00

08008088 <LL_RCC_GetAHBPrescaler>:
{
 8008088:	b480      	push	{r7}
 800808a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_HPRE));
 800808c:	4b04      	ldr	r3, [pc, #16]	@ (80080a0 <LL_RCC_GetAHBPrescaler+0x18>)
 800808e:	6a1b      	ldr	r3, [r3, #32]
 8008090:	f003 030f 	and.w	r3, r3, #15
}
 8008094:	4618      	mov	r0, r3
 8008096:	46bd      	mov	sp, r7
 8008098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809c:	4770      	bx	lr
 800809e:	bf00      	nop
 80080a0:	46020c00 	.word	0x46020c00

080080a4 <LL_RCC_GetAPB1Prescaler>:
{
 80080a4:	b480      	push	{r7}
 80080a6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE1));
 80080a8:	4b04      	ldr	r3, [pc, #16]	@ (80080bc <LL_RCC_GetAPB1Prescaler+0x18>)
 80080aa:	6a1b      	ldr	r3, [r3, #32]
 80080ac:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 80080b0:	4618      	mov	r0, r3
 80080b2:	46bd      	mov	sp, r7
 80080b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b8:	4770      	bx	lr
 80080ba:	bf00      	nop
 80080bc:	46020c00 	.word	0x46020c00

080080c0 <LL_RCC_GetAPB2Prescaler>:
{
 80080c0:	b480      	push	{r7}
 80080c2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE2));
 80080c4:	4b04      	ldr	r3, [pc, #16]	@ (80080d8 <LL_RCC_GetAPB2Prescaler+0x18>)
 80080c6:	6a1b      	ldr	r3, [r3, #32]
 80080c8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 80080cc:	4618      	mov	r0, r3
 80080ce:	46bd      	mov	sp, r7
 80080d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d4:	4770      	bx	lr
 80080d6:	bf00      	nop
 80080d8:	46020c00 	.word	0x46020c00

080080dc <LL_RCC_GetAPB3Prescaler>:
{
 80080dc:	b480      	push	{r7}
 80080de:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR3, RCC_CFGR3_PPRE3));
 80080e0:	4b04      	ldr	r3, [pc, #16]	@ (80080f4 <LL_RCC_GetAPB3Prescaler+0x18>)
 80080e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080e4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
}
 80080e8:	4618      	mov	r0, r3
 80080ea:	46bd      	mov	sp, r7
 80080ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f0:	4770      	bx	lr
 80080f2:	bf00      	nop
 80080f4:	46020c00 	.word	0x46020c00

080080f8 <LL_RCC_GetUSARTClockSource>:
{
 80080f8:	b480      	push	{r7}
 80080fa:	b085      	sub	sp, #20
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	6078      	str	r0, [r7, #4]
  __IO const uint32_t *reg = (__IO uint32_t *)(uint32_t)(RCC_BASE + 0xE0U + (USARTx >> 24U));
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	0e1a      	lsrs	r2, r3, #24
 8008104:	4b0d      	ldr	r3, [pc, #52]	@ (800813c <LL_RCC_GetUSARTClockSource+0x44>)
 8008106:	4413      	add	r3, r2
 8008108:	60fb      	str	r3, [r7, #12]
  return (uint32_t)((READ_BIT(*reg, 3UL << ((USARTx & 0x001F0000U) >> 16U)) >> \
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	681a      	ldr	r2, [r3, #0]
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	0c1b      	lsrs	r3, r3, #16
 8008112:	f003 031f 	and.w	r3, r3, #31
 8008116:	2103      	movs	r1, #3
 8008118:	fa01 f303 	lsl.w	r3, r1, r3
 800811c:	401a      	ands	r2, r3
                     ((USARTx & 0x001F0000U) >> 16U)) | (USARTx & 0xFFFF0000U));
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	0c1b      	lsrs	r3, r3, #16
 8008122:	f003 031f 	and.w	r3, r3, #31
  return (uint32_t)((READ_BIT(*reg, 3UL << ((USARTx & 0x001F0000U) >> 16U)) >> \
 8008126:	40da      	lsrs	r2, r3
                     ((USARTx & 0x001F0000U) >> 16U)) | (USARTx & 0xFFFF0000U));
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	0c1b      	lsrs	r3, r3, #16
 800812c:	041b      	lsls	r3, r3, #16
  return (uint32_t)((READ_BIT(*reg, 3UL << ((USARTx & 0x001F0000U) >> 16U)) >> \
 800812e:	4313      	orrs	r3, r2
}
 8008130:	4618      	mov	r0, r3
 8008132:	3714      	adds	r7, #20
 8008134:	46bd      	mov	sp, r7
 8008136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813a:	4770      	bx	lr
 800813c:	46020ce0 	.word	0x46020ce0

08008140 <LL_RCC_GetUARTClockSource>:
{
 8008140:	b480      	push	{r7}
 8008142:	b083      	sub	sp, #12
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR1, UARTx) | (UARTx << 16U));
 8008148:	4b06      	ldr	r3, [pc, #24]	@ (8008164 <LL_RCC_GetUARTClockSource+0x24>)
 800814a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	401a      	ands	r2, r3
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	041b      	lsls	r3, r3, #16
 8008156:	4313      	orrs	r3, r2
}
 8008158:	4618      	mov	r0, r3
 800815a:	370c      	adds	r7, #12
 800815c:	46bd      	mov	sp, r7
 800815e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008162:	4770      	bx	lr
 8008164:	46020c00 	.word	0x46020c00

08008168 <LL_RCC_GetLPUARTClockSource>:
{
 8008168:	b480      	push	{r7}
 800816a:	b083      	sub	sp, #12
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR3, LPUARTx));
 8008170:	4b05      	ldr	r3, [pc, #20]	@ (8008188 <LL_RCC_GetLPUARTClockSource+0x20>)
 8008172:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	4013      	ands	r3, r2
}
 800817a:	4618      	mov	r0, r3
 800817c:	370c      	adds	r7, #12
 800817e:	46bd      	mov	sp, r7
 8008180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008184:	4770      	bx	lr
 8008186:	bf00      	nop
 8008188:	46020c00 	.word	0x46020c00

0800818c <LL_RCC_PLL1_GetMainSource>:
  *         @arg @ref LL_RCC_PLL1SOURCE_MSIS
  *         @arg @ref LL_RCC_PLL1SOURCE_HSI
  *         @arg @ref LL_RCC_PLL1SOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_GetMainSource(void)
{
 800818c:	b480      	push	{r7}
 800818e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR, RCC_PLL1CFGR_PLL1SRC));
 8008190:	4b04      	ldr	r3, [pc, #16]	@ (80081a4 <LL_RCC_PLL1_GetMainSource+0x18>)
 8008192:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008194:	f003 0303 	and.w	r3, r3, #3
}
 8008198:	4618      	mov	r0, r3
 800819a:	46bd      	mov	sp, r7
 800819c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a0:	4770      	bx	lr
 80081a2:	bf00      	nop
 80081a4:	46020c00 	.word	0x46020c00

080081a8 <LL_RCC_PLL1_GetN>:
  * @brief  Get Main PLL1 multiplication factor for VCO
  * @rmtoll PLL1CFGR      PLL1N          LL_RCC_PLL1_GetN
  * @retval Between 4 and 512
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_GetN(void)
{
 80081a8:	b480      	push	{r7}
 80081aa:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL1DIVR, RCC_PLL1DIVR_PLL1N) >>  RCC_PLL1DIVR_PLL1N_Pos) + 1UL);
 80081ac:	4b04      	ldr	r3, [pc, #16]	@ (80081c0 <LL_RCC_PLL1_GetN+0x18>)
 80081ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80081b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80081b4:	3301      	adds	r3, #1
}
 80081b6:	4618      	mov	r0, r3
 80081b8:	46bd      	mov	sp, r7
 80081ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081be:	4770      	bx	lr
 80081c0:	46020c00 	.word	0x46020c00

080081c4 <LL_RCC_PLL1_GetR>:
  * @note Used for PLL1CLK (system clock)
  * @rmtoll PLL1DIVR      PLL1R          LL_RCC_PLL1_GetR
  * @retval Between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_GetR(void)
{
 80081c4:	b480      	push	{r7}
 80081c6:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL1DIVR, RCC_PLL1DIVR_PLL1R) >>  RCC_PLL1DIVR_PLL1R_Pos) + 1UL);
 80081c8:	4b05      	ldr	r3, [pc, #20]	@ (80081e0 <LL_RCC_PLL1_GetR+0x1c>)
 80081ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80081cc:	0e1b      	lsrs	r3, r3, #24
 80081ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80081d2:	3301      	adds	r3, #1
}
 80081d4:	4618      	mov	r0, r3
 80081d6:	46bd      	mov	sp, r7
 80081d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081dc:	4770      	bx	lr
 80081de:	bf00      	nop
 80081e0:	46020c00 	.word	0x46020c00

080081e4 <LL_RCC_PLL1_GetDivider>:
  * @brief  Get Division factor for the main PLL and other PLL
  * @rmtoll PLL1CFGR      PLL1M          LL_RCC_PLL1_GetDivider
  * @retval Between 1 and 16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_GetDivider(void)
{
 80081e4:	b480      	push	{r7}
 80081e6:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL1CFGR, RCC_PLL1CFGR_PLL1M) >>  RCC_PLL1CFGR_PLL1M_Pos) + 1UL);
 80081e8:	4b05      	ldr	r3, [pc, #20]	@ (8008200 <LL_RCC_PLL1_GetDivider+0x1c>)
 80081ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80081ec:	0a1b      	lsrs	r3, r3, #8
 80081ee:	f003 030f 	and.w	r3, r3, #15
 80081f2:	3301      	adds	r3, #1
}
 80081f4:	4618      	mov	r0, r3
 80081f6:	46bd      	mov	sp, r7
 80081f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fc:	4770      	bx	lr
 80081fe:	bf00      	nop
 8008200:	46020c00 	.word	0x46020c00

08008204 <LL_RCC_GetUSARTClockFreq>:
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  *
  * (*) : USART6 is available only for STM32U59xxx and STM32U5Axxx devices.
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8008204:	b580      	push	{r7, lr}
 8008206:	b084      	sub	sp, #16
 8008208:	af00      	add	r7, sp, #0
 800820a:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 800820c:	2300      	movs	r3, #0
 800820e:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	2b03      	cmp	r3, #3
 8008214:	d135      	bne.n	8008282 <LL_RCC_GetUSARTClockFreq+0x7e>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8008216:	6878      	ldr	r0, [r7, #4]
 8008218:	f7ff ff6e 	bl	80080f8 <LL_RCC_GetUSARTClockSource>
 800821c:	4603      	mov	r3, r0
 800821e:	2b03      	cmp	r3, #3
 8008220:	f200 809f 	bhi.w	8008362 <LL_RCC_GetUSARTClockFreq+0x15e>
 8008224:	a201      	add	r2, pc, #4	@ (adr r2, 800822c <LL_RCC_GetUSARTClockFreq+0x28>)
 8008226:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800822a:	bf00      	nop
 800822c:	0800826b 	.word	0x0800826b
 8008230:	0800823d 	.word	0x0800823d
 8008234:	08008245 	.word	0x08008245
 8008238:	08008257 	.word	0x08008257
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 800823c:	f000 f98a 	bl	8008554 <RCC_GetSystemClockFreq>
 8008240:	60f8      	str	r0, [r7, #12]
        break;
 8008242:	e09f      	b.n	8008384 <LL_RCC_GetUSARTClockFreq+0x180>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() == 1U)
 8008244:	f7ff feba 	bl	8007fbc <LL_RCC_HSI_IsReady>
 8008248:	4603      	mov	r3, r0
 800824a:	2b01      	cmp	r3, #1
 800824c:	f040 808b 	bne.w	8008366 <LL_RCC_GetUSARTClockFreq+0x162>
        {
          usart_frequency = HSI_VALUE;
 8008250:	4b4f      	ldr	r3, [pc, #316]	@ (8008390 <LL_RCC_GetUSARTClockFreq+0x18c>)
 8008252:	60fb      	str	r3, [r7, #12]
        }
        break;
 8008254:	e087      	b.n	8008366 <LL_RCC_GetUSARTClockFreq+0x162>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() == 1U)
 8008256:	f7ff fec5 	bl	8007fe4 <LL_RCC_LSE_IsReady>
 800825a:	4603      	mov	r3, r0
 800825c:	2b01      	cmp	r3, #1
 800825e:	f040 8084 	bne.w	800836a <LL_RCC_GetUSARTClockFreq+0x166>
        {
          usart_frequency = LSE_VALUE;
 8008262:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008266:	60fb      	str	r3, [r7, #12]
        }
        break;
 8008268:	e07f      	b.n	800836a <LL_RCC_GetUSARTClockFreq+0x166>

      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800826a:	f000 f973 	bl	8008554 <RCC_GetSystemClockFreq>
 800826e:	4603      	mov	r3, r0
 8008270:	4618      	mov	r0, r3
 8008272:	f000 fa0d 	bl	8008690 <RCC_GetHCLKClockFreq>
 8008276:	4603      	mov	r3, r0
 8008278:	4618      	mov	r0, r3
 800827a:	f000 fa33 	bl	80086e4 <RCC_GetPCLK2ClockFreq>
 800827e:	60f8      	str	r0, [r7, #12]
        break;
 8008280:	e080      	b.n	8008384 <LL_RCC_GetUSARTClockFreq+0x180>
        /* unreachable code */
        break;
    }
  }
#if defined (USART2)
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	4a43      	ldr	r2, [pc, #268]	@ (8008394 <LL_RCC_GetUSARTClockFreq+0x190>)
 8008286:	4293      	cmp	r3, r2
 8008288:	d133      	bne.n	80082f2 <LL_RCC_GetUSARTClockFreq+0xee>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800828a:	6878      	ldr	r0, [r7, #4]
 800828c:	f7ff ff34 	bl	80080f8 <LL_RCC_GetUSARTClockSource>
 8008290:	4603      	mov	r3, r0
 8008292:	f5a3 3300 	sub.w	r3, r3, #131072	@ 0x20000
 8008296:	2b03      	cmp	r3, #3
 8008298:	d869      	bhi.n	800836e <LL_RCC_GetUSARTClockFreq+0x16a>
 800829a:	a201      	add	r2, pc, #4	@ (adr r2, 80082a0 <LL_RCC_GetUSARTClockFreq+0x9c>)
 800829c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082a0:	080082db 	.word	0x080082db
 80082a4:	080082b1 	.word	0x080082b1
 80082a8:	080082b9 	.word	0x080082b9
 80082ac:	080082c9 	.word	0x080082c9
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 80082b0:	f000 f950 	bl	8008554 <RCC_GetSystemClockFreq>
 80082b4:	60f8      	str	r0, [r7, #12]
        break;
 80082b6:	e065      	b.n	8008384 <LL_RCC_GetUSARTClockFreq+0x180>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() == 1U)
 80082b8:	f7ff fe80 	bl	8007fbc <LL_RCC_HSI_IsReady>
 80082bc:	4603      	mov	r3, r0
 80082be:	2b01      	cmp	r3, #1
 80082c0:	d157      	bne.n	8008372 <LL_RCC_GetUSARTClockFreq+0x16e>
        {
          usart_frequency = HSI_VALUE;
 80082c2:	4b33      	ldr	r3, [pc, #204]	@ (8008390 <LL_RCC_GetUSARTClockFreq+0x18c>)
 80082c4:	60fb      	str	r3, [r7, #12]
        }
        break;
 80082c6:	e054      	b.n	8008372 <LL_RCC_GetUSARTClockFreq+0x16e>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() == 1U)
 80082c8:	f7ff fe8c 	bl	8007fe4 <LL_RCC_LSE_IsReady>
 80082cc:	4603      	mov	r3, r0
 80082ce:	2b01      	cmp	r3, #1
 80082d0:	d151      	bne.n	8008376 <LL_RCC_GetUSARTClockFreq+0x172>
        {
          usart_frequency = LSE_VALUE;
 80082d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80082d6:	60fb      	str	r3, [r7, #12]
        }
        break;
 80082d8:	e04d      	b.n	8008376 <LL_RCC_GetUSARTClockFreq+0x172>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80082da:	f000 f93b 	bl	8008554 <RCC_GetSystemClockFreq>
 80082de:	4603      	mov	r3, r0
 80082e0:	4618      	mov	r0, r3
 80082e2:	f000 f9d5 	bl	8008690 <RCC_GetHCLKClockFreq>
 80082e6:	4603      	mov	r3, r0
 80082e8:	4618      	mov	r0, r3
 80082ea:	f000 f9e5 	bl	80086b8 <RCC_GetPCLK1ClockFreq>
 80082ee:	60f8      	str	r0, [r7, #12]
        break;
 80082f0:	e048      	b.n	8008384 <LL_RCC_GetUSARTClockFreq+0x180>
        /* unreachable code */
        break;
    }
  }
#endif /* USART2 */
  else if (USARTxSource == LL_RCC_USART3_CLKSOURCE)
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	4a28      	ldr	r2, [pc, #160]	@ (8008398 <LL_RCC_GetUSARTClockFreq+0x194>)
 80082f6:	4293      	cmp	r3, r2
 80082f8:	d144      	bne.n	8008384 <LL_RCC_GetUSARTClockFreq+0x180>
  {
    /* USART3CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80082fa:	6878      	ldr	r0, [r7, #4]
 80082fc:	f7ff fefc 	bl	80080f8 <LL_RCC_GetUSARTClockSource>
 8008300:	4603      	mov	r3, r0
 8008302:	f5a3 2380 	sub.w	r3, r3, #262144	@ 0x40000
 8008306:	2b03      	cmp	r3, #3
 8008308:	d837      	bhi.n	800837a <LL_RCC_GetUSARTClockFreq+0x176>
 800830a:	a201      	add	r2, pc, #4	@ (adr r2, 8008310 <LL_RCC_GetUSARTClockFreq+0x10c>)
 800830c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008310:	0800834b 	.word	0x0800834b
 8008314:	08008321 	.word	0x08008321
 8008318:	08008329 	.word	0x08008329
 800831c:	08008339 	.word	0x08008339
    {
      case LL_RCC_USART3_CLKSOURCE_SYSCLK: /* USART3 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8008320:	f000 f918 	bl	8008554 <RCC_GetSystemClockFreq>
 8008324:	60f8      	str	r0, [r7, #12]
        break;
 8008326:	e02d      	b.n	8008384 <LL_RCC_GetUSARTClockFreq+0x180>

      case LL_RCC_USART3_CLKSOURCE_HSI:    /* USART3 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() == 1U)
 8008328:	f7ff fe48 	bl	8007fbc <LL_RCC_HSI_IsReady>
 800832c:	4603      	mov	r3, r0
 800832e:	2b01      	cmp	r3, #1
 8008330:	d125      	bne.n	800837e <LL_RCC_GetUSARTClockFreq+0x17a>
        {
          usart_frequency = HSI_VALUE;
 8008332:	4b17      	ldr	r3, [pc, #92]	@ (8008390 <LL_RCC_GetUSARTClockFreq+0x18c>)
 8008334:	60fb      	str	r3, [r7, #12]
        }
        break;
 8008336:	e022      	b.n	800837e <LL_RCC_GetUSARTClockFreq+0x17a>

      case LL_RCC_USART3_CLKSOURCE_LSE:    /* USART3 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() == 1U)
 8008338:	f7ff fe54 	bl	8007fe4 <LL_RCC_LSE_IsReady>
 800833c:	4603      	mov	r3, r0
 800833e:	2b01      	cmp	r3, #1
 8008340:	d11f      	bne.n	8008382 <LL_RCC_GetUSARTClockFreq+0x17e>
        {
          usart_frequency = LSE_VALUE;
 8008342:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008346:	60fb      	str	r3, [r7, #12]
        }
        break;
 8008348:	e01b      	b.n	8008382 <LL_RCC_GetUSARTClockFreq+0x17e>

      case LL_RCC_USART3_CLKSOURCE_PCLK1:  /* USART3 Clock is PCLK1 */
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800834a:	f000 f903 	bl	8008554 <RCC_GetSystemClockFreq>
 800834e:	4603      	mov	r3, r0
 8008350:	4618      	mov	r0, r3
 8008352:	f000 f99d 	bl	8008690 <RCC_GetHCLKClockFreq>
 8008356:	4603      	mov	r3, r0
 8008358:	4618      	mov	r0, r3
 800835a:	f000 f9ad 	bl	80086b8 <RCC_GetPCLK1ClockFreq>
 800835e:	60f8      	str	r0, [r7, #12]
        break;
 8008360:	e010      	b.n	8008384 <LL_RCC_GetUSARTClockFreq+0x180>
        break;
 8008362:	bf00      	nop
 8008364:	e00e      	b.n	8008384 <LL_RCC_GetUSARTClockFreq+0x180>
        break;
 8008366:	bf00      	nop
 8008368:	e00c      	b.n	8008384 <LL_RCC_GetUSARTClockFreq+0x180>
        break;
 800836a:	bf00      	nop
 800836c:	e00a      	b.n	8008384 <LL_RCC_GetUSARTClockFreq+0x180>
        break;
 800836e:	bf00      	nop
 8008370:	e008      	b.n	8008384 <LL_RCC_GetUSARTClockFreq+0x180>
        break;
 8008372:	bf00      	nop
 8008374:	e006      	b.n	8008384 <LL_RCC_GetUSARTClockFreq+0x180>
        break;
 8008376:	bf00      	nop
 8008378:	e004      	b.n	8008384 <LL_RCC_GetUSARTClockFreq+0x180>

      default:
        /* unreachable code */
        break;
 800837a:	bf00      	nop
 800837c:	e002      	b.n	8008384 <LL_RCC_GetUSARTClockFreq+0x180>
        break;
 800837e:	bf00      	nop
 8008380:	e000      	b.n	8008384 <LL_RCC_GetUSARTClockFreq+0x180>
        break;
 8008382:	bf00      	nop
  else
  {
    /* nothing to do */
  }

  return usart_frequency;
 8008384:	68fb      	ldr	r3, [r7, #12]
}
 8008386:	4618      	mov	r0, r3
 8008388:	3710      	adds	r7, #16
 800838a:	46bd      	mov	sp, r7
 800838c:	bd80      	pop	{r7, pc}
 800838e:	bf00      	nop
 8008390:	00f42400 	.word	0x00f42400
 8008394:	00020003 	.word	0x00020003
 8008398:	00040003 	.word	0x00040003

0800839c <LL_RCC_GetUARTClockFreq>:
  *         @arg @ref LL_RCC_UART5_CLKSOURCE
  * @retval UART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUARTClockFreq(uint32_t UARTxSource)
{
 800839c:	b580      	push	{r7, lr}
 800839e:	b084      	sub	sp, #16
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	6078      	str	r0, [r7, #4]
  uint32_t uart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 80083a4:	2300      	movs	r3, #0
 80083a6:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_UART_CLKSOURCE(UARTxSource));

  if (UARTxSource == LL_RCC_UART4_CLKSOURCE)
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	2bc0      	cmp	r3, #192	@ 0xc0
 80083ac:	d136      	bne.n	800841c <LL_RCC_GetUARTClockFreq+0x80>
  {
    /* UART4CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 80083ae:	6878      	ldr	r0, [r7, #4]
 80083b0:	f7ff fec6 	bl	8008140 <LL_RCC_GetUARTClockSource>
 80083b4:	4603      	mov	r3, r0
 80083b6:	f1b3 1fc0 	cmp.w	r3, #12583104	@ 0xc000c0
 80083ba:	d01a      	beq.n	80083f2 <LL_RCC_GetUARTClockFreq+0x56>
 80083bc:	f1b3 1fc0 	cmp.w	r3, #12583104	@ 0xc000c0
 80083c0:	d867      	bhi.n	8008492 <LL_RCC_GetUARTClockFreq+0xf6>
 80083c2:	4a3c      	ldr	r2, [pc, #240]	@ (80084b4 <LL_RCC_GetUARTClockFreq+0x118>)
 80083c4:	4293      	cmp	r3, r2
 80083c6:	d00c      	beq.n	80083e2 <LL_RCC_GetUARTClockFreq+0x46>
 80083c8:	4a3a      	ldr	r2, [pc, #232]	@ (80084b4 <LL_RCC_GetUARTClockFreq+0x118>)
 80083ca:	4293      	cmp	r3, r2
 80083cc:	d861      	bhi.n	8008492 <LL_RCC_GetUARTClockFreq+0xf6>
 80083ce:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80083d2:	d017      	beq.n	8008404 <LL_RCC_GetUARTClockFreq+0x68>
 80083d4:	4a38      	ldr	r2, [pc, #224]	@ (80084b8 <LL_RCC_GetUARTClockFreq+0x11c>)
 80083d6:	4293      	cmp	r3, r2
 80083d8:	d15b      	bne.n	8008492 <LL_RCC_GetUARTClockFreq+0xf6>
    {
      case LL_RCC_UART4_CLKSOURCE_SYSCLK:  /* UART4 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 80083da:	f000 f8bb 	bl	8008554 <RCC_GetSystemClockFreq>
 80083de:	60f8      	str	r0, [r7, #12]
        break;
 80083e0:	e062      	b.n	80084a8 <LL_RCC_GetUARTClockFreq+0x10c>

      case LL_RCC_UART4_CLKSOURCE_HSI:     /* UART4 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() == 1U)
 80083e2:	f7ff fdeb 	bl	8007fbc <LL_RCC_HSI_IsReady>
 80083e6:	4603      	mov	r3, r0
 80083e8:	2b01      	cmp	r3, #1
 80083ea:	d154      	bne.n	8008496 <LL_RCC_GetUARTClockFreq+0xfa>
        {
          uart_frequency = HSI_VALUE;
 80083ec:	4b33      	ldr	r3, [pc, #204]	@ (80084bc <LL_RCC_GetUARTClockFreq+0x120>)
 80083ee:	60fb      	str	r3, [r7, #12]
        }
        break;
 80083f0:	e051      	b.n	8008496 <LL_RCC_GetUARTClockFreq+0xfa>

      case LL_RCC_UART4_CLKSOURCE_LSE:     /* UART4 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() == 1U)
 80083f2:	f7ff fdf7 	bl	8007fe4 <LL_RCC_LSE_IsReady>
 80083f6:	4603      	mov	r3, r0
 80083f8:	2b01      	cmp	r3, #1
 80083fa:	d14e      	bne.n	800849a <LL_RCC_GetUARTClockFreq+0xfe>
        {
          uart_frequency = LSE_VALUE;
 80083fc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008400:	60fb      	str	r3, [r7, #12]
        }
        break;
 8008402:	e04a      	b.n	800849a <LL_RCC_GetUARTClockFreq+0xfe>

      case LL_RCC_UART4_CLKSOURCE_PCLK1:   /* UART4 Clock is PCLK1 */
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8008404:	f000 f8a6 	bl	8008554 <RCC_GetSystemClockFreq>
 8008408:	4603      	mov	r3, r0
 800840a:	4618      	mov	r0, r3
 800840c:	f000 f940 	bl	8008690 <RCC_GetHCLKClockFreq>
 8008410:	4603      	mov	r3, r0
 8008412:	4618      	mov	r0, r3
 8008414:	f000 f950 	bl	80086b8 <RCC_GetPCLK1ClockFreq>
 8008418:	60f8      	str	r0, [r7, #12]
        break;
 800841a:	e045      	b.n	80084a8 <LL_RCC_GetUARTClockFreq+0x10c>
      default:
        /* unreachable code */
        break;
    }
  }
  else if (UARTxSource == LL_RCC_UART5_CLKSOURCE)
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008422:	d141      	bne.n	80084a8 <LL_RCC_GetUARTClockFreq+0x10c>
  {
    /* UART5CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 8008424:	6878      	ldr	r0, [r7, #4]
 8008426:	f7ff fe8b 	bl	8008140 <LL_RCC_GetUARTClockSource>
 800842a:	4603      	mov	r3, r0
 800842c:	f1b3 2f03 	cmp.w	r3, #50332416	@ 0x3000300
 8008430:	d01a      	beq.n	8008468 <LL_RCC_GetUARTClockFreq+0xcc>
 8008432:	f1b3 2f03 	cmp.w	r3, #50332416	@ 0x3000300
 8008436:	d832      	bhi.n	800849e <LL_RCC_GetUARTClockFreq+0x102>
 8008438:	4a21      	ldr	r2, [pc, #132]	@ (80084c0 <LL_RCC_GetUARTClockFreq+0x124>)
 800843a:	4293      	cmp	r3, r2
 800843c:	d00c      	beq.n	8008458 <LL_RCC_GetUARTClockFreq+0xbc>
 800843e:	4a20      	ldr	r2, [pc, #128]	@ (80084c0 <LL_RCC_GetUARTClockFreq+0x124>)
 8008440:	4293      	cmp	r3, r2
 8008442:	d82c      	bhi.n	800849e <LL_RCC_GetUARTClockFreq+0x102>
 8008444:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008448:	d017      	beq.n	800847a <LL_RCC_GetUARTClockFreq+0xde>
 800844a:	4a1e      	ldr	r2, [pc, #120]	@ (80084c4 <LL_RCC_GetUARTClockFreq+0x128>)
 800844c:	4293      	cmp	r3, r2
 800844e:	d126      	bne.n	800849e <LL_RCC_GetUARTClockFreq+0x102>
    {
      case LL_RCC_UART5_CLKSOURCE_SYSCLK: /* UART5 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 8008450:	f000 f880 	bl	8008554 <RCC_GetSystemClockFreq>
 8008454:	60f8      	str	r0, [r7, #12]
        break;
 8008456:	e027      	b.n	80084a8 <LL_RCC_GetUARTClockFreq+0x10c>

      case LL_RCC_UART5_CLKSOURCE_HSI:    /* UART5 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() == 1U)
 8008458:	f7ff fdb0 	bl	8007fbc <LL_RCC_HSI_IsReady>
 800845c:	4603      	mov	r3, r0
 800845e:	2b01      	cmp	r3, #1
 8008460:	d11f      	bne.n	80084a2 <LL_RCC_GetUARTClockFreq+0x106>
        {
          uart_frequency = HSI_VALUE;
 8008462:	4b16      	ldr	r3, [pc, #88]	@ (80084bc <LL_RCC_GetUARTClockFreq+0x120>)
 8008464:	60fb      	str	r3, [r7, #12]
        }
        break;
 8008466:	e01c      	b.n	80084a2 <LL_RCC_GetUARTClockFreq+0x106>

      case LL_RCC_UART5_CLKSOURCE_LSE:    /* UART5 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() == 1U)
 8008468:	f7ff fdbc 	bl	8007fe4 <LL_RCC_LSE_IsReady>
 800846c:	4603      	mov	r3, r0
 800846e:	2b01      	cmp	r3, #1
 8008470:	d119      	bne.n	80084a6 <LL_RCC_GetUARTClockFreq+0x10a>
        {
          uart_frequency = LSE_VALUE;
 8008472:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008476:	60fb      	str	r3, [r7, #12]
        }
        break;
 8008478:	e015      	b.n	80084a6 <LL_RCC_GetUARTClockFreq+0x10a>

      case LL_RCC_UART5_CLKSOURCE_PCLK1:  /* UART5 Clock is PCLK1 */
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800847a:	f000 f86b 	bl	8008554 <RCC_GetSystemClockFreq>
 800847e:	4603      	mov	r3, r0
 8008480:	4618      	mov	r0, r3
 8008482:	f000 f905 	bl	8008690 <RCC_GetHCLKClockFreq>
 8008486:	4603      	mov	r3, r0
 8008488:	4618      	mov	r0, r3
 800848a:	f000 f915 	bl	80086b8 <RCC_GetPCLK1ClockFreq>
 800848e:	60f8      	str	r0, [r7, #12]
        break;
 8008490:	e00a      	b.n	80084a8 <LL_RCC_GetUARTClockFreq+0x10c>
        break;
 8008492:	bf00      	nop
 8008494:	e008      	b.n	80084a8 <LL_RCC_GetUARTClockFreq+0x10c>
        break;
 8008496:	bf00      	nop
 8008498:	e006      	b.n	80084a8 <LL_RCC_GetUARTClockFreq+0x10c>
        break;
 800849a:	bf00      	nop
 800849c:	e004      	b.n	80084a8 <LL_RCC_GetUARTClockFreq+0x10c>

      default:
        /* unreachable code */
        break;
 800849e:	bf00      	nop
 80084a0:	e002      	b.n	80084a8 <LL_RCC_GetUARTClockFreq+0x10c>
        break;
 80084a2:	bf00      	nop
 80084a4:	e000      	b.n	80084a8 <LL_RCC_GetUARTClockFreq+0x10c>
        break;
 80084a6:	bf00      	nop
  else
  {
    /* nothing to do */
  }

  return uart_frequency;
 80084a8:	68fb      	ldr	r3, [r7, #12]
}
 80084aa:	4618      	mov	r0, r3
 80084ac:	3710      	adds	r7, #16
 80084ae:	46bd      	mov	sp, r7
 80084b0:	bd80      	pop	{r7, pc}
 80084b2:	bf00      	nop
 80084b4:	00c00080 	.word	0x00c00080
 80084b8:	00c00040 	.word	0x00c00040
 80084bc:	00f42400 	.word	0x00f42400
 80084c0:	03000200 	.word	0x03000200
 80084c4:	03000100 	.word	0x03000100

080084c8 <LL_RCC_GetLPUARTClockFreq>:
  *         @arg @ref LL_RCC_LPUART1_CLKSOURCE
  * @retval LPUART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetLPUARTClockFreq(uint32_t LPUARTxSource)
{
 80084c8:	b580      	push	{r7, lr}
 80084ca:	b084      	sub	sp, #16
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	6078      	str	r0, [r7, #4]
  uint32_t lpuart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 80084d0:	2300      	movs	r3, #0
 80084d2:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_LPUART_CLKSOURCE(LPUARTxSource));

  /* LPUART1CLK clock frequency */
  switch (LL_RCC_GetLPUARTClockSource(LPUARTxSource))
 80084d4:	6878      	ldr	r0, [r7, #4]
 80084d6:	f7ff fe47 	bl	8008168 <LL_RCC_GetLPUARTClockSource>
 80084da:	4603      	mov	r3, r0
 80084dc:	2b03      	cmp	r3, #3
 80084de:	d82c      	bhi.n	800853a <LL_RCC_GetLPUARTClockFreq+0x72>
 80084e0:	a201      	add	r2, pc, #4	@ (adr r2, 80084e8 <LL_RCC_GetLPUARTClockFreq+0x20>)
 80084e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084e6:	bf00      	nop
 80084e8:	08008523 	.word	0x08008523
 80084ec:	080084f9 	.word	0x080084f9
 80084f0:	08008501 	.word	0x08008501
 80084f4:	08008511 	.word	0x08008511
  {
    case LL_RCC_LPUART1_CLKSOURCE_SYSCLK: /* LPUART1 Clock is System Clock */
      lpuart_frequency = RCC_GetSystemClockFreq();
 80084f8:	f000 f82c 	bl	8008554 <RCC_GetSystemClockFreq>
 80084fc:	60f8      	str	r0, [r7, #12]
      break;
 80084fe:	e021      	b.n	8008544 <LL_RCC_GetLPUARTClockFreq+0x7c>

    case LL_RCC_LPUART1_CLKSOURCE_HSI:    /* LPUART1 Clock is HSI Osc. */
      if (LL_RCC_HSI_IsReady() == 1U)
 8008500:	f7ff fd5c 	bl	8007fbc <LL_RCC_HSI_IsReady>
 8008504:	4603      	mov	r3, r0
 8008506:	2b01      	cmp	r3, #1
 8008508:	d119      	bne.n	800853e <LL_RCC_GetLPUARTClockFreq+0x76>
      {
        lpuart_frequency = HSI_VALUE;
 800850a:	4b11      	ldr	r3, [pc, #68]	@ (8008550 <LL_RCC_GetLPUARTClockFreq+0x88>)
 800850c:	60fb      	str	r3, [r7, #12]
      }
      break;
 800850e:	e016      	b.n	800853e <LL_RCC_GetLPUARTClockFreq+0x76>

    case LL_RCC_LPUART1_CLKSOURCE_LSE:    /* LPUART1 Clock is LSE Osc. */
      if (LL_RCC_LSE_IsReady() == 1U)
 8008510:	f7ff fd68 	bl	8007fe4 <LL_RCC_LSE_IsReady>
 8008514:	4603      	mov	r3, r0
 8008516:	2b01      	cmp	r3, #1
 8008518:	d113      	bne.n	8008542 <LL_RCC_GetLPUARTClockFreq+0x7a>
      {
        lpuart_frequency = LSE_VALUE;
 800851a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800851e:	60fb      	str	r3, [r7, #12]
      }
      break;
 8008520:	e00f      	b.n	8008542 <LL_RCC_GetLPUARTClockFreq+0x7a>

    case LL_RCC_LPUART1_CLKSOURCE_PCLK3:  /* LPUART1 Clock is PCLK3 */
      lpuart_frequency = RCC_GetPCLK3ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8008522:	f000 f817 	bl	8008554 <RCC_GetSystemClockFreq>
 8008526:	4603      	mov	r3, r0
 8008528:	4618      	mov	r0, r3
 800852a:	f000 f8b1 	bl	8008690 <RCC_GetHCLKClockFreq>
 800852e:	4603      	mov	r3, r0
 8008530:	4618      	mov	r0, r3
 8008532:	f000 f8eb 	bl	800870c <RCC_GetPCLK3ClockFreq>
 8008536:	60f8      	str	r0, [r7, #12]
      break;
 8008538:	e004      	b.n	8008544 <LL_RCC_GetLPUARTClockFreq+0x7c>

    default:
      /* unreachable code */
      break;
 800853a:	bf00      	nop
 800853c:	e002      	b.n	8008544 <LL_RCC_GetLPUARTClockFreq+0x7c>
      break;
 800853e:	bf00      	nop
 8008540:	e000      	b.n	8008544 <LL_RCC_GetLPUARTClockFreq+0x7c>
      break;
 8008542:	bf00      	nop
  }

  return lpuart_frequency;
 8008544:	68fb      	ldr	r3, [r7, #12]
}
 8008546:	4618      	mov	r0, r3
 8008548:	3710      	adds	r7, #16
 800854a:	46bd      	mov	sp, r7
 800854c:	bd80      	pop	{r7, pc}
 800854e:	bf00      	nop
 8008550:	00f42400 	.word	0x00f42400

08008554 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
static uint32_t RCC_GetSystemClockFreq(void)
{
 8008554:	b580      	push	{r7, lr}
 8008556:	b082      	sub	sp, #8
 8008558:	af00      	add	r7, sp, #0
  uint32_t frequency;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800855a:	f7ff fd87 	bl	800806c <LL_RCC_GetSysClkSource>
 800855e:	4603      	mov	r3, r0
 8008560:	2b0c      	cmp	r3, #12
 8008562:	d859      	bhi.n	8008618 <RCC_GetSystemClockFreq+0xc4>
 8008564:	a201      	add	r2, pc, #4	@ (adr r2, 800856c <RCC_GetSystemClockFreq+0x18>)
 8008566:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800856a:	bf00      	nop
 800856c:	080085a1 	.word	0x080085a1
 8008570:	08008619 	.word	0x08008619
 8008574:	08008619 	.word	0x08008619
 8008578:	08008619 	.word	0x08008619
 800857c:	08008605 	.word	0x08008605
 8008580:	08008619 	.word	0x08008619
 8008584:	08008619 	.word	0x08008619
 8008588:	08008619 	.word	0x08008619
 800858c:	0800860b 	.word	0x0800860b
 8008590:	08008619 	.word	0x08008619
 8008594:	08008619 	.word	0x08008619
 8008598:	08008619 	.word	0x08008619
 800859c:	08008611 	.word	0x08008611
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_MSIS:   /* MSIS used as system clock source */
      frequency = __LL_RCC_CALC_MSIS_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80085a0:	f7ff fd34 	bl	800800c <LL_RCC_MSI_IsEnabledRangeSelect>
 80085a4:	4603      	mov	r3, r0
 80085a6:	2b01      	cmp	r3, #1
 80085a8:	d115      	bne.n	80085d6 <RCC_GetSystemClockFreq+0x82>
 80085aa:	f7ff fd2f 	bl	800800c <LL_RCC_MSI_IsEnabledRangeSelect>
 80085ae:	4603      	mov	r3, r0
 80085b0:	2b01      	cmp	r3, #1
 80085b2:	d106      	bne.n	80085c2 <RCC_GetSystemClockFreq+0x6e>
 80085b4:	f7ff fd3e 	bl	8008034 <LL_RCC_MSIS_GetRange>
 80085b8:	4603      	mov	r3, r0
 80085ba:	0f1b      	lsrs	r3, r3, #28
 80085bc:	f003 030f 	and.w	r3, r3, #15
 80085c0:	e005      	b.n	80085ce <RCC_GetSystemClockFreq+0x7a>
 80085c2:	f7ff fd45 	bl	8008050 <LL_RCC_MSIS_GetRangeAfterStandby>
 80085c6:	4603      	mov	r3, r0
 80085c8:	0f1b      	lsrs	r3, r3, #28
 80085ca:	f003 030f 	and.w	r3, r3, #15
 80085ce:	4a2e      	ldr	r2, [pc, #184]	@ (8008688 <RCC_GetSystemClockFreq+0x134>)
 80085d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80085d4:	e014      	b.n	8008600 <RCC_GetSystemClockFreq+0xac>
 80085d6:	f7ff fd19 	bl	800800c <LL_RCC_MSI_IsEnabledRangeSelect>
 80085da:	4603      	mov	r3, r0
 80085dc:	2b01      	cmp	r3, #1
 80085de:	d106      	bne.n	80085ee <RCC_GetSystemClockFreq+0x9a>
 80085e0:	f7ff fd28 	bl	8008034 <LL_RCC_MSIS_GetRange>
 80085e4:	4603      	mov	r3, r0
 80085e6:	0b1b      	lsrs	r3, r3, #12
 80085e8:	f003 030f 	and.w	r3, r3, #15
 80085ec:	e005      	b.n	80085fa <RCC_GetSystemClockFreq+0xa6>
 80085ee:	f7ff fd2f 	bl	8008050 <LL_RCC_MSIS_GetRangeAfterStandby>
 80085f2:	4603      	mov	r3, r0
 80085f4:	0b1b      	lsrs	r3, r3, #12
 80085f6:	f003 030f 	and.w	r3, r3, #15
 80085fa:	4a23      	ldr	r2, [pc, #140]	@ (8008688 <RCC_GetSystemClockFreq+0x134>)
 80085fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008600:	607b      	str	r3, [r7, #4]
                                          ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                           LL_RCC_MSIS_GetRange() :
                                           LL_RCC_MSIS_GetRangeAfterStandby()));
      break;
 8008602:	e03b      	b.n	800867c <RCC_GetSystemClockFreq+0x128>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:   /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8008604:	4b21      	ldr	r3, [pc, #132]	@ (800868c <RCC_GetSystemClockFreq+0x138>)
 8008606:	607b      	str	r3, [r7, #4]
      break;
 8008608:	e038      	b.n	800867c <RCC_GetSystemClockFreq+0x128>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:   /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 800860a:	4b20      	ldr	r3, [pc, #128]	@ (800868c <RCC_GetSystemClockFreq+0x138>)
 800860c:	607b      	str	r3, [r7, #4]
      break;
 800860e:	e035      	b.n	800867c <RCC_GetSystemClockFreq+0x128>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL1:  /* PLL1 used as system clock  source */
      frequency = RCC_PLL1_GetFreqDomain_SYS();
 8008610:	f000 f890 	bl	8008734 <RCC_PLL1_GetFreqDomain_SYS>
 8008614:	6078      	str	r0, [r7, #4]
      break;
 8008616:	e031      	b.n	800867c <RCC_GetSystemClockFreq+0x128>

    default:
      frequency = __LL_RCC_CALC_MSIS_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8008618:	f7ff fcf8 	bl	800800c <LL_RCC_MSI_IsEnabledRangeSelect>
 800861c:	4603      	mov	r3, r0
 800861e:	2b01      	cmp	r3, #1
 8008620:	d115      	bne.n	800864e <RCC_GetSystemClockFreq+0xfa>
 8008622:	f7ff fcf3 	bl	800800c <LL_RCC_MSI_IsEnabledRangeSelect>
 8008626:	4603      	mov	r3, r0
 8008628:	2b01      	cmp	r3, #1
 800862a:	d106      	bne.n	800863a <RCC_GetSystemClockFreq+0xe6>
 800862c:	f7ff fd02 	bl	8008034 <LL_RCC_MSIS_GetRange>
 8008630:	4603      	mov	r3, r0
 8008632:	0f1b      	lsrs	r3, r3, #28
 8008634:	f003 030f 	and.w	r3, r3, #15
 8008638:	e005      	b.n	8008646 <RCC_GetSystemClockFreq+0xf2>
 800863a:	f7ff fd09 	bl	8008050 <LL_RCC_MSIS_GetRangeAfterStandby>
 800863e:	4603      	mov	r3, r0
 8008640:	0f1b      	lsrs	r3, r3, #28
 8008642:	f003 030f 	and.w	r3, r3, #15
 8008646:	4a10      	ldr	r2, [pc, #64]	@ (8008688 <RCC_GetSystemClockFreq+0x134>)
 8008648:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800864c:	e014      	b.n	8008678 <RCC_GetSystemClockFreq+0x124>
 800864e:	f7ff fcdd 	bl	800800c <LL_RCC_MSI_IsEnabledRangeSelect>
 8008652:	4603      	mov	r3, r0
 8008654:	2b01      	cmp	r3, #1
 8008656:	d106      	bne.n	8008666 <RCC_GetSystemClockFreq+0x112>
 8008658:	f7ff fcec 	bl	8008034 <LL_RCC_MSIS_GetRange>
 800865c:	4603      	mov	r3, r0
 800865e:	0b1b      	lsrs	r3, r3, #12
 8008660:	f003 030f 	and.w	r3, r3, #15
 8008664:	e005      	b.n	8008672 <RCC_GetSystemClockFreq+0x11e>
 8008666:	f7ff fcf3 	bl	8008050 <LL_RCC_MSIS_GetRangeAfterStandby>
 800866a:	4603      	mov	r3, r0
 800866c:	0b1b      	lsrs	r3, r3, #12
 800866e:	f003 030f 	and.w	r3, r3, #15
 8008672:	4a05      	ldr	r2, [pc, #20]	@ (8008688 <RCC_GetSystemClockFreq+0x134>)
 8008674:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008678:	607b      	str	r3, [r7, #4]
                                          ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                           LL_RCC_MSIS_GetRange() :
                                           LL_RCC_MSIS_GetRangeAfterStandby()));
      break;
 800867a:	bf00      	nop
  }

  return frequency;
 800867c:	687b      	ldr	r3, [r7, #4]
}
 800867e:	4618      	mov	r0, r3
 8008680:	3708      	adds	r7, #8
 8008682:	46bd      	mov	sp, r7
 8008684:	bd80      	pop	{r7, pc}
 8008686:	bf00      	nop
 8008688:	0800929c 	.word	0x0800929c
 800868c:	00f42400 	.word	0x00f42400

08008690 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8008690:	b580      	push	{r7, lr}
 8008692:	b082      	sub	sp, #8
 8008694:	af00      	add	r7, sp, #0
 8008696:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8008698:	f7ff fcf6 	bl	8008088 <LL_RCC_GetAHBPrescaler>
 800869c:	4603      	mov	r3, r0
 800869e:	f003 030f 	and.w	r3, r3, #15
 80086a2:	4a04      	ldr	r2, [pc, #16]	@ (80086b4 <RCC_GetHCLKClockFreq+0x24>)
 80086a4:	5cd3      	ldrb	r3, [r2, r3]
 80086a6:	461a      	mov	r2, r3
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	40d3      	lsrs	r3, r2
}
 80086ac:	4618      	mov	r0, r3
 80086ae:	3708      	adds	r7, #8
 80086b0:	46bd      	mov	sp, r7
 80086b2:	bd80      	pop	{r7, pc}
 80086b4:	08009284 	.word	0x08009284

080086b8 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 80086b8:	b580      	push	{r7, lr}
 80086ba:	b082      	sub	sp, #8
 80086bc:	af00      	add	r7, sp, #0
 80086be:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80086c0:	f7ff fcf0 	bl	80080a4 <LL_RCC_GetAPB1Prescaler>
 80086c4:	4603      	mov	r3, r0
 80086c6:	091b      	lsrs	r3, r3, #4
 80086c8:	f003 0307 	and.w	r3, r3, #7
 80086cc:	4a04      	ldr	r2, [pc, #16]	@ (80086e0 <RCC_GetPCLK1ClockFreq+0x28>)
 80086ce:	5cd3      	ldrb	r3, [r2, r3]
 80086d0:	461a      	mov	r2, r3
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	40d3      	lsrs	r3, r2
}
 80086d6:	4618      	mov	r0, r3
 80086d8:	3708      	adds	r7, #8
 80086da:	46bd      	mov	sp, r7
 80086dc:	bd80      	pop	{r7, pc}
 80086de:	bf00      	nop
 80086e0:	08009294 	.word	0x08009294

080086e4 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 80086e4:	b580      	push	{r7, lr}
 80086e6:	b082      	sub	sp, #8
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 80086ec:	f7ff fce8 	bl	80080c0 <LL_RCC_GetAPB2Prescaler>
 80086f0:	4603      	mov	r3, r0
 80086f2:	0a1b      	lsrs	r3, r3, #8
 80086f4:	4a04      	ldr	r2, [pc, #16]	@ (8008708 <RCC_GetPCLK2ClockFreq+0x24>)
 80086f6:	5cd3      	ldrb	r3, [r2, r3]
 80086f8:	461a      	mov	r2, r3
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	40d3      	lsrs	r3, r2
}
 80086fe:	4618      	mov	r0, r3
 8008700:	3708      	adds	r7, #8
 8008702:	46bd      	mov	sp, r7
 8008704:	bd80      	pop	{r7, pc}
 8008706:	bf00      	nop
 8008708:	08009294 	.word	0x08009294

0800870c <RCC_GetPCLK3ClockFreq>:
  * @brief  Return PCLK3 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK3 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK3ClockFreq(uint32_t HCLK_Frequency)
{
 800870c:	b580      	push	{r7, lr}
 800870e:	b082      	sub	sp, #8
 8008710:	af00      	add	r7, sp, #0
 8008712:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK3_FREQ(HCLK_Frequency, LL_RCC_GetAPB3Prescaler());
 8008714:	f7ff fce2 	bl	80080dc <LL_RCC_GetAPB3Prescaler>
 8008718:	4603      	mov	r3, r0
 800871a:	091b      	lsrs	r3, r3, #4
 800871c:	4a04      	ldr	r2, [pc, #16]	@ (8008730 <RCC_GetPCLK3ClockFreq+0x24>)
 800871e:	5cd3      	ldrb	r3, [r2, r3]
 8008720:	461a      	mov	r2, r3
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	40d3      	lsrs	r3, r2
}
 8008726:	4618      	mov	r0, r3
 8008728:	3708      	adds	r7, #8
 800872a:	46bd      	mov	sp, r7
 800872c:	bd80      	pop	{r7, pc}
 800872e:	bf00      	nop
 8008730:	08009294 	.word	0x08009294

08008734 <RCC_PLL1_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL1 clock frequency used for system domain
  * @retval PLL1 clock frequency (in Hz)
  */
static uint32_t RCC_PLL1_GetFreqDomain_SYS(void)
{
 8008734:	b590      	push	{r4, r7, lr}
 8008736:	b083      	sub	sp, #12
 8008738:	af00      	add	r7, sp, #0
  uint32_t pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL1_GetMainSource();
 800873a:	f7ff fd27 	bl	800818c <LL_RCC_PLL1_GetMainSource>
 800873e:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8008740:	683b      	ldr	r3, [r7, #0]
 8008742:	2b03      	cmp	r3, #3
 8008744:	d03e      	beq.n	80087c4 <RCC_PLL1_GetFreqDomain_SYS+0x90>
 8008746:	683b      	ldr	r3, [r7, #0]
 8008748:	2b03      	cmp	r3, #3
 800874a:	d83e      	bhi.n	80087ca <RCC_PLL1_GetFreqDomain_SYS+0x96>
 800874c:	683b      	ldr	r3, [r7, #0]
 800874e:	2b01      	cmp	r3, #1
 8008750:	d003      	beq.n	800875a <RCC_PLL1_GetFreqDomain_SYS+0x26>
 8008752:	683b      	ldr	r3, [r7, #0]
 8008754:	2b02      	cmp	r3, #2
 8008756:	d032      	beq.n	80087be <RCC_PLL1_GetFreqDomain_SYS+0x8a>
 8008758:	e037      	b.n	80087ca <RCC_PLL1_GetFreqDomain_SYS+0x96>
  {
    case LL_RCC_PLL1SOURCE_MSIS:  /* MSIS used as PLL1 clock source */
      pllinputfreq = __LL_RCC_CALC_MSIS_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 800875a:	f7ff fc57 	bl	800800c <LL_RCC_MSI_IsEnabledRangeSelect>
 800875e:	4603      	mov	r3, r0
 8008760:	2b01      	cmp	r3, #1
 8008762:	d115      	bne.n	8008790 <RCC_PLL1_GetFreqDomain_SYS+0x5c>
 8008764:	f7ff fc52 	bl	800800c <LL_RCC_MSI_IsEnabledRangeSelect>
 8008768:	4603      	mov	r3, r0
 800876a:	2b01      	cmp	r3, #1
 800876c:	d106      	bne.n	800877c <RCC_PLL1_GetFreqDomain_SYS+0x48>
 800876e:	f7ff fc61 	bl	8008034 <LL_RCC_MSIS_GetRange>
 8008772:	4603      	mov	r3, r0
 8008774:	0f1b      	lsrs	r3, r3, #28
 8008776:	f003 030f 	and.w	r3, r3, #15
 800877a:	e005      	b.n	8008788 <RCC_PLL1_GetFreqDomain_SYS+0x54>
 800877c:	f7ff fc68 	bl	8008050 <LL_RCC_MSIS_GetRangeAfterStandby>
 8008780:	4603      	mov	r3, r0
 8008782:	0f1b      	lsrs	r3, r3, #28
 8008784:	f003 030f 	and.w	r3, r3, #15
 8008788:	4a33      	ldr	r2, [pc, #204]	@ (8008858 <RCC_PLL1_GetFreqDomain_SYS+0x124>)
 800878a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800878e:	e014      	b.n	80087ba <RCC_PLL1_GetFreqDomain_SYS+0x86>
 8008790:	f7ff fc3c 	bl	800800c <LL_RCC_MSI_IsEnabledRangeSelect>
 8008794:	4603      	mov	r3, r0
 8008796:	2b01      	cmp	r3, #1
 8008798:	d106      	bne.n	80087a8 <RCC_PLL1_GetFreqDomain_SYS+0x74>
 800879a:	f7ff fc4b 	bl	8008034 <LL_RCC_MSIS_GetRange>
 800879e:	4603      	mov	r3, r0
 80087a0:	0b1b      	lsrs	r3, r3, #12
 80087a2:	f003 030f 	and.w	r3, r3, #15
 80087a6:	e005      	b.n	80087b4 <RCC_PLL1_GetFreqDomain_SYS+0x80>
 80087a8:	f7ff fc52 	bl	8008050 <LL_RCC_MSIS_GetRangeAfterStandby>
 80087ac:	4603      	mov	r3, r0
 80087ae:	0b1b      	lsrs	r3, r3, #12
 80087b0:	f003 030f 	and.w	r3, r3, #15
 80087b4:	4a28      	ldr	r2, [pc, #160]	@ (8008858 <RCC_PLL1_GetFreqDomain_SYS+0x124>)
 80087b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80087ba:	607b      	str	r3, [r7, #4]
                                             ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                              LL_RCC_MSIS_GetRange() :
                                              LL_RCC_MSIS_GetRangeAfterStandby()));
      break;
 80087bc:	e037      	b.n	800882e <RCC_PLL1_GetFreqDomain_SYS+0xfa>

    case LL_RCC_PLL1SOURCE_HSI:  /* HSI used as PLL1 clock source */
      pllinputfreq = HSI_VALUE;
 80087be:	4b27      	ldr	r3, [pc, #156]	@ (800885c <RCC_PLL1_GetFreqDomain_SYS+0x128>)
 80087c0:	607b      	str	r3, [r7, #4]
      break;
 80087c2:	e034      	b.n	800882e <RCC_PLL1_GetFreqDomain_SYS+0xfa>

    case LL_RCC_PLL1SOURCE_HSE:  /* HSE used as PLL1 clock source */
      pllinputfreq = HSE_VALUE;
 80087c4:	4b25      	ldr	r3, [pc, #148]	@ (800885c <RCC_PLL1_GetFreqDomain_SYS+0x128>)
 80087c6:	607b      	str	r3, [r7, #4]
      break;
 80087c8:	e031      	b.n	800882e <RCC_PLL1_GetFreqDomain_SYS+0xfa>

    default:
      pllinputfreq = __LL_RCC_CALC_MSIS_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80087ca:	f7ff fc1f 	bl	800800c <LL_RCC_MSI_IsEnabledRangeSelect>
 80087ce:	4603      	mov	r3, r0
 80087d0:	2b01      	cmp	r3, #1
 80087d2:	d115      	bne.n	8008800 <RCC_PLL1_GetFreqDomain_SYS+0xcc>
 80087d4:	f7ff fc1a 	bl	800800c <LL_RCC_MSI_IsEnabledRangeSelect>
 80087d8:	4603      	mov	r3, r0
 80087da:	2b01      	cmp	r3, #1
 80087dc:	d106      	bne.n	80087ec <RCC_PLL1_GetFreqDomain_SYS+0xb8>
 80087de:	f7ff fc29 	bl	8008034 <LL_RCC_MSIS_GetRange>
 80087e2:	4603      	mov	r3, r0
 80087e4:	0f1b      	lsrs	r3, r3, #28
 80087e6:	f003 030f 	and.w	r3, r3, #15
 80087ea:	e005      	b.n	80087f8 <RCC_PLL1_GetFreqDomain_SYS+0xc4>
 80087ec:	f7ff fc30 	bl	8008050 <LL_RCC_MSIS_GetRangeAfterStandby>
 80087f0:	4603      	mov	r3, r0
 80087f2:	0f1b      	lsrs	r3, r3, #28
 80087f4:	f003 030f 	and.w	r3, r3, #15
 80087f8:	4a17      	ldr	r2, [pc, #92]	@ (8008858 <RCC_PLL1_GetFreqDomain_SYS+0x124>)
 80087fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80087fe:	e014      	b.n	800882a <RCC_PLL1_GetFreqDomain_SYS+0xf6>
 8008800:	f7ff fc04 	bl	800800c <LL_RCC_MSI_IsEnabledRangeSelect>
 8008804:	4603      	mov	r3, r0
 8008806:	2b01      	cmp	r3, #1
 8008808:	d106      	bne.n	8008818 <RCC_PLL1_GetFreqDomain_SYS+0xe4>
 800880a:	f7ff fc13 	bl	8008034 <LL_RCC_MSIS_GetRange>
 800880e:	4603      	mov	r3, r0
 8008810:	0b1b      	lsrs	r3, r3, #12
 8008812:	f003 030f 	and.w	r3, r3, #15
 8008816:	e005      	b.n	8008824 <RCC_PLL1_GetFreqDomain_SYS+0xf0>
 8008818:	f7ff fc1a 	bl	8008050 <LL_RCC_MSIS_GetRangeAfterStandby>
 800881c:	4603      	mov	r3, r0
 800881e:	0b1b      	lsrs	r3, r3, #12
 8008820:	f003 030f 	and.w	r3, r3, #15
 8008824:	4a0c      	ldr	r2, [pc, #48]	@ (8008858 <RCC_PLL1_GetFreqDomain_SYS+0x124>)
 8008826:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800882a:	607b      	str	r3, [r7, #4]
                                             ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                              LL_RCC_MSIS_GetRange() :
                                              LL_RCC_MSIS_GetRangeAfterStandby()));
      break;
 800882c:	bf00      	nop
  }
  return __LL_RCC_CALC_PLL1CLK_FREQ(pllinputfreq, LL_RCC_PLL1_GetDivider(),
 800882e:	f7ff fcd9 	bl	80081e4 <LL_RCC_PLL1_GetDivider>
 8008832:	4602      	mov	r2, r0
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	fbb3 f4f2 	udiv	r4, r3, r2
 800883a:	f7ff fcb5 	bl	80081a8 <LL_RCC_PLL1_GetN>
 800883e:	4603      	mov	r3, r0
 8008840:	fb03 f404 	mul.w	r4, r3, r4
 8008844:	f7ff fcbe 	bl	80081c4 <LL_RCC_PLL1_GetR>
 8008848:	4603      	mov	r3, r0
 800884a:	fbb4 f3f3 	udiv	r3, r4, r3
                                    LL_RCC_PLL1_GetN(), LL_RCC_PLL1_GetR());
}
 800884e:	4618      	mov	r0, r3
 8008850:	370c      	adds	r7, #12
 8008852:	46bd      	mov	sp, r7
 8008854:	bd90      	pop	{r4, r7, pc}
 8008856:	bf00      	nop
 8008858:	0800929c 	.word	0x0800929c
 800885c:	00f42400 	.word	0x00f42400

08008860 <LL_RTC_SetHourFormat>:
{
 8008860:	b480      	push	{r7}
 8008862:	b083      	sub	sp, #12
 8008864:	af00      	add	r7, sp, #0
 8008866:	6078      	str	r0, [r7, #4]
 8008868:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->CR, RTC_CR_FMT, HourFormat);
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	699b      	ldr	r3, [r3, #24]
 800886e:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8008872:	683b      	ldr	r3, [r7, #0]
 8008874:	431a      	orrs	r2, r3
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	619a      	str	r2, [r3, #24]
}
 800887a:	bf00      	nop
 800887c:	370c      	adds	r7, #12
 800887e:	46bd      	mov	sp, r7
 8008880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008884:	4770      	bx	lr

08008886 <LL_RTC_EnableInitMode>:
{
 8008886:	b480      	push	{r7}
 8008888:	b083      	sub	sp, #12
 800888a:	af00      	add	r7, sp, #0
 800888c:	6078      	str	r0, [r7, #4]
  SET_BIT(RTCx->ICSR, RTC_ICSR_INIT);
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	68db      	ldr	r3, [r3, #12]
 8008892:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	60da      	str	r2, [r3, #12]
}
 800889a:	bf00      	nop
 800889c:	370c      	adds	r7, #12
 800889e:	46bd      	mov	sp, r7
 80088a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a4:	4770      	bx	lr

080088a6 <LL_RTC_DisableInitMode>:
{
 80088a6:	b480      	push	{r7}
 80088a8:	b083      	sub	sp, #12
 80088aa:	af00      	add	r7, sp, #0
 80088ac:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RTCx->ICSR, RTC_ICSR_INIT);
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	68db      	ldr	r3, [r3, #12]
 80088b2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	60da      	str	r2, [r3, #12]
}
 80088ba:	bf00      	nop
 80088bc:	370c      	adds	r7, #12
 80088be:	46bd      	mov	sp, r7
 80088c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c4:	4770      	bx	lr

080088c6 <LL_RTC_SetAsynchPrescaler>:
{
 80088c6:	b480      	push	{r7}
 80088c8:	b083      	sub	sp, #12
 80088ca:	af00      	add	r7, sp, #0
 80088cc:	6078      	str	r0, [r7, #4]
 80088ce:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->PRER, RTC_PRER_PREDIV_A, AsynchPrescaler << RTC_PRER_PREDIV_A_Pos);
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	691b      	ldr	r3, [r3, #16]
 80088d4:	f423 02fe 	bic.w	r2, r3, #8323072	@ 0x7f0000
 80088d8:	683b      	ldr	r3, [r7, #0]
 80088da:	041b      	lsls	r3, r3, #16
 80088dc:	431a      	orrs	r2, r3
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	611a      	str	r2, [r3, #16]
}
 80088e2:	bf00      	nop
 80088e4:	370c      	adds	r7, #12
 80088e6:	46bd      	mov	sp, r7
 80088e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ec:	4770      	bx	lr

080088ee <LL_RTC_SetSynchPrescaler>:
{
 80088ee:	b480      	push	{r7}
 80088f0:	b083      	sub	sp, #12
 80088f2:	af00      	add	r7, sp, #0
 80088f4:	6078      	str	r0, [r7, #4]
 80088f6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RTCx->PRER, RTC_PRER_PREDIV_S, SynchPrescaler);
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	691b      	ldr	r3, [r3, #16]
 80088fc:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8008900:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008904:	683a      	ldr	r2, [r7, #0]
 8008906:	431a      	orrs	r2, r3
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	611a      	str	r2, [r3, #16]
}
 800890c:	bf00      	nop
 800890e:	370c      	adds	r7, #12
 8008910:	46bd      	mov	sp, r7
 8008912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008916:	4770      	bx	lr

08008918 <LL_RTC_EnableWriteProtection>:
{
 8008918:	b480      	push	{r7}
 800891a:	b083      	sub	sp, #12
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	22ff      	movs	r2, #255	@ 0xff
 8008924:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8008926:	bf00      	nop
 8008928:	370c      	adds	r7, #12
 800892a:	46bd      	mov	sp, r7
 800892c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008930:	4770      	bx	lr

08008932 <LL_RTC_DisableWriteProtection>:
{
 8008932:	b480      	push	{r7}
 8008934:	b083      	sub	sp, #12
 8008936:	af00      	add	r7, sp, #0
 8008938:	6078      	str	r0, [r7, #4]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	22ca      	movs	r2, #202	@ 0xca
 800893e:	625a      	str	r2, [r3, #36]	@ 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	2253      	movs	r2, #83	@ 0x53
 8008944:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8008946:	bf00      	nop
 8008948:	370c      	adds	r7, #12
 800894a:	46bd      	mov	sp, r7
 800894c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008950:	4770      	bx	lr

08008952 <LL_RTC_IsActiveFlag_INIT>:
{
 8008952:	b480      	push	{r7}
 8008954:	b083      	sub	sp, #12
 8008956:	af00      	add	r7, sp, #0
 8008958:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(RTCx->ICSR, RTC_ICSR_INITF) == (RTC_ICSR_INITF)) ? 1U : 0U);
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	68db      	ldr	r3, [r3, #12]
 800895e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008962:	2b40      	cmp	r3, #64	@ 0x40
 8008964:	d101      	bne.n	800896a <LL_RTC_IsActiveFlag_INIT+0x18>
 8008966:	2301      	movs	r3, #1
 8008968:	e000      	b.n	800896c <LL_RTC_IsActiveFlag_INIT+0x1a>
 800896a:	2300      	movs	r3, #0
}
 800896c:	4618      	mov	r0, r3
 800896e:	370c      	adds	r7, #12
 8008970:	46bd      	mov	sp, r7
 8008972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008976:	4770      	bx	lr

08008978 <LL_SYSTICK_IsActiveCounterFlag>:
  * @note   It can be used in timeout function on application side.
  * @rmtoll STK_CTRL     COUNTFLAG     LL_SYSTICK_IsActiveCounterFlag
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SYSTICK_IsActiveCounterFlag(void)
{
 8008978:	b480      	push	{r7}
 800897a:	af00      	add	r7, sp, #0
  return (((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) == (SysTick_CTRL_COUNTFLAG_Msk)) ? 1UL : 0UL);
 800897c:	4b07      	ldr	r3, [pc, #28]	@ (800899c <LL_SYSTICK_IsActiveCounterFlag+0x24>)
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8008984:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008988:	d101      	bne.n	800898e <LL_SYSTICK_IsActiveCounterFlag+0x16>
 800898a:	2301      	movs	r3, #1
 800898c:	e000      	b.n	8008990 <LL_SYSTICK_IsActiveCounterFlag+0x18>
 800898e:	2300      	movs	r3, #0
}
 8008990:	4618      	mov	r0, r3
 8008992:	46bd      	mov	sp, r7
 8008994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008998:	4770      	bx	lr
 800899a:	bf00      	nop
 800899c:	e000e010 	.word	0xe000e010

080089a0 <LL_RTC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC registers are initialized
  *          - ERROR: RTC registers are not initialized
  */
ErrorStatus LL_RTC_Init(RTC_TypeDef *RTCx, LL_RTC_InitTypeDef *RTC_InitStruct)
{
 80089a0:	b580      	push	{r7, lr}
 80089a2:	b084      	sub	sp, #16
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	6078      	str	r0, [r7, #4]
 80089a8:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80089aa:	2301      	movs	r3, #1
 80089ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_RTC_HOURFORMAT(RTC_InitStruct->HourFormat));
  assert_param(IS_LL_RTC_ASYNCH_PREDIV(RTC_InitStruct->AsynchPrescaler));
  assert_param(IS_LL_RTC_SYNCH_PREDIV(RTC_InitStruct->SynchPrescaler));

  /* Disable the write protection for RTC registers */
  LL_RTC_DisableWriteProtection(RTCx);
 80089ae:	6878      	ldr	r0, [r7, #4]
 80089b0:	f7ff ffbf 	bl	8008932 <LL_RTC_DisableWriteProtection>

  /* Set Initialization mode */
  if (LL_RTC_EnterInitMode(RTCx) != ERROR)
 80089b4:	6878      	ldr	r0, [r7, #4]
 80089b6:	f000 f822 	bl	80089fe <LL_RTC_EnterInitMode>
 80089ba:	4603      	mov	r3, r0
 80089bc:	2b01      	cmp	r3, #1
 80089be:	d016      	beq.n	80089ee <LL_RTC_Init+0x4e>
  {
    /* Set Hour Format */
    LL_RTC_SetHourFormat(RTCx, RTC_InitStruct->HourFormat);
 80089c0:	683b      	ldr	r3, [r7, #0]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	4619      	mov	r1, r3
 80089c6:	6878      	ldr	r0, [r7, #4]
 80089c8:	f7ff ff4a 	bl	8008860 <LL_RTC_SetHourFormat>

    /* Configure Synchronous and Asynchronous prescaler factor */
    LL_RTC_SetSynchPrescaler(RTCx, RTC_InitStruct->SynchPrescaler);
 80089cc:	683b      	ldr	r3, [r7, #0]
 80089ce:	689b      	ldr	r3, [r3, #8]
 80089d0:	4619      	mov	r1, r3
 80089d2:	6878      	ldr	r0, [r7, #4]
 80089d4:	f7ff ff8b 	bl	80088ee <LL_RTC_SetSynchPrescaler>
    LL_RTC_SetAsynchPrescaler(RTCx, RTC_InitStruct->AsynchPrescaler);
 80089d8:	683b      	ldr	r3, [r7, #0]
 80089da:	685b      	ldr	r3, [r3, #4]
 80089dc:	4619      	mov	r1, r3
 80089de:	6878      	ldr	r0, [r7, #4]
 80089e0:	f7ff ff71 	bl	80088c6 <LL_RTC_SetAsynchPrescaler>

    /* Exit Initialization mode */
    LL_RTC_DisableInitMode(RTCx);
 80089e4:	6878      	ldr	r0, [r7, #4]
 80089e6:	f7ff ff5e 	bl	80088a6 <LL_RTC_DisableInitMode>

    status = SUCCESS;
 80089ea:	2300      	movs	r3, #0
 80089ec:	73fb      	strb	r3, [r7, #15]
  }
  /* Enable the write protection for RTC registers */
  LL_RTC_EnableWriteProtection(RTCx);
 80089ee:	6878      	ldr	r0, [r7, #4]
 80089f0:	f7ff ff92 	bl	8008918 <LL_RTC_EnableWriteProtection>

  return status;
 80089f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80089f6:	4618      	mov	r0, r3
 80089f8:	3710      	adds	r7, #16
 80089fa:	46bd      	mov	sp, r7
 80089fc:	bd80      	pop	{r7, pc}

080089fe <LL_RTC_EnterInitMode>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: RTC is in Init mode
  *          - ERROR: RTC is not in Init mode
  */
ErrorStatus LL_RTC_EnterInitMode(RTC_TypeDef *RTCx)
{
 80089fe:	b580      	push	{r7, lr}
 8008a00:	b086      	sub	sp, #24
 8008a02:	af00      	add	r7, sp, #0
 8008a04:	6078      	str	r0, [r7, #4]
  __IO uint32_t timeout = RTC_INITMODE_TIMEOUT;
 8008a06:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8008a0a:	60fb      	str	r3, [r7, #12]
  ErrorStatus status = SUCCESS;
 8008a0c:	2300      	movs	r3, #0
 8008a0e:	75fb      	strb	r3, [r7, #23]

  /* Check the parameter */
  assert_param(IS_RTC_ALL_INSTANCE(RTCx));

  /* Check if the Initialization mode is set */
  if (LL_RTC_IsActiveFlag_INIT(RTCx) == 0U)
 8008a10:	6878      	ldr	r0, [r7, #4]
 8008a12:	f7ff ff9e 	bl	8008952 <LL_RTC_IsActiveFlag_INIT>
 8008a16:	4603      	mov	r3, r0
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d11e      	bne.n	8008a5a <LL_RTC_EnterInitMode+0x5c>
  {
    /* Set the Initialization mode */
    LL_RTC_EnableInitMode(RTCx);
 8008a1c:	6878      	ldr	r0, [r7, #4]
 8008a1e:	f7ff ff32 	bl	8008886 <LL_RTC_EnableInitMode>

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    tmp = LL_RTC_IsActiveFlag_INIT(RTCx);
 8008a22:	6878      	ldr	r0, [r7, #4]
 8008a24:	f7ff ff95 	bl	8008952 <LL_RTC_IsActiveFlag_INIT>
 8008a28:	6138      	str	r0, [r7, #16]
    while ((timeout != 0U) && (tmp != 1U))
 8008a2a:	e010      	b.n	8008a4e <LL_RTC_EnterInitMode+0x50>
    {
      if (LL_SYSTICK_IsActiveCounterFlag() == 1U)
 8008a2c:	f7ff ffa4 	bl	8008978 <LL_SYSTICK_IsActiveCounterFlag>
 8008a30:	4603      	mov	r3, r0
 8008a32:	2b01      	cmp	r3, #1
 8008a34:	d102      	bne.n	8008a3c <LL_RTC_EnterInitMode+0x3e>
      {
        timeout --;
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	3b01      	subs	r3, #1
 8008a3a:	60fb      	str	r3, [r7, #12]
      }
      tmp = LL_RTC_IsActiveFlag_INIT(RTCx);
 8008a3c:	6878      	ldr	r0, [r7, #4]
 8008a3e:	f7ff ff88 	bl	8008952 <LL_RTC_IsActiveFlag_INIT>
 8008a42:	6138      	str	r0, [r7, #16]
      if (timeout == 0U)
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d101      	bne.n	8008a4e <LL_RTC_EnterInitMode+0x50>
      {
        status = ERROR;
 8008a4a:	2301      	movs	r3, #1
 8008a4c:	75fb      	strb	r3, [r7, #23]
    while ((timeout != 0U) && (tmp != 1U))
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d002      	beq.n	8008a5a <LL_RTC_EnterInitMode+0x5c>
 8008a54:	693b      	ldr	r3, [r7, #16]
 8008a56:	2b01      	cmp	r3, #1
 8008a58:	d1e8      	bne.n	8008a2c <LL_RTC_EnterInitMode+0x2e>
      }
    }
  }
  return status;
 8008a5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a5c:	4618      	mov	r0, r3
 8008a5e:	3718      	adds	r7, #24
 8008a60:	46bd      	mov	sp, r7
 8008a62:	bd80      	pop	{r7, pc}

08008a64 <LL_USART_IsEnabled>:
{
 8008a64:	b480      	push	{r7}
 8008a66:	b083      	sub	sp, #12
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	f003 0301 	and.w	r3, r3, #1
 8008a74:	2b01      	cmp	r3, #1
 8008a76:	d101      	bne.n	8008a7c <LL_USART_IsEnabled+0x18>
 8008a78:	2301      	movs	r3, #1
 8008a7a:	e000      	b.n	8008a7e <LL_USART_IsEnabled+0x1a>
 8008a7c:	2300      	movs	r3, #0
}
 8008a7e:	4618      	mov	r0, r3
 8008a80:	370c      	adds	r7, #12
 8008a82:	46bd      	mov	sp, r7
 8008a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a88:	4770      	bx	lr

08008a8a <LL_USART_SetPrescaler>:
{
 8008a8a:	b480      	push	{r7}
 8008a8c:	b083      	sub	sp, #12
 8008a8e:	af00      	add	r7, sp, #0
 8008a90:	6078      	str	r0, [r7, #4]
 8008a92:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->PRESC, USART_PRESC_PRESCALER, (uint16_t)PrescalerValue);
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a98:	f023 030f 	bic.w	r3, r3, #15
 8008a9c:	683a      	ldr	r2, [r7, #0]
 8008a9e:	b292      	uxth	r2, r2
 8008aa0:	431a      	orrs	r2, r3
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8008aa6:	bf00      	nop
 8008aa8:	370c      	adds	r7, #12
 8008aaa:	46bd      	mov	sp, r7
 8008aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab0:	4770      	bx	lr

08008ab2 <LL_USART_SetStopBitsLength>:
{
 8008ab2:	b480      	push	{r7}
 8008ab4:	b083      	sub	sp, #12
 8008ab6:	af00      	add	r7, sp, #0
 8008ab8:	6078      	str	r0, [r7, #4]
 8008aba:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	685b      	ldr	r3, [r3, #4]
 8008ac0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8008ac4:	683b      	ldr	r3, [r7, #0]
 8008ac6:	431a      	orrs	r2, r3
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	605a      	str	r2, [r3, #4]
}
 8008acc:	bf00      	nop
 8008ace:	370c      	adds	r7, #12
 8008ad0:	46bd      	mov	sp, r7
 8008ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad6:	4770      	bx	lr

08008ad8 <LL_USART_SetHWFlowCtrl>:
{
 8008ad8:	b480      	push	{r7}
 8008ada:	b083      	sub	sp, #12
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	6078      	str	r0, [r7, #4]
 8008ae0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	689b      	ldr	r3, [r3, #8]
 8008ae6:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008aea:	683b      	ldr	r3, [r7, #0]
 8008aec:	431a      	orrs	r2, r3
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	609a      	str	r2, [r3, #8]
}
 8008af2:	bf00      	nop
 8008af4:	370c      	adds	r7, #12
 8008af6:	46bd      	mov	sp, r7
 8008af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afc:	4770      	bx	lr
	...

08008b00 <LL_USART_SetBaudRate>:
{
 8008b00:	b480      	push	{r7}
 8008b02:	b087      	sub	sp, #28
 8008b04:	af00      	add	r7, sp, #0
 8008b06:	60f8      	str	r0, [r7, #12]
 8008b08:	60b9      	str	r1, [r7, #8]
 8008b0a:	607a      	str	r2, [r7, #4]
 8008b0c:	603b      	str	r3, [r7, #0]
  if (PrescalerValue > LL_USART_PRESCALER_DIV256)
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	2b0b      	cmp	r3, #11
 8008b12:	d83c      	bhi.n	8008b8e <LL_USART_SetBaudRate+0x8e>
  else if (BaudRate == 0U)
 8008b14:	6a3b      	ldr	r3, [r7, #32]
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d039      	beq.n	8008b8e <LL_USART_SetBaudRate+0x8e>
  else if (OverSampling == LL_USART_OVERSAMPLING_8)
 8008b1a:	683b      	ldr	r3, [r7, #0]
 8008b1c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008b20:	d122      	bne.n	8008b68 <LL_USART_SetBaudRate+0x68>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	b2db      	uxtb	r3, r3
 8008b26:	461a      	mov	r2, r3
 8008b28:	4b1c      	ldr	r3, [pc, #112]	@ (8008b9c <LL_USART_SetBaudRate+0x9c>)
 8008b2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b2e:	68ba      	ldr	r2, [r7, #8]
 8008b30:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b34:	005a      	lsls	r2, r3, #1
 8008b36:	6a3b      	ldr	r3, [r7, #32]
 8008b38:	085b      	lsrs	r3, r3, #1
 8008b3a:	441a      	add	r2, r3
 8008b3c:	6a3b      	ldr	r3, [r7, #32]
 8008b3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b42:	b29b      	uxth	r3, r3
 8008b44:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 8008b46:	697a      	ldr	r2, [r7, #20]
 8008b48:	f64f 73f0 	movw	r3, #65520	@ 0xfff0
 8008b4c:	4013      	ands	r3, r2
 8008b4e:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008b50:	697b      	ldr	r3, [r7, #20]
 8008b52:	085b      	lsrs	r3, r3, #1
 8008b54:	b29b      	uxth	r3, r3
 8008b56:	f003 0307 	and.w	r3, r3, #7
 8008b5a:	693a      	ldr	r2, [r7, #16]
 8008b5c:	4313      	orrs	r3, r2
 8008b5e:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	693a      	ldr	r2, [r7, #16]
 8008b64:	60da      	str	r2, [r3, #12]
}
 8008b66:	e012      	b.n	8008b8e <LL_USART_SetBaudRate+0x8e>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	b2db      	uxtb	r3, r3
 8008b6c:	461a      	mov	r2, r3
 8008b6e:	4b0b      	ldr	r3, [pc, #44]	@ (8008b9c <LL_USART_SetBaudRate+0x9c>)
 8008b70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b74:	68ba      	ldr	r2, [r7, #8]
 8008b76:	fbb2 f2f3 	udiv	r2, r2, r3
 8008b7a:	6a3b      	ldr	r3, [r7, #32]
 8008b7c:	085b      	lsrs	r3, r3, #1
 8008b7e:	441a      	add	r2, r3
 8008b80:	6a3b      	ldr	r3, [r7, #32]
 8008b82:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b86:	b29b      	uxth	r3, r3
 8008b88:	461a      	mov	r2, r3
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	60da      	str	r2, [r3, #12]
}
 8008b8e:	bf00      	nop
 8008b90:	371c      	adds	r7, #28
 8008b92:	46bd      	mov	sp, r7
 8008b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b98:	4770      	bx	lr
 8008b9a:	bf00      	nop
 8008b9c:	08009374 	.word	0x08009374

08008ba0 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 8008ba0:	b580      	push	{r7, lr}
 8008ba2:	b086      	sub	sp, #24
 8008ba4:	af02      	add	r7, sp, #8
 8008ba6:	6078      	str	r0, [r7, #4]
 8008ba8:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8008baa:	2301      	movs	r3, #1
 8008bac:	73fb      	strb	r3, [r7, #15]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8008bae:	2300      	movs	r3, #0
 8008bb0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8008bb2:	6878      	ldr	r0, [r7, #4]
 8008bb4:	f7ff ff56 	bl	8008a64 <LL_USART_IsEnabled>
 8008bb8:	4603      	mov	r3, r0
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d165      	bne.n	8008c8a <LL_USART_Init+0xea>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681a      	ldr	r2, [r3, #0]
 8008bc2:	4b34      	ldr	r3, [pc, #208]	@ (8008c94 <LL_USART_Init+0xf4>)
 8008bc4:	4013      	ands	r3, r2
 8008bc6:	683a      	ldr	r2, [r7, #0]
 8008bc8:	6891      	ldr	r1, [r2, #8]
 8008bca:	683a      	ldr	r2, [r7, #0]
 8008bcc:	6912      	ldr	r2, [r2, #16]
 8008bce:	4311      	orrs	r1, r2
 8008bd0:	683a      	ldr	r2, [r7, #0]
 8008bd2:	6952      	ldr	r2, [r2, #20]
 8008bd4:	4311      	orrs	r1, r2
 8008bd6:	683a      	ldr	r2, [r7, #0]
 8008bd8:	69d2      	ldr	r2, [r2, #28]
 8008bda:	430a      	orrs	r2, r1
 8008bdc:	431a      	orrs	r2, r3
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8008be2:	683b      	ldr	r3, [r7, #0]
 8008be4:	68db      	ldr	r3, [r3, #12]
 8008be6:	4619      	mov	r1, r3
 8008be8:	6878      	ldr	r0, [r7, #4]
 8008bea:	f7ff ff62 	bl	8008ab2 <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8008bee:	683b      	ldr	r3, [r7, #0]
 8008bf0:	699b      	ldr	r3, [r3, #24]
 8008bf2:	4619      	mov	r1, r3
 8008bf4:	6878      	ldr	r0, [r7, #4]
 8008bf6:	f7ff ff6f 	bl	8008ad8 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	4a26      	ldr	r2, [pc, #152]	@ (8008c98 <LL_USART_Init+0xf8>)
 8008bfe:	4293      	cmp	r3, r2
 8008c00:	d104      	bne.n	8008c0c <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 8008c02:	2003      	movs	r0, #3
 8008c04:	f7ff fafe 	bl	8008204 <LL_RCC_GetUSARTClockFreq>
 8008c08:	60b8      	str	r0, [r7, #8]
 8008c0a:	e023      	b.n	8008c54 <LL_USART_Init+0xb4>
    }
#if defined(USART2)
    else if (USARTx == USART2)
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	4a23      	ldr	r2, [pc, #140]	@ (8008c9c <LL_USART_Init+0xfc>)
 8008c10:	4293      	cmp	r3, r2
 8008c12:	d104      	bne.n	8008c1e <LL_USART_Init+0x7e>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 8008c14:	4822      	ldr	r0, [pc, #136]	@ (8008ca0 <LL_USART_Init+0x100>)
 8008c16:	f7ff faf5 	bl	8008204 <LL_RCC_GetUSARTClockFreq>
 8008c1a:	60b8      	str	r0, [r7, #8]
 8008c1c:	e01a      	b.n	8008c54 <LL_USART_Init+0xb4>
    }
#endif /* USART2 */
    else if (USARTx == USART3)
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	4a20      	ldr	r2, [pc, #128]	@ (8008ca4 <LL_USART_Init+0x104>)
 8008c22:	4293      	cmp	r3, r2
 8008c24:	d104      	bne.n	8008c30 <LL_USART_Init+0x90>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
 8008c26:	4820      	ldr	r0, [pc, #128]	@ (8008ca8 <LL_USART_Init+0x108>)
 8008c28:	f7ff faec 	bl	8008204 <LL_RCC_GetUSARTClockFreq>
 8008c2c:	60b8      	str	r0, [r7, #8]
 8008c2e:	e011      	b.n	8008c54 <LL_USART_Init+0xb4>
    }
    else if (USARTx == UART4)
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	4a1e      	ldr	r2, [pc, #120]	@ (8008cac <LL_USART_Init+0x10c>)
 8008c34:	4293      	cmp	r3, r2
 8008c36:	d104      	bne.n	8008c42 <LL_USART_Init+0xa2>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART4_CLKSOURCE);
 8008c38:	20c0      	movs	r0, #192	@ 0xc0
 8008c3a:	f7ff fbaf 	bl	800839c <LL_RCC_GetUARTClockFreq>
 8008c3e:	60b8      	str	r0, [r7, #8]
 8008c40:	e008      	b.n	8008c54 <LL_USART_Init+0xb4>
    }
    else if (USARTx == UART5)
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	4a1a      	ldr	r2, [pc, #104]	@ (8008cb0 <LL_USART_Init+0x110>)
 8008c46:	4293      	cmp	r3, r2
 8008c48:	d104      	bne.n	8008c54 <LL_USART_Init+0xb4>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART5_CLKSOURCE);
 8008c4a:	f44f 7040 	mov.w	r0, #768	@ 0x300
 8008c4e:	f7ff fba5 	bl	800839c <LL_RCC_GetUARTClockFreq>
 8008c52:	60b8      	str	r0, [r7, #8]
    /* Configure the USART Baud Rate :
       - prescaler value is required
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8008c54:	68bb      	ldr	r3, [r7, #8]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d011      	beq.n	8008c7e <LL_USART_Init+0xde>
        && (USART_InitStruct->BaudRate != 0U))
 8008c5a:	683b      	ldr	r3, [r7, #0]
 8008c5c:	685b      	ldr	r3, [r3, #4]
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d00d      	beq.n	8008c7e <LL_USART_Init+0xde>
    {
      status = SUCCESS;
 8008c62:	2300      	movs	r3, #0
 8008c64:	73fb      	strb	r3, [r7, #15]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->PrescalerValue,
 8008c66:	683b      	ldr	r3, [r7, #0]
 8008c68:	681a      	ldr	r2, [r3, #0]
                           USART_InitStruct->OverSampling,
 8008c6a:	683b      	ldr	r3, [r7, #0]
 8008c6c:	69d9      	ldr	r1, [r3, #28]
                           USART_InitStruct->BaudRate);
 8008c6e:	683b      	ldr	r3, [r7, #0]
 8008c70:	685b      	ldr	r3, [r3, #4]
      LL_USART_SetBaudRate(USARTx,
 8008c72:	9300      	str	r3, [sp, #0]
 8008c74:	460b      	mov	r3, r1
 8008c76:	68b9      	ldr	r1, [r7, #8]
 8008c78:	6878      	ldr	r0, [r7, #4]
 8008c7a:	f7ff ff41 	bl	8008b00 <LL_USART_SetBaudRate>

    /*---------------------------- USART PRESC Configuration -----------------------
     * Configure USARTx PRESC (Prescaler) with parameters:
     * - PrescalerValue: USART_PRESC_PRESCALER bits according to USART_InitStruct->PrescalerValue value.
     */
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
 8008c7e:	683b      	ldr	r3, [r7, #0]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	4619      	mov	r1, r3
 8008c84:	6878      	ldr	r0, [r7, #4]
 8008c86:	f7ff ff00 	bl	8008a8a <LL_USART_SetPrescaler>
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8008c8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c8c:	4618      	mov	r0, r3
 8008c8e:	3710      	adds	r7, #16
 8008c90:	46bd      	mov	sp, r7
 8008c92:	bd80      	pop	{r7, pc}
 8008c94:	efff69f3 	.word	0xefff69f3
 8008c98:	40013800 	.word	0x40013800
 8008c9c:	40004400 	.word	0x40004400
 8008ca0:	00020003 	.word	0x00020003
 8008ca4:	40004800 	.word	0x40004800
 8008ca8:	00040003 	.word	0x00040003
 8008cac:	40004c00 	.word	0x40004c00
 8008cb0:	40005000 	.word	0x40005000

08008cb4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008cb4:	b084      	sub	sp, #16
 8008cb6:	b580      	push	{r7, lr}
 8008cb8:	b084      	sub	sp, #16
 8008cba:	af00      	add	r7, sp, #0
 8008cbc:	6078      	str	r0, [r7, #4]
 8008cbe:	f107 001c 	add.w	r0, r7, #28
 8008cc2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  }

#else

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	68db      	ldr	r3, [r3, #12]
 8008cca:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8008cd2:	6878      	ldr	r0, [r7, #4]
 8008cd4:	f000 fa6c 	bl	80091b0 <USB_CoreReset>
 8008cd8:	4603      	mov	r3, r0
 8008cda:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8008cdc:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d106      	bne.n	8008cf2 <USB_CoreInit+0x3e>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ce8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	639a      	str	r2, [r3, #56]	@ 0x38
 8008cf0:	e005      	b.n	8008cfe <USB_CoreInit+0x4a>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008cf6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	639a      	str	r2, [r3, #56]	@ 0x38
  }
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

  return ret;
 8008cfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d00:	4618      	mov	r0, r3
 8008d02:	3710      	adds	r7, #16
 8008d04:	46bd      	mov	sp, r7
 8008d06:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008d0a:	b004      	add	sp, #16
 8008d0c:	4770      	bx	lr

08008d0e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008d0e:	b480      	push	{r7}
 8008d10:	b083      	sub	sp, #12
 8008d12:	af00      	add	r7, sp, #0
 8008d14:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	689b      	ldr	r3, [r3, #8]
 8008d1a:	f023 0201 	bic.w	r2, r3, #1
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008d22:	2300      	movs	r3, #0
}
 8008d24:	4618      	mov	r0, r3
 8008d26:	370c      	adds	r7, #12
 8008d28:	46bd      	mov	sp, r7
 8008d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d2e:	4770      	bx	lr

08008d30 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008d30:	b580      	push	{r7, lr}
 8008d32:	b084      	sub	sp, #16
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	6078      	str	r0, [r7, #4]
 8008d38:	460b      	mov	r3, r1
 8008d3a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008d3c:	2300      	movs	r3, #0
 8008d3e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	68db      	ldr	r3, [r3, #12]
 8008d44:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008d4c:	78fb      	ldrb	r3, [r7, #3]
 8008d4e:	2b01      	cmp	r3, #1
 8008d50:	d115      	bne.n	8008d7e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	68db      	ldr	r3, [r3, #12]
 8008d56:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8008d5e:	200a      	movs	r0, #10
 8008d60:	f7f9 fb48 	bl	80023f4 <HAL_Delay>
      ms += 10U;
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	330a      	adds	r3, #10
 8008d68:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008d6a:	6878      	ldr	r0, [r7, #4]
 8008d6c:	f000 fa12 	bl	8009194 <USB_GetMode>
 8008d70:	4603      	mov	r3, r0
 8008d72:	2b01      	cmp	r3, #1
 8008d74:	d01e      	beq.n	8008db4 <USB_SetCurrentMode+0x84>
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	2bc7      	cmp	r3, #199	@ 0xc7
 8008d7a:	d9f0      	bls.n	8008d5e <USB_SetCurrentMode+0x2e>
 8008d7c:	e01a      	b.n	8008db4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008d7e:	78fb      	ldrb	r3, [r7, #3]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d115      	bne.n	8008db0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	68db      	ldr	r3, [r3, #12]
 8008d88:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8008d90:	200a      	movs	r0, #10
 8008d92:	f7f9 fb2f 	bl	80023f4 <HAL_Delay>
      ms += 10U;
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	330a      	adds	r3, #10
 8008d9a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008d9c:	6878      	ldr	r0, [r7, #4]
 8008d9e:	f000 f9f9 	bl	8009194 <USB_GetMode>
 8008da2:	4603      	mov	r3, r0
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d005      	beq.n	8008db4 <USB_SetCurrentMode+0x84>
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	2bc7      	cmp	r3, #199	@ 0xc7
 8008dac:	d9f0      	bls.n	8008d90 <USB_SetCurrentMode+0x60>
 8008dae:	e001      	b.n	8008db4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008db0:	2301      	movs	r3, #1
 8008db2:	e005      	b.n	8008dc0 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	2bc8      	cmp	r3, #200	@ 0xc8
 8008db8:	d101      	bne.n	8008dbe <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008dba:	2301      	movs	r3, #1
 8008dbc:	e000      	b.n	8008dc0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008dbe:	2300      	movs	r3, #0
}
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	3710      	adds	r7, #16
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	bd80      	pop	{r7, pc}

08008dc8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008dc8:	b084      	sub	sp, #16
 8008dca:	b580      	push	{r7, lr}
 8008dcc:	b086      	sub	sp, #24
 8008dce:	af00      	add	r7, sp, #0
 8008dd0:	6078      	str	r0, [r7, #4]
 8008dd2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8008dd6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008dda:	2300      	movs	r3, #0
 8008ddc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008de2:	2300      	movs	r3, #0
 8008de4:	613b      	str	r3, [r7, #16]
 8008de6:	e009      	b.n	8008dfc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008de8:	687a      	ldr	r2, [r7, #4]
 8008dea:	693b      	ldr	r3, [r7, #16]
 8008dec:	3340      	adds	r3, #64	@ 0x40
 8008dee:	009b      	lsls	r3, r3, #2
 8008df0:	4413      	add	r3, r2
 8008df2:	2200      	movs	r2, #0
 8008df4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008df6:	693b      	ldr	r3, [r7, #16]
 8008df8:	3301      	adds	r3, #1
 8008dfa:	613b      	str	r3, [r7, #16]
 8008dfc:	693b      	ldr	r3, [r7, #16]
 8008dfe:	2b0e      	cmp	r3, #14
 8008e00:	d9f2      	bls.n	8008de8 <USB_DevInit+0x20>
  USBx->GCCFG &= ~USB_OTG_GCCFG_PULLDOWNEN;
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008e02:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d11c      	bne.n	8008e44 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008e10:	685b      	ldr	r3, [r3, #4]
 8008e12:	68fa      	ldr	r2, [r7, #12]
 8008e14:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008e18:	f043 0302 	orr.w	r3, r3, #2
 8008e1c:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e22:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	639a      	str	r2, [r3, #56]	@ 0x38
#if defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) \
 || defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx)
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALEXTOEN;
    USBx->GCCFG |= USB_OTG_GCCFG_VBVALOVAL;
#else
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	601a      	str	r2, [r3, #0]
 8008e42:	e005      	b.n	8008e50 <USB_DevInit+0x88>
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBVALOVAL;
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */

    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e48:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008e56:	461a      	mov	r2, r3
 8008e58:	2300      	movs	r3, #0
 8008e5a:	6013      	str	r3, [r2, #0]
  else
#endif /* defined (STM32U595xx) || defined (STM32U5A5xx) || defined (STM32U599xx) || defined (STM32U5A9xx) ||
          defined (STM32U5F7xx) || defined (STM32U5G7xx) || defined (STM32U5F9xx) || defined (STM32U5G9xx) */
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008e5c:	2103      	movs	r1, #3
 8008e5e:	6878      	ldr	r0, [r7, #4]
 8008e60:	f000 f95e 	bl	8009120 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008e64:	2110      	movs	r1, #16
 8008e66:	6878      	ldr	r0, [r7, #4]
 8008e68:	f000 f8fa 	bl	8009060 <USB_FlushTxFifo>
 8008e6c:	4603      	mov	r3, r0
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d001      	beq.n	8008e76 <USB_DevInit+0xae>
  {
    ret = HAL_ERROR;
 8008e72:	2301      	movs	r3, #1
 8008e74:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008e76:	6878      	ldr	r0, [r7, #4]
 8008e78:	f000 f924 	bl	80090c4 <USB_FlushRxFifo>
 8008e7c:	4603      	mov	r3, r0
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d001      	beq.n	8008e86 <USB_DevInit+0xbe>
  {
    ret = HAL_ERROR;
 8008e82:	2301      	movs	r3, #1
 8008e84:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008e8c:	461a      	mov	r2, r3
 8008e8e:	2300      	movs	r3, #0
 8008e90:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008e98:	461a      	mov	r2, r3
 8008e9a:	2300      	movs	r3, #0
 8008e9c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008ea4:	461a      	mov	r2, r3
 8008ea6:	2300      	movs	r3, #0
 8008ea8:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008eaa:	2300      	movs	r3, #0
 8008eac:	613b      	str	r3, [r7, #16]
 8008eae:	e043      	b.n	8008f38 <USB_DevInit+0x170>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008eb0:	693b      	ldr	r3, [r7, #16]
 8008eb2:	015a      	lsls	r2, r3, #5
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	4413      	add	r3, r2
 8008eb8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008ec2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008ec6:	d118      	bne.n	8008efa <USB_DevInit+0x132>
    {
      if (i == 0U)
 8008ec8:	693b      	ldr	r3, [r7, #16]
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d10a      	bne.n	8008ee4 <USB_DevInit+0x11c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008ece:	693b      	ldr	r3, [r7, #16]
 8008ed0:	015a      	lsls	r2, r3, #5
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	4413      	add	r3, r2
 8008ed6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008eda:	461a      	mov	r2, r3
 8008edc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008ee0:	6013      	str	r3, [r2, #0]
 8008ee2:	e013      	b.n	8008f0c <USB_DevInit+0x144>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008ee4:	693b      	ldr	r3, [r7, #16]
 8008ee6:	015a      	lsls	r2, r3, #5
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	4413      	add	r3, r2
 8008eec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008ef0:	461a      	mov	r2, r3
 8008ef2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8008ef6:	6013      	str	r3, [r2, #0]
 8008ef8:	e008      	b.n	8008f0c <USB_DevInit+0x144>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008efa:	693b      	ldr	r3, [r7, #16]
 8008efc:	015a      	lsls	r2, r3, #5
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	4413      	add	r3, r2
 8008f02:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008f06:	461a      	mov	r2, r3
 8008f08:	2300      	movs	r3, #0
 8008f0a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008f0c:	693b      	ldr	r3, [r7, #16]
 8008f0e:	015a      	lsls	r2, r3, #5
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	4413      	add	r3, r2
 8008f14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008f18:	461a      	mov	r2, r3
 8008f1a:	2300      	movs	r3, #0
 8008f1c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008f1e:	693b      	ldr	r3, [r7, #16]
 8008f20:	015a      	lsls	r2, r3, #5
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	4413      	add	r3, r2
 8008f26:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008f2a:	461a      	mov	r2, r3
 8008f2c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8008f30:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008f32:	693b      	ldr	r3, [r7, #16]
 8008f34:	3301      	adds	r3, #1
 8008f36:	613b      	str	r3, [r7, #16]
 8008f38:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008f3c:	461a      	mov	r2, r3
 8008f3e:	693b      	ldr	r3, [r7, #16]
 8008f40:	4293      	cmp	r3, r2
 8008f42:	d3b5      	bcc.n	8008eb0 <USB_DevInit+0xe8>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008f44:	2300      	movs	r3, #0
 8008f46:	613b      	str	r3, [r7, #16]
 8008f48:	e043      	b.n	8008fd2 <USB_DevInit+0x20a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008f4a:	693b      	ldr	r3, [r7, #16]
 8008f4c:	015a      	lsls	r2, r3, #5
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	4413      	add	r3, r2
 8008f52:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008f5c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008f60:	d118      	bne.n	8008f94 <USB_DevInit+0x1cc>
    {
      if (i == 0U)
 8008f62:	693b      	ldr	r3, [r7, #16]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d10a      	bne.n	8008f7e <USB_DevInit+0x1b6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008f68:	693b      	ldr	r3, [r7, #16]
 8008f6a:	015a      	lsls	r2, r3, #5
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	4413      	add	r3, r2
 8008f70:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008f74:	461a      	mov	r2, r3
 8008f76:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008f7a:	6013      	str	r3, [r2, #0]
 8008f7c:	e013      	b.n	8008fa6 <USB_DevInit+0x1de>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008f7e:	693b      	ldr	r3, [r7, #16]
 8008f80:	015a      	lsls	r2, r3, #5
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	4413      	add	r3, r2
 8008f86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008f8a:	461a      	mov	r2, r3
 8008f8c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8008f90:	6013      	str	r3, [r2, #0]
 8008f92:	e008      	b.n	8008fa6 <USB_DevInit+0x1de>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008f94:	693b      	ldr	r3, [r7, #16]
 8008f96:	015a      	lsls	r2, r3, #5
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	4413      	add	r3, r2
 8008f9c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008fa0:	461a      	mov	r2, r3
 8008fa2:	2300      	movs	r3, #0
 8008fa4:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008fa6:	693b      	ldr	r3, [r7, #16]
 8008fa8:	015a      	lsls	r2, r3, #5
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	4413      	add	r3, r2
 8008fae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008fb2:	461a      	mov	r2, r3
 8008fb4:	2300      	movs	r3, #0
 8008fb6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008fb8:	693b      	ldr	r3, [r7, #16]
 8008fba:	015a      	lsls	r2, r3, #5
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	4413      	add	r3, r2
 8008fc0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008fc4:	461a      	mov	r2, r3
 8008fc6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8008fca:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008fcc:	693b      	ldr	r3, [r7, #16]
 8008fce:	3301      	adds	r3, #1
 8008fd0:	613b      	str	r3, [r7, #16]
 8008fd2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008fd6:	461a      	mov	r2, r3
 8008fd8:	693b      	ldr	r3, [r7, #16]
 8008fda:	4293      	cmp	r3, r2
 8008fdc:	d3b5      	bcc.n	8008f4a <USB_DevInit+0x182>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008fe4:	691b      	ldr	r3, [r3, #16]
 8008fe6:	68fa      	ldr	r2, [r7, #12]
 8008fe8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008fec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008ff0:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	2200      	movs	r2, #0
 8008ff6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8008ffe:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009000:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009004:	2b00      	cmp	r3, #0
 8009006:	d105      	bne.n	8009014 <USB_DevInit+0x24c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	699b      	ldr	r3, [r3, #24]
 800900c:	f043 0210 	orr.w	r2, r3, #16
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	699a      	ldr	r2, [r3, #24]
 8009018:	4b10      	ldr	r3, [pc, #64]	@ (800905c <USB_DevInit+0x294>)
 800901a:	4313      	orrs	r3, r2
 800901c:	687a      	ldr	r2, [r7, #4]
 800901e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009020:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8009024:	2b00      	cmp	r3, #0
 8009026:	d005      	beq.n	8009034 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	699b      	ldr	r3, [r3, #24]
 800902c:	f043 0208 	orr.w	r2, r3, #8
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009034:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8009038:	2b01      	cmp	r3, #1
 800903a:	d107      	bne.n	800904c <USB_DevInit+0x284>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	699b      	ldr	r3, [r3, #24]
 8009040:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009044:	f043 0304 	orr.w	r3, r3, #4
 8009048:	687a      	ldr	r2, [r7, #4]
 800904a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800904c:	7dfb      	ldrb	r3, [r7, #23]
}
 800904e:	4618      	mov	r0, r3
 8009050:	3718      	adds	r7, #24
 8009052:	46bd      	mov	sp, r7
 8009054:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009058:	b004      	add	sp, #16
 800905a:	4770      	bx	lr
 800905c:	803c3800 	.word	0x803c3800

08009060 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009060:	b480      	push	{r7}
 8009062:	b085      	sub	sp, #20
 8009064:	af00      	add	r7, sp, #0
 8009066:	6078      	str	r0, [r7, #4]
 8009068:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800906a:	2300      	movs	r3, #0
 800906c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	3301      	adds	r3, #1
 8009072:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800907a:	d901      	bls.n	8009080 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800907c:	2303      	movs	r3, #3
 800907e:	e01b      	b.n	80090b8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	691b      	ldr	r3, [r3, #16]
 8009084:	2b00      	cmp	r3, #0
 8009086:	daf2      	bge.n	800906e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009088:	2300      	movs	r3, #0
 800908a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800908c:	683b      	ldr	r3, [r7, #0]
 800908e:	019b      	lsls	r3, r3, #6
 8009090:	f043 0220 	orr.w	r2, r3, #32
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	3301      	adds	r3, #1
 800909c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80090a4:	d901      	bls.n	80090aa <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80090a6:	2303      	movs	r3, #3
 80090a8:	e006      	b.n	80090b8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	691b      	ldr	r3, [r3, #16]
 80090ae:	f003 0320 	and.w	r3, r3, #32
 80090b2:	2b20      	cmp	r3, #32
 80090b4:	d0f0      	beq.n	8009098 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80090b6:	2300      	movs	r3, #0
}
 80090b8:	4618      	mov	r0, r3
 80090ba:	3714      	adds	r7, #20
 80090bc:	46bd      	mov	sp, r7
 80090be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090c2:	4770      	bx	lr

080090c4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80090c4:	b480      	push	{r7}
 80090c6:	b085      	sub	sp, #20
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80090cc:	2300      	movs	r3, #0
 80090ce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	3301      	adds	r3, #1
 80090d4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80090dc:	d901      	bls.n	80090e2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80090de:	2303      	movs	r3, #3
 80090e0:	e018      	b.n	8009114 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	691b      	ldr	r3, [r3, #16]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	daf2      	bge.n	80090d0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80090ea:	2300      	movs	r3, #0
 80090ec:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	2210      	movs	r2, #16
 80090f2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	3301      	adds	r3, #1
 80090f8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009100:	d901      	bls.n	8009106 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009102:	2303      	movs	r3, #3
 8009104:	e006      	b.n	8009114 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	691b      	ldr	r3, [r3, #16]
 800910a:	f003 0310 	and.w	r3, r3, #16
 800910e:	2b10      	cmp	r3, #16
 8009110:	d0f0      	beq.n	80090f4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009112:	2300      	movs	r3, #0
}
 8009114:	4618      	mov	r0, r3
 8009116:	3714      	adds	r7, #20
 8009118:	46bd      	mov	sp, r7
 800911a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800911e:	4770      	bx	lr

08009120 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009120:	b480      	push	{r7}
 8009122:	b085      	sub	sp, #20
 8009124:	af00      	add	r7, sp, #0
 8009126:	6078      	str	r0, [r7, #4]
 8009128:	460b      	mov	r3, r1
 800912a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009136:	681a      	ldr	r2, [r3, #0]
 8009138:	78fb      	ldrb	r3, [r7, #3]
 800913a:	68f9      	ldr	r1, [r7, #12]
 800913c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009140:	4313      	orrs	r3, r2
 8009142:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009144:	2300      	movs	r3, #0
}
 8009146:	4618      	mov	r0, r3
 8009148:	3714      	adds	r7, #20
 800914a:	46bd      	mov	sp, r7
 800914c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009150:	4770      	bx	lr

08009152 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8009152:	b480      	push	{r7}
 8009154:	b085      	sub	sp, #20
 8009156:	af00      	add	r7, sp, #0
 8009158:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	68fa      	ldr	r2, [r7, #12]
 8009168:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800916c:	f023 0303 	bic.w	r3, r3, #3
 8009170:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009178:	685b      	ldr	r3, [r3, #4]
 800917a:	68fa      	ldr	r2, [r7, #12]
 800917c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009180:	f043 0302 	orr.w	r3, r3, #2
 8009184:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009186:	2300      	movs	r3, #0
}
 8009188:	4618      	mov	r0, r3
 800918a:	3714      	adds	r7, #20
 800918c:	46bd      	mov	sp, r7
 800918e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009192:	4770      	bx	lr

08009194 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8009194:	b480      	push	{r7}
 8009196:	b083      	sub	sp, #12
 8009198:	af00      	add	r7, sp, #0
 800919a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	695b      	ldr	r3, [r3, #20]
 80091a0:	f003 0301 	and.w	r3, r3, #1
}
 80091a4:	4618      	mov	r0, r3
 80091a6:	370c      	adds	r7, #12
 80091a8:	46bd      	mov	sp, r7
 80091aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ae:	4770      	bx	lr

080091b0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80091b0:	b480      	push	{r7}
 80091b2:	b085      	sub	sp, #20
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80091b8:	2300      	movs	r3, #0
 80091ba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	3301      	adds	r3, #1
 80091c0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80091c8:	d901      	bls.n	80091ce <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80091ca:	2303      	movs	r3, #3
 80091cc:	e01b      	b.n	8009206 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	691b      	ldr	r3, [r3, #16]
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	daf2      	bge.n	80091bc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80091d6:	2300      	movs	r3, #0
 80091d8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	691b      	ldr	r3, [r3, #16]
 80091de:	f043 0201 	orr.w	r2, r3, #1
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	3301      	adds	r3, #1
 80091ea:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80091f2:	d901      	bls.n	80091f8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80091f4:	2303      	movs	r3, #3
 80091f6:	e006      	b.n	8009206 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	691b      	ldr	r3, [r3, #16]
 80091fc:	f003 0301 	and.w	r3, r3, #1
 8009200:	2b01      	cmp	r3, #1
 8009202:	d0f0      	beq.n	80091e6 <USB_CoreReset+0x36>

  return HAL_OK;
 8009204:	2300      	movs	r3, #0
}
 8009206:	4618      	mov	r0, r3
 8009208:	3714      	adds	r7, #20
 800920a:	46bd      	mov	sp, r7
 800920c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009210:	4770      	bx	lr

08009212 <memset>:
 8009212:	4402      	add	r2, r0
 8009214:	4603      	mov	r3, r0
 8009216:	4293      	cmp	r3, r2
 8009218:	d100      	bne.n	800921c <memset+0xa>
 800921a:	4770      	bx	lr
 800921c:	f803 1b01 	strb.w	r1, [r3], #1
 8009220:	e7f9      	b.n	8009216 <memset+0x4>
	...

08009224 <__libc_init_array>:
 8009224:	b570      	push	{r4, r5, r6, lr}
 8009226:	4d0d      	ldr	r5, [pc, #52]	@ (800925c <__libc_init_array+0x38>)
 8009228:	2600      	movs	r6, #0
 800922a:	4c0d      	ldr	r4, [pc, #52]	@ (8009260 <__libc_init_array+0x3c>)
 800922c:	1b64      	subs	r4, r4, r5
 800922e:	10a4      	asrs	r4, r4, #2
 8009230:	42a6      	cmp	r6, r4
 8009232:	d109      	bne.n	8009248 <__libc_init_array+0x24>
 8009234:	4d0b      	ldr	r5, [pc, #44]	@ (8009264 <__libc_init_array+0x40>)
 8009236:	2600      	movs	r6, #0
 8009238:	4c0b      	ldr	r4, [pc, #44]	@ (8009268 <__libc_init_array+0x44>)
 800923a:	f000 f817 	bl	800926c <_init>
 800923e:	1b64      	subs	r4, r4, r5
 8009240:	10a4      	asrs	r4, r4, #2
 8009242:	42a6      	cmp	r6, r4
 8009244:	d105      	bne.n	8009252 <__libc_init_array+0x2e>
 8009246:	bd70      	pop	{r4, r5, r6, pc}
 8009248:	f855 3b04 	ldr.w	r3, [r5], #4
 800924c:	3601      	adds	r6, #1
 800924e:	4798      	blx	r3
 8009250:	e7ee      	b.n	8009230 <__libc_init_array+0xc>
 8009252:	f855 3b04 	ldr.w	r3, [r5], #4
 8009256:	3601      	adds	r6, #1
 8009258:	4798      	blx	r3
 800925a:	e7f2      	b.n	8009242 <__libc_init_array+0x1e>
 800925c:	080093ac 	.word	0x080093ac
 8009260:	080093ac 	.word	0x080093ac
 8009264:	080093ac 	.word	0x080093ac
 8009268:	080093b0 	.word	0x080093b0

0800926c <_init>:
 800926c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800926e:	bf00      	nop
 8009270:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009272:	bc08      	pop	{r3}
 8009274:	469e      	mov	lr, r3
 8009276:	4770      	bx	lr

08009278 <_fini>:
 8009278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800927a:	bf00      	nop
 800927c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800927e:	bc08      	pop	{r3}
 8009280:	469e      	mov	lr, r3
 8009282:	4770      	bx	lr
